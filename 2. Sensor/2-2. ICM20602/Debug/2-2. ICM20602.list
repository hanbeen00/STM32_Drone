
2-2. ICM20602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08007228  08007228  00008228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e4  080076e4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ec  080076ec  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ec  080076ec  000086ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076f0  080076f0  000086f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080076f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000228  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad8c  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284d  00000000  00000000  00013f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  000167e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000999  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ad5  00000000  00000000  00017e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d681  00000000  00000000  0003b956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca61e  00000000  00000000  00048fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001135f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043d0  00000000  00000000  00113638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00117a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800720c 	.word	0x0800720c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800720c 	.word	0x0800720c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f023 0210 	bic.w	r2, r3, #16
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	@ 0x40
 8001070:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fa34 	bl	80054e8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001090:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001094:	f7ff ffd2 	bl	800103c <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff ffb4 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffb1 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ca:	f002 fba2 	bl	8003812 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ea:	2318      	movs	r3, #24
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001102:	f002 fd64 	bl	8003bce <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001106:	2100      	movs	r1, #0
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800110a:	f7ff fef3 	bl	8000ef4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800110e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001112:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001114:	f7ff ff6a 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800111e:	f7ff ff65 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001128:	f7ff ff60 	bl	8000fec <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001148:	f002 fb63 	bl	8003812 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001168:	f002 fb53 	bl	8003812 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001188:	f002 fb43 	bl	8003812 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a0:	f002 fb37 	bl	8003812 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80011a6:	f7ff fe95 	bl	8000ed4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b0:	f7ff ff0e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 80011ba:	f7ff ff09 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011c4:	f7ff ff04 	bl	8000fd0 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011e6:	f7ff ff41 	bl	800106c <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <BNO080_Initialization+0xc4>)
 80011ec:	f004 f834 	bl	8005258 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f4:	482c      	ldr	r0, [pc, #176]	@ (80012a8 <BNO080_Initialization+0xc8>)
 80011f6:	f7ff feeb 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fe:	482b      	ldr	r0, [pc, #172]	@ (80012ac <BNO080_Initialization+0xcc>)
 8001200:	f7ff fee6 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	4829      	ldr	r0, [pc, #164]	@ (80012b0 <BNO080_Initialization+0xd0>)
 800120a:	f7ff feef 	bl	8000fec <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800120e:	20c8      	movs	r0, #200	@ 0xc8
 8001210:	f001 fc46 	bl	8002aa0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001218:	4825      	ldr	r0, [pc, #148]	@ (80012b0 <BNO080_Initialization+0xd0>)
 800121a:	f7ff fed9 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800121e:	f000 f8d7 	bl	80013d0 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001222:	f000 f8d5 	bl	80013d0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001226:	f000 f8f7 	bl	8001418 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800122a:	f000 f8d1 	bl	80013d0 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800122e:	f000 f8f3 	bl	8001418 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <BNO080_Initialization+0xd4>)
 8001234:	22f9      	movs	r2, #249	@ 0xf9
 8001236:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800123a:	2200      	movs	r2, #0
 800123c:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800123e:	2102      	movs	r1, #2
 8001240:	2002      	movs	r0, #2
 8001242:	f000 f95b 	bl	80014fc <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 8001246:	f000 f8c3 	bl	80013d0 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800124a:	f000 f8e5 	bl	8001418 <BNO080_receivePacket>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11b      	bne.n	800128c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <BNO080_Initialization+0xd8>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	461a      	mov	r2, r3
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	4618      	mov	r0, r3
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4603      	mov	r3, r0
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <BNO080_Initialization+0xdc>)
 8001270:	f003 fff2 	bl	8005258 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <BNO080_Initialization+0xd4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2bf8      	cmp	r3, #248	@ 0xf8
 800127a:	d107      	bne.n	800128c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <BNO080_Initialization+0xe0>)
 8001284:	f003 ffe8 	bl	8005258 <iprintf>
			return (0);
 8001288:	2300      	movs	r3, #0
 800128a:	e007      	b.n	800129c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	22f8      	movs	r2, #248	@ 0xf8
 8001292:	4619      	mov	r1, r3
 8001294:	480b      	ldr	r0, [pc, #44]	@ (80012c4 <BNO080_Initialization+0xe4>)
 8001296:	f003 ffdf 	bl	8005258 <iprintf>
	return (1); //Something went wrong
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08007228 	.word	0x08007228
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	200001f0 	.word	0x200001f0
 80012bc:	0800723c 	.word	0x0800723c
 80012c0:	08007254 	.word	0x08007254
 80012c4:	08007274 	.word	0x08007274

080012c8 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012d2:	bf00      	nop
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <SPI2_SendByte+0x40>)
 80012d6:	f7ff fe33 	bl	8000f40 <LL_SPI_IsActiveFlag_TXE>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <SPI2_SendByte+0x40>)
 80012e6:	f7ff fe4c 	bl	8000f82 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ea:	bf00      	nop
 80012ec:	4806      	ldr	r0, [pc, #24]	@ (8001308 <SPI2_SendByte+0x40>)
 80012ee:	f7ff fe14 	bl	8000f1a <LL_SPI_IsActiveFlag_RXNE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <SPI2_SendByte+0x40>)
 80012fa:	f7ff fe34 	bl	8000f66 <LL_SPI_ReceiveData8>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40003800 	.word	0x40003800

0800130c <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	2005      	movs	r0, #5
 800131e:	f000 f805 	bl	800132c <BNO080_setFeatureCommand>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800133c:	22fd      	movs	r2, #253	@ 0xfd
 800133e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001340:	4a22      	ldr	r2, [pc, #136]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800135e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001368:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001372:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	0e1b      	lsrs	r3, r3, #24
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800137c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 800139c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 80013a6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0c1b      	lsrs	r3, r3, #16
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 80013b0:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0e1b      	lsrs	r3, r3, #24
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <BNO080_setFeatureCommand+0xa0>)
 80013ba:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 80013bc:	2111      	movs	r1, #17
 80013be:	2002      	movs	r0, #2
 80013c0:	f000 f89c 	bl	80014fc <BNO080_sendPacket>
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001f4 	.word	0x200001f4

080013d0 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	e00c      	b.n	80013f6 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <BNO080_waitForSPI+0x40>)
 80013e2:	f7ff fde0 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00a      	b.n	8001406 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d1ee      	bne.n	80013dc <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <BNO080_waitForSPI+0x44>)
 8001400:	f003 ff92 	bl	8005328 <puts>
	return (0);
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40020800 	.word	0x40020800
 8001414:	080072c0 	.word	0x080072c0

08001418 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800141e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001422:	4832      	ldr	r0, [pc, #200]	@ (80014ec <BNO080_receivePacket+0xd4>)
 8001424:	f7ff fdbf 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 800142e:	2300      	movs	r3, #0
 8001430:	e057      	b.n	80014e2 <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001432:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001436:	482e      	ldr	r0, [pc, #184]	@ (80014f0 <BNO080_receivePacket+0xd8>)
 8001438:	f7ff fdd8 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ff43 	bl	80012c8 <SPI2_SendByte>
 8001442:	4603      	mov	r3, r0
 8001444:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff3e 	bl	80012c8 <SPI2_SendByte>
 800144c:	4603      	mov	r3, r0
 800144e:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff39 	bl	80012c8 <SPI2_SendByte>
 8001456:	4603      	mov	r3, r0
 8001458:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff ff34 	bl	80012c8 <SPI2_SendByte>
 8001460:	4603      	mov	r3, r0
 8001462:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001464:	4a23      	ldr	r2, [pc, #140]	@ (80014f4 <BNO080_receivePacket+0xdc>)
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800146a:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <BNO080_receivePacket+0xdc>)
 800146c:	7b3b      	ldrb	r3, [r7, #12]
 800146e:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001470:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <BNO080_receivePacket+0xdc>)
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <BNO080_receivePacket+0xdc>)
 8001478:	7abb      	ldrb	r3, [r7, #10]
 800147a:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 800147c:	7b3b      	ldrb	r3, [r7, #12]
 800147e:	b21b      	sxth	r3, r3
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 800148c:	893b      	ldrh	r3, [r7, #8]
 800148e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001492:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001494:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 800149c:	2300      	movs	r3, #0
 800149e:	e020      	b.n	80014e2 <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	3b04      	subs	r3, #4
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	81fb      	strh	r3, [r7, #14]
 80014ac:	e00e      	b.n	80014cc <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 80014ae:	20ff      	movs	r0, #255	@ 0xff
 80014b0:	f7ff ff0a 	bl	80012c8 <SPI2_SendByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80014bc:	d803      	bhi.n	80014c6 <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <BNO080_receivePacket+0xe0>)
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	3301      	adds	r3, #1
 80014ca:	81fb      	strh	r3, [r7, #14]
 80014cc:	89fa      	ldrh	r2, [r7, #14]
 80014ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbeb      	blt.n	80014ae <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <BNO080_receivePacket+0xd8>)
 80014dc:	f7ff fd78 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	200001f0 	.word	0x200001f0
 80014f8:	200001f4 	.word	0x200001f4

080014fc <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	4613      	mov	r3, r2
 800150a:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	3304      	adds	r3, #4
 8001510:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001512:	f7ff ff5d 	bl	80013d0 <BNO080_waitForSPI>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 800151c:	2300      	movs	r3, #0
 800151e:	e032      	b.n	8001586 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001520:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001524:	481a      	ldr	r0, [pc, #104]	@ (8001590 <BNO080_sendPacket+0x94>)
 8001526:	f7ff fd61 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fecb 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fec5 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fec1 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <BNO080_sendPacket+0x98>)
 800154a:	5cd2      	ldrb	r2, [r2, r3]
 800154c:	1c51      	adds	r1, r2, #1
 800154e:	b2c8      	uxtb	r0, r1
 8001550:	4910      	ldr	r1, [pc, #64]	@ (8001594 <BNO080_sendPacket+0x98>)
 8001552:	54c8      	strb	r0, [r1, r3]
 8001554:	4610      	mov	r0, r2
 8001556:	f7ff feb7 	bl	80012c8 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e008      	b.n	8001572 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <BNO080_sendPacket+0x9c>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff feae 	bl	80012c8 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3f2      	bcc.n	8001560 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800157a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800157e:	4804      	ldr	r0, [pc, #16]	@ (8001590 <BNO080_sendPacket+0x94>)
 8001580:	f7ff fd26 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	return (1);
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40020400 	.word	0x40020400
 8001594:	20000274 	.word	0x20000274
 8001598:	200001f4 	.word	0x200001f4

0800159c <LL_SPI_Enable>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_SPI_SetStandard>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 0210 	bic.w	r2, r3, #16
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	605a      	str	r2, [r3, #4]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_SPI_IsActiveFlag_TXE>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b02      	cmp	r3, #2
 800161a:	d101      	bne.n	8001620 <LL_SPI_IsActiveFlag_TXE+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_SPI_ReceiveData8>:
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	330c      	adds	r3, #12
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_SPI_TransmitData8>:
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	330c      	adds	r3, #12
 800165a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_GPIO_IsInputPinSet>:
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4013      	ands	r3, r2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_GPIO_SetOutputPin>:
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	619a      	str	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_GPIO_ResetOutputPin>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <LL_AHB1_GRP1_EnableClock>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40023800 	.word	0x40023800

08001704 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <LL_APB2_GRP1_EnableClock+0x2c>)
 800170e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001710:	4907      	ldr	r1, [pc, #28]	@ (8001730 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <LL_APB2_GRP1_EnableClock+0x2c>)
 800171a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40023800 	.word	0x40023800

08001734 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b090      	sub	sp, #64	@ 0x40
 8001738:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	2228      	movs	r2, #40	@ 0x28
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fed0 	bl	80054e8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001758:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800175c:	f7ff ffd2 	bl	8001704 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff ffb7 	bl	80016d4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001766:	2004      	movs	r0, #4
 8001768:	f7ff ffb4 	bl	80016d4 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800176c:	23e0      	movs	r3, #224	@ 0xe0
 800176e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001770:	2302      	movs	r3, #2
 8001772:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001780:	2305      	movs	r3, #5
 8001782:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4825      	ldr	r0, [pc, #148]	@ (8001820 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800178a:	f002 f842 	bl	8003812 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001792:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001796:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800179c:	2302      	movs	r3, #2
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80017a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80017aa:	2310      	movs	r3, #16
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80017b6:	230a      	movs	r3, #10
 80017b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	4619      	mov	r1, r3
 80017c0:	4818      	ldr	r0, [pc, #96]	@ (8001824 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017c2:	f002 fa04 	bl	8003bce <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80017c6:	2100      	movs	r1, #0
 80017c8:	4816      	ldr	r0, [pc, #88]	@ (8001824 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017ca:	f7ff fef7 	bl	80015bc <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80017ce:	2110      	movs	r1, #16
 80017d0:	4815      	ldr	r0, [pc, #84]	@ (8001828 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017d2:	f7ff ff6f 	bl	80016b4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80017d6:	2310      	movs	r3, #16
 80017d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017da:	2301      	movs	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80017ea:	463b      	mov	r3, r7
 80017ec:	4619      	mov	r1, r3
 80017ee:	480e      	ldr	r0, [pc, #56]	@ (8001828 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017f0:	f002 f80f 	bl	8003812 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80017f4:	2320      	movs	r3, #32
 80017f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4808      	ldr	r0, [pc, #32]	@ (8001828 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001806:	f002 f804 	bl	8003812 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800180c:	f7ff fec6 	bl	800159c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001810:	2110      	movs	r1, #16
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001814:	f7ff ff40 	bl	8001698 <LL_GPIO_SetOutputPin>
}
 8001818:	bf00      	nop
 800181a:	3740      	adds	r7, #64	@ 0x40
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40020000 	.word	0x40020000
 8001824:	40013000 	.word	0x40013000
 8001828:	40020800 	.word	0x40020800

0800182c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001836:	bf00      	nop
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <SPI1_SendByte+0x40>)
 800183a:	f7ff fee5 	bl	8001608 <LL_SPI_IsActiveFlag_TXE>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f9      	beq.n	8001838 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4619      	mov	r1, r3
 8001848:	4808      	ldr	r0, [pc, #32]	@ (800186c <SPI1_SendByte+0x40>)
 800184a:	f7ff fefe 	bl	800164a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800184e:	bf00      	nop
 8001850:	4806      	ldr	r0, [pc, #24]	@ (800186c <SPI1_SendByte+0x40>)
 8001852:	f7ff fec6 	bl	80015e2 <LL_SPI_IsActiveFlag_RXNE>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f9      	beq.n	8001850 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800185c:	4803      	ldr	r0, [pc, #12]	@ (800186c <SPI1_SendByte+0x40>)
 800185e:	f7ff fee6 	bl	800162e <LL_SPI_ReceiveData8>
 8001862:	4603      	mov	r3, r0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013000 	.word	0x40013000

08001870 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800187a:	2110      	movs	r1, #16
 800187c:	480b      	ldr	r0, [pc, #44]	@ (80018ac <ICM20602_Readbyte+0x3c>)
 800187e:	f7ff ff19 	bl	80016b4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffce 	bl	800182c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff ffcb 	bl	800182c <SPI1_SendByte>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800189a:	2110      	movs	r1, #16
 800189c:	4803      	ldr	r0, [pc, #12]	@ (80018ac <ICM20602_Readbyte+0x3c>)
 800189e:	f7ff fefb 	bl	8001698 <LL_GPIO_SetOutputPin>
	
	return val;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020800 	.word	0x40020800

080018b0 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	603a      	str	r2, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	460b      	mov	r3, r1
 80018be:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80018c4:	2110      	movs	r1, #16
 80018c6:	4810      	ldr	r0, [pc, #64]	@ (8001908 <ICM20602_Readbytes+0x58>)
 80018c8:	f7ff fef4 	bl	80016b4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ffa9 	bl	800182c <SPI1_SendByte>
	while(i < len)
 80018da:	e009      	b.n	80018f0 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60fa      	str	r2, [r7, #12]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	18d4      	adds	r4, r2, r3
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff ffa0 	bl	800182c <SPI1_SendByte>
 80018ec:	4603      	mov	r3, r0
 80018ee:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3f1      	bcc.n	80018dc <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80018f8:	2110      	movs	r1, #16
 80018fa:	4803      	ldr	r0, [pc, #12]	@ (8001908 <ICM20602_Readbytes+0x58>)
 80018fc:	f7ff fecc 	bl	8001698 <LL_GPIO_SetOutputPin>
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	40020800 	.word	0x40020800

0800190c <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800191c:	2110      	movs	r1, #16
 800191e:	480b      	ldr	r0, [pc, #44]	@ (800194c <ICM20602_Writebyte+0x40>)
 8001920:	f7ff fec8 	bl	80016b4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff7d 	bl	800182c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff79 	bl	800182c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800193a:	2110      	movs	r1, #16
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <ICM20602_Writebyte+0x40>)
 800193e:	f7ff feab 	bl	8001698 <LL_GPIO_SetOutputPin>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40020800 	.word	0x40020800

08001950 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001964:	463b      	mov	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800196c:	f7ff fee2 	bl	8001734 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001970:	4833      	ldr	r0, [pc, #204]	@ (8001a40 <ICM20602_Initialization+0xf0>)
 8001972:	f003 fc71 	bl	8005258 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001976:	2075      	movs	r0, #117	@ 0x75
 8001978:	f7ff ff7a 	bl	8001870 <ICM20602_Readbyte>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b12      	cmp	r3, #18
 8001984:	d105      	bne.n	8001992 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4619      	mov	r1, r3
 800198a:	482e      	ldr	r0, [pc, #184]	@ (8001a44 <ICM20602_Initialization+0xf4>)
 800198c:	f003 fc64 	bl	8005258 <iprintf>
 8001990:	e012      	b.n	80019b8 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b12      	cmp	r3, #18
 8001996:	d00f      	beq.n	80019b8 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001998:	2075      	movs	r0, #117	@ 0x75
 800199a:	f7ff ff69 	bl	8001870 <ICM20602_Readbyte>
 800199e:	4603      	mov	r3, r0
 80019a0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b12      	cmp	r3, #18
 80019a6:	d007      	beq.n	80019b8 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2212      	movs	r2, #18
 80019ac:	4619      	mov	r1, r3
 80019ae:	4826      	ldr	r0, [pc, #152]	@ (8001a48 <ICM20602_Initialization+0xf8>)
 80019b0:	f003 fc52 	bl	8005258 <iprintf>
			return 1; //ERROR
 80019b4:	2301      	movs	r3, #1
 80019b6:	e03f      	b.n	8001a38 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	206b      	movs	r0, #107	@ 0x6b
 80019bc:	f7ff ffa6 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f001 f86d 	bl	8002aa0 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80019c6:	2101      	movs	r1, #1
 80019c8:	206b      	movs	r0, #107	@ 0x6b
 80019ca:	f7ff ff9f 	bl	800190c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80019ce:	2032      	movs	r0, #50	@ 0x32
 80019d0:	f001 f866 	bl	8002aa0 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80019d4:	2138      	movs	r1, #56	@ 0x38
 80019d6:	206c      	movs	r0, #108	@ 0x6c
 80019d8:	f7ff ff98 	bl	800190c <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80019dc:	2032      	movs	r0, #50	@ 0x32
 80019de:	f001 f85f 	bl	8002aa0 <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80019e2:	2100      	movs	r1, #0
 80019e4:	2019      	movs	r0, #25
 80019e6:	f7ff ff91 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 80019ea:	2032      	movs	r0, #50	@ 0x32
 80019ec:	f001 f858 	bl	8002aa0 <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80019f0:	2105      	movs	r1, #5
 80019f2:	201a      	movs	r0, #26
 80019f4:	f7ff ff8a 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 80019f8:	2032      	movs	r0, #50	@ 0x32
 80019fa:	f001 f851 	bl	8002aa0 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80019fe:	2118      	movs	r1, #24
 8001a00:	201b      	movs	r0, #27
 8001a02:	f7ff ff83 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a06:	2032      	movs	r0, #50	@ 0x32
 8001a08:	f001 f84a 	bl	8002aa0 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001a0c:	2118      	movs	r1, #24
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f7ff ff7c 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	@ 0x32
 8001a16:	f001 f843 	bl	8002aa0 <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	201d      	movs	r0, #29
 8001a1e:	f7ff ff75 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a22:	2032      	movs	r0, #50	@ 0x32
 8001a24:	f001 f83c 	bl	8002aa0 <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2038      	movs	r0, #56	@ 0x38
 8001a2c:	f7ff ff6e 	bl	800190c <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a30:	2032      	movs	r0, #50	@ 0x32
 8001a32:	f001 f835 	bl	8002aa0 <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	080072d4 	.word	0x080072d4
 8001a44:	080072ec 	.word	0x080072ec
 8001a48:	08007310 	.word	0x08007310

08001a4c <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2106      	movs	r1, #6
 8001a5c:	2043      	movs	r0, #67	@ 0x43
 8001a5e:	f7ff ff27 	bl	80018b0 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8001a62:	7a3b      	ldrb	r3, [r7, #8]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7a7b      	ldrb	r3, [r7, #9]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8001a76:	7abb      	ldrb	r3, [r7, #10]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b219      	sxth	r1, r3
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3302      	adds	r3, #2
 8001a86:	430a      	orrs	r2, r1
 8001a88:	b212      	sxth	r2, r2
 8001a8a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8001a8c:	7b3b      	ldrb	r3, [r7, #12]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b219      	sxth	r1, r3
 8001a94:	7b7b      	ldrb	r3, [r7, #13]
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	b212      	sxth	r2, r2
 8001aa0:	801a      	strh	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <ICM20602_DataReady+0x14>)
 8001ab4:	f7ff fddb 	bl	800166e <LL_GPIO_IsInputPinSet>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40020800 	.word	0x40020800

08001ac4 <LL_GPIO_ResetOutputPin>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <LL_AHB1_GRP1_EnableClock>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001af0:	4907      	ldr	r1, [pc, #28]	@ (8001b10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800

08001b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001b2a:	2080      	movs	r0, #128	@ 0x80
 8001b2c:	f7ff ffda 	bl	8001ae4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001b30:	2004      	movs	r0, #4
 8001b32:	f7ff ffd7 	bl	8001ae4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff ffd4 	bl	8001ae4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff ffd1 	bl	8001ae4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8001b42:	f240 2117 	movw	r1, #535	@ 0x217
 8001b46:	4826      	ldr	r0, [pc, #152]	@ (8001be0 <MX_GPIO_Init+0xcc>)
 8001b48:	f7ff ffbc 	bl	8001ac4 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8001b4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b50:	4824      	ldr	r0, [pc, #144]	@ (8001be4 <MX_GPIO_Init+0xd0>)
 8001b52:	f7ff ffb7 	bl	8001ac4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5a:	4823      	ldr	r0, [pc, #140]	@ (8001be8 <MX_GPIO_Init+0xd4>)
 8001b5c:	f7ff ffb2 	bl	8001ac4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8001b60:	f240 2317 	movw	r3, #535	@ 0x217
 8001b64:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b66:	2301      	movs	r3, #1
 8001b68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	463b      	mov	r3, r7
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4819      	ldr	r0, [pc, #100]	@ (8001be0 <MX_GPIO_Init+0xcc>)
 8001b7c:	f001 fe49 	bl	8003812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8001b80:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001b84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4619      	mov	r1, r3
 8001b92:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <MX_GPIO_Init+0xcc>)
 8001b94:	f001 fe3d 	bl	8003812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <MX_GPIO_Init+0xd0>)
 8001bb4:	f001 fe2d 	bl	8003812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bbc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_GPIO_Init+0xd4>)
 8001bd4:	f001 fe1d 	bl	8003812 <LL_GPIO_Init>

}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020000 	.word	0x40020000

08001bec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	621a      	str	r2, [r3, #32]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	621a      	str	r2, [r3, #32]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b089      	sub	sp, #36	@ 0x24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	e853 3f00 	ldrex	r3, [r3]
 8001c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f043 0320 	orr.w	r3, r3, #32
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	330c      	adds	r3, #12
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	61ba      	str	r2, [r7, #24]
 8001c78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	e841 2300 	strex	r3, r2, [r1]
 8001c82:	613b      	str	r3, [r7, #16]
   return(result);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e7      	bne.n	8001c5a <LL_USART_EnableIT_RXNE+0x8>
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3724      	adds	r7, #36	@ 0x24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	605a      	str	r2, [r3, #4]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00d      	b.n	8001ce6 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4808      	ldr	r0, [pc, #32]	@ (8001cf8 <_write+0x40>)
 8001cd6:	f7ff ffdf 	bl	8001c98 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fee0 	bl	8002aa0 <HAL_Delay>
	for(int i=0;i<len;i++)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dbed      	blt.n	8001cca <_write+0x12>
	}
}
 8001cee:	bf00      	nop
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40011400 	.word	0x40011400

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f000 fe5b 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f8ab 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f7ff ff03 	bl	8001b14 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001d0e:	f000 fc79 	bl	8002604 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001d12:	f000 fdc9 	bl	80028a8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001d16:	f000 f9c1 	bl	800209c <MX_SPI2_Init>
  MX_SPI1_Init();
 8001d1a:	f000 f96d 	bl	8001ff8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // 타이머로 PWM신호 만들어서 패시브 부저 출력하기
  LL_TIM_EnableCounter(TIM3);
 8001d1e:	4848      	ldr	r0, [pc, #288]	@ (8001e40 <main+0x144>)
 8001d20:	f7ff ff64 	bl	8001bec <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001d24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d28:	4845      	ldr	r0, [pc, #276]	@ (8001e40 <main+0x144>)
 8001d2a:	f7ff ff6f 	bl	8001c0c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <main+0x144>)
 8001d30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d34:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001d36:	2064      	movs	r0, #100	@ 0x64
 8001d38:	f000 feb2 	bl	8002aa0 <HAL_Delay>
  TIM3->PSC = 1500;
 8001d3c:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <main+0x144>)
 8001d3e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001d44:	2064      	movs	r0, #100	@ 0x64
 8001d46:	f000 feab 	bl	8002aa0 <HAL_Delay>
  TIM3->PSC = 1000;
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <main+0x144>)
 8001d4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d50:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001d52:	2064      	movs	r0, #100	@ 0x64
 8001d54:	f000 fea4 	bl	8002aa0 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001d58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d5c:	4838      	ldr	r0, [pc, #224]	@ (8001e40 <main+0x144>)
 8001d5e:	f7ff ff66 	bl	8001c2e <LL_TIM_CC_DisableChannel>

  // 수신 완료 인터럽트
  LL_USART_EnableIT_RXNE(USART6);
 8001d62:	4838      	ldr	r0, [pc, #224]	@ (8001e44 <main+0x148>)
 8001d64:	f7ff ff75 	bl	8001c52 <LL_USART_EnableIT_RXNE>

  // SPI2 초기화, 센서 내부 초기화
  BNO080_Initialization();
 8001d68:	f7ff fa3a 	bl	80011e0 <BNO080_Initialization>
  //400Hz이므로 2500마이크로초로 초기화
  BNO080_enableRotationVector(2500);
 8001d6c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001d70:	f7ff facc 	bl	800130c <BNO080_enableRotationVector>

  // SPI1 초기화, 센서 내부 초기화
  ICM20602_Initialization();
 8001d74:	f7ff fdec 	bl	8001950 <ICM20602_Initialization>
		Quaternion_Update(&q[0]);

		printf("%d,%d,%d\n",(int)(BNO080_Roll*100), (int)(BNO080_Pitch*100), (int)(BNO080_Yaw*100));
	}*/

	if(ICM20602_DataReady() == 1)
 8001d78:	f7ff fe98 	bl	8001aac <ICM20602_DataReady>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d1fa      	bne.n	8001d78 <main+0x7c>
	{
		ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8001d82:	4831      	ldr	r0, [pc, #196]	@ (8001e48 <main+0x14c>)
 8001d84:	f7ff fe62 	bl	8001a4c <ICM20602_Get3AxisGyroRawData>

		// degree per second, 민감도 +-2000, adc -32768 ~ 32767
		ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8001d88:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <main+0x150>)
 8001d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d96:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001e50 <main+0x154>
 8001d9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d9e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001e54 <main+0x158>
 8001da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <main+0x150>)
 8001da8:	edc3 7a07 	vstr	s15, [r3, #28]
		ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <main+0x150>)
 8001dae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dba:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001e50 <main+0x154>
 8001dbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc2:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001e54 <main+0x158>
 8001dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <main+0x150>)
 8001dcc:	edc3 7a08 	vstr	s15, [r3, #32]
		ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <main+0x150>)
 8001dd2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001e50 <main+0x154>
 8001de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de6:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001e54 <main+0x158>
 8001dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dee:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <main+0x150>)
 8001df0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		printf("%d %d %d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <main+0x150>)
 8001df6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dfa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001e58 <main+0x15c>
 8001dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e02:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <main+0x150>)
 8001e08:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e0c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001e58 <main+0x15c>
 8001e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e14:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <main+0x150>)
 8001e1a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e1e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001e58 <main+0x15c>
 8001e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	ee17 3a90 	vmov	r3, s15
 8001e2e:	ee16 2a10 	vmov	r2, s12
 8001e32:	ee16 1a90 	vmov	r1, s13
 8001e36:	4809      	ldr	r0, [pc, #36]	@ (8001e5c <main+0x160>)
 8001e38:	f003 fa0e 	bl	8005258 <iprintf>
	if(ICM20602_DataReady() == 1)
 8001e3c:	e79c      	b.n	8001d78 <main+0x7c>
 8001e3e:	bf00      	nop
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40011400 	.word	0x40011400
 8001e48:	20000284 	.word	0x20000284
 8001e4c:	2000027c 	.word	0x2000027c
 8001e50:	44fa0000 	.word	0x44fa0000
 8001e54:	47000000 	.word	0x47000000
 8001e58:	42c80000 	.word	0x42c80000
 8001e5c:	0800733c 	.word	0x0800733c

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	@ 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	@ 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fb3a 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e94:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <SystemClock_Config+0xcc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <SystemClock_Config+0xd0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ed4:	23a8      	movs	r3, #168	@ 0xa8
 8001ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001edc:	2304      	movs	r3, #4
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fee5 	bl	8002cb4 <HAL_RCC_OscConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ef0:	f000 f820 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2105      	movs	r1, #5
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 f946 	bl	80031a4 <HAL_RCC_ClockConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f1e:	f000 f809 	bl	8001f34 <Error_Handler>
  }
}
 8001f22:	bf00      	nop
 8001f24:	3750      	adds	r7, #80	@ 0x50
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <Error_Handler+0x8>

08001f40 <LL_SPI_SetStandard>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f023 0210 	bic.w	r2, r3, #16
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	605a      	str	r2, [r3, #4]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <LL_AHB1_GRP1_EnableClock>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f74:	4907      	ldr	r1, [pc, #28]	@ (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023800 	.word	0x40023800

08001f98 <LL_APB1_GRP1_EnableClock>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fa4:	4907      	ldr	r1, [pc, #28]	@ (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <LL_APB2_GRP1_EnableClock>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b090      	sub	sp, #64	@ 0x40
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001ffe:	f107 0318 	add.w	r3, r7, #24
 8002002:	2228      	movs	r2, #40	@ 0x28
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fa6e 	bl	80054e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	463b      	mov	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800201c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002020:	f7ff ffd2 	bl	8001fc8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002024:	2001      	movs	r0, #1
 8002026:	f7ff ff9f 	bl	8001f68 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800202a:	23e0      	movs	r3, #224	@ 0xe0
 800202c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800202e:	2302      	movs	r3, #2
 8002030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800203e:	2305      	movs	r3, #5
 8002040:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	463b      	mov	r3, r7
 8002044:	4619      	mov	r1, r3
 8002046:	4813      	ldr	r0, [pc, #76]	@ (8002094 <MX_SPI1_Init+0x9c>)
 8002048:	f001 fbe3 	bl	8003812 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002050:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002054:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800205a:	2302      	movs	r3, #2
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800205e:	2301      	movs	r3, #1
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002068:	2310      	movs	r3, #16
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002074:	230a      	movs	r3, #10
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	@ (8002098 <MX_SPI1_Init+0xa0>)
 8002080:	f001 fda5 	bl	8003bce <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002084:	2100      	movs	r1, #0
 8002086:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_SPI1_Init+0xa0>)
 8002088:	f7ff ff5a 	bl	8001f40 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	3740      	adds	r7, #64	@ 0x40
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020000 	.word	0x40020000
 8002098:	40013000 	.word	0x40013000

0800209c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b090      	sub	sp, #64	@ 0x40
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	2228      	movs	r2, #40	@ 0x28
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fa1c 	bl	80054e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	463b      	mov	r3, r7
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80020c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020c4:	f7ff ff68 	bl	8001f98 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff ff4d 	bl	8001f68 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80020ce:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80020d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020d4:	2302      	movs	r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80020e4:	2305      	movs	r3, #5
 80020e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	4813      	ldr	r0, [pc, #76]	@ (800213c <MX_SPI2_Init+0xa0>)
 80020ee:	f001 fb90 	bl	8003812 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80020f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80020fa:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002100:	2302      	movs	r3, #2
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002104:	2301      	movs	r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800210e:	2318      	movs	r3, #24
 8002110:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800211a:	230a      	movs	r3, #10
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800211e:	f107 0318 	add.w	r3, r7, #24
 8002122:	4619      	mov	r1, r3
 8002124:	4806      	ldr	r0, [pc, #24]	@ (8002140 <MX_SPI2_Init+0xa4>)
 8002126:	f001 fd52 	bl	8003bce <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800212a:	2100      	movs	r1, #0
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <MX_SPI2_Init+0xa4>)
 800212e:	f7ff ff07 	bl	8001f40 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	3740      	adds	r7, #64	@ 0x40
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40020400 	.word	0x40020400
 8002140:	40003800 	.word	0x40003800

08002144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_MspInit+0x4c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_MspInit+0x4c>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002158:	6453      	str	r3, [r2, #68]	@ 0x44
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_MspInit+0x4c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a08      	ldr	r2, [pc, #32]	@ (8002190 <HAL_MspInit+0x4c>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <LL_USART_IsActiveFlag_RXNE>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_USART_ClearFlag_RXNE>:
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f06f 0220 	mvn.w	r2, #32
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_USART_ReceiveData8>:
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	b2db      	uxtb	r3, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <NMI_Handler+0x4>

080021f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <MemManage_Handler+0x4>

08002208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <UsageFault_Handler+0x4>

08002218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 fc0b 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 8002254:	480a      	ldr	r0, [pc, #40]	@ (8002280 <USART6_IRQHandler+0x30>)
 8002256:	f7ff ff9d 	bl	8002194 <LL_USART_IsActiveFlag_RXNE>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8002260:	4807      	ldr	r0, [pc, #28]	@ (8002280 <USART6_IRQHandler+0x30>)
 8002262:	f7ff ffaa 	bl	80021ba <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002266:	4806      	ldr	r0, [pc, #24]	@ (8002280 <USART6_IRQHandler+0x30>)
 8002268:	f7ff ffb5 	bl	80021d6 <LL_USART_ReceiveData8>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <USART6_IRQHandler+0x34>)
 8002272:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <USART6_IRQHandler+0x38>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40011400 	.word	0x40011400
 8002284:	200002a5 	.word	0x200002a5
 8002288:	200002a4 	.word	0x200002a4

0800228c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_kill>:

int _kill(int pid, int sig)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a6:	f003 f971 	bl	800558c <__errno>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2216      	movs	r2, #22
 80022ae:	601a      	str	r2, [r3, #0]
  return -1;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_exit>:

void _exit (int status)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffe7 	bl	800229c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ce:	bf00      	nop
 80022d0:	e7fd      	b.n	80022ce <_exit+0x12>

080022d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e00a      	b.n	80022fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e4:	f3af 8000 	nop.w
 80022e8:	4601      	mov	r1, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	60ba      	str	r2, [r7, #8]
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf0      	blt.n	80022e4 <_read+0x12>
  }

  return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_close>:
  }
  return len;
}

int _close(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002334:	605a      	str	r2, [r3, #4]
  return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_isatty>:

int _isatty(int file)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234c:	2301      	movs	r3, #1
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237c:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <_sbrk+0x5c>)
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <_sbrk+0x60>)
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <_sbrk+0x64>)
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <_sbrk+0x68>)
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a4:	f003 f8f2 	bl	800558c <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	e009      	b.n	80023c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a05      	ldr	r2, [pc, #20]	@ (80023d8 <_sbrk+0x64>)
 80023c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20020000 	.word	0x20020000
 80023d4:	00000400 	.word	0x00000400
 80023d8:	200002a8 	.word	0x200002a8
 80023dc:	20000400 	.word	0x20000400

080023e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e4:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <SystemInit+0x20>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <SystemInit+0x20>)
 80023ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <LL_TIM_EnableARRPreload>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d01c      	beq.n	800246e <LL_TIM_OC_EnableFast+0x4a>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b04      	cmp	r3, #4
 8002438:	d017      	beq.n	800246a <LL_TIM_OC_EnableFast+0x46>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b10      	cmp	r3, #16
 800243e:	d012      	beq.n	8002466 <LL_TIM_OC_EnableFast+0x42>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b40      	cmp	r3, #64	@ 0x40
 8002444:	d00d      	beq.n	8002462 <LL_TIM_OC_EnableFast+0x3e>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800244c:	d007      	beq.n	800245e <LL_TIM_OC_EnableFast+0x3a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002454:	d101      	bne.n	800245a <LL_TIM_OC_EnableFast+0x36>
 8002456:	2305      	movs	r3, #5
 8002458:	e00a      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 800245a:	2306      	movs	r3, #6
 800245c:	e008      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_TIM_OC_EnableFast+0x4c>
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3318      	adds	r3, #24
 8002476:	4619      	mov	r1, r3
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	4a0a      	ldr	r2, [pc, #40]	@ (80024a4 <LL_TIM_OC_EnableFast+0x80>)
 800247c:	5cd3      	ldrb	r3, [r2, r3]
 800247e:	440b      	add	r3, r1
 8002480:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <LL_TIM_OC_EnableFast+0x84>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	4619      	mov	r1, r3
 800248e:	2304      	movs	r3, #4
 8002490:	408b      	lsls	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	601a      	str	r2, [r3, #0]

}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	08007360 	.word	0x08007360
 80024a8:	08007368 	.word	0x08007368

080024ac <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d01c      	beq.n	80024f6 <LL_TIM_OC_EnablePreload+0x4a>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d017      	beq.n	80024f2 <LL_TIM_OC_EnablePreload+0x46>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d012      	beq.n	80024ee <LL_TIM_OC_EnablePreload+0x42>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d00d      	beq.n	80024ea <LL_TIM_OC_EnablePreload+0x3e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d4:	d007      	beq.n	80024e6 <LL_TIM_OC_EnablePreload+0x3a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024dc:	d101      	bne.n	80024e2 <LL_TIM_OC_EnablePreload+0x36>
 80024de:	2305      	movs	r3, #5
 80024e0:	e00a      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e008      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_TIM_OC_EnablePreload+0x4c>
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3318      	adds	r3, #24
 80024fe:	4619      	mov	r1, r3
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <LL_TIM_OC_EnablePreload+0x80>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	440b      	add	r3, r1
 8002508:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <LL_TIM_OC_EnablePreload+0x84>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	4619      	mov	r1, r3
 8002516:	2308      	movs	r3, #8
 8002518:	408b      	lsls	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	08007360 	.word	0x08007360
 8002530:	08007368 	.word	0x08007368

08002534 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_AHB1_GRP1_EnableClock>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025b0:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4013      	ands	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023800 	.word	0x40023800

080025d4 <LL_APB1_GRP1_EnableClock>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e0:	4907      	ldr	r1, [pc, #28]	@ (8002600 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4013      	ands	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f2:	68fb      	ldr	r3, [r7, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40023800 	.word	0x40023800

08002604 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	@ 0x50
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800260a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	2220      	movs	r2, #32
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ff60 	bl	80054e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002638:	2002      	movs	r0, #2
 800263a:	f7ff ffcb 	bl	80025d4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800263e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002642:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002644:	2300      	movs	r3, #0
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8002648:	2314      	movs	r3, #20
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800264c:	2300      	movs	r3, #0
 800264e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002650:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002654:	4619      	mov	r1, r3
 8002656:	4822      	ldr	r0, [pc, #136]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 8002658:	f001 fb7e 	bl	8003d58 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800265c:	4820      	ldr	r0, [pc, #128]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 800265e:	f7ff fed1 	bl	8002404 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002662:	2100      	movs	r1, #0
 8002664:	481e      	ldr	r0, [pc, #120]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 8002666:	f7ff ff65 	bl	8002534 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800266a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800266e:	481c      	ldr	r0, [pc, #112]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 8002670:	f7ff ff1c 	bl	80024ac <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002674:	2360      	movs	r3, #96	@ 0x60
 8002676:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002680:	230a      	movs	r3, #10
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002692:	4813      	ldr	r0, [pc, #76]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 8002694:	f001 fbfa 	bl	8003e8c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800269c:	4810      	ldr	r0, [pc, #64]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 800269e:	f7ff fec1 	bl	8002424 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80026a2:	2100      	movs	r1, #0
 80026a4:	480e      	ldr	r0, [pc, #56]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 80026a6:	f7ff ff5a 	bl	800255e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80026aa:	480d      	ldr	r0, [pc, #52]	@ (80026e0 <MX_TIM3_Init+0xdc>)
 80026ac:	f7ff ff6a 	bl	8002584 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026b0:	2002      	movs	r0, #2
 80026b2:	f7ff ff77 	bl	80025a4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80026b6:	2302      	movs	r3, #2
 80026b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026ba:	2302      	movs	r3, #2
 80026bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <MX_TIM3_Init+0xe0>)
 80026d4:	f001 f89d 	bl	8003812 <LL_GPIO_Init>

}
 80026d8:	bf00      	nop
 80026da:	3750      	adds	r7, #80	@ 0x50
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40020400 	.word	0x40020400

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	@ (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	@ (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_USART_Enable>:
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_USART_ConfigAsyncMode>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <LL_AHB1_GRP1_EnableClock>:
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002854:	4907      	ldr	r1, [pc, #28]	@ (8002874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4313      	orrs	r3, r2
 800285a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800285e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40023800 	.word	0x40023800

08002878 <LL_APB2_GRP1_EnableClock>:
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002880:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002882:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002884:	4907      	ldr	r1, [pc, #28]	@ (80028a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4313      	orrs	r3, r2
 800288a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800288e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40023800 	.word	0x40023800

080028a8 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	@ 0x38
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	615a      	str	r2, [r3, #20]
 80028c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80028d2:	2020      	movs	r0, #32
 80028d4:	f7ff ffd0 	bl	8002878 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028d8:	2004      	movs	r0, #4
 80028da:	f7ff ffb5 	bl	8002848 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80028de:	23c0      	movs	r3, #192	@ 0xc0
 80028e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028e2:	2302      	movs	r3, #2
 80028e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80028f2:	2308      	movs	r3, #8
 80028f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4819      	ldr	r0, [pc, #100]	@ (8002960 <MX_USART6_UART_Init+0xb8>)
 80028fc:	f000 ff89 	bl	8003812 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002900:	f7ff fef2 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 8002904:	4603      	mov	r3, r0
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff42 	bl	8002794 <NVIC_EncodePriority>
 8002910:	4603      	mov	r3, r0
 8002912:	4619      	mov	r1, r3
 8002914:	2047      	movs	r0, #71	@ 0x47
 8002916:	f7ff ff13 	bl	8002740 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800291a:	2047      	movs	r0, #71	@ 0x47
 800291c:	f7ff fef2 	bl	8002704 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8002920:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8002924:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002932:	230c      	movs	r3, #12
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002936:	2300      	movs	r3, #0
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800293a:	2300      	movs	r3, #0
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4807      	ldr	r0, [pc, #28]	@ (8002964 <MX_USART6_UART_Init+0xbc>)
 8002946:	f001 feef 	bl	8004728 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800294a:	4806      	ldr	r0, [pc, #24]	@ (8002964 <MX_USART6_UART_Init+0xbc>)
 800294c:	f7ff ff65 	bl	800281a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <MX_USART6_UART_Init+0xbc>)
 8002952:	f7ff ff52 	bl	80027fa <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3738      	adds	r7, #56	@ 0x38
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40020800 	.word	0x40020800
 8002964:	40011400 	.word	0x40011400

08002968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800296c:	f7ff fd38 	bl	80023e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002996:	f002 fdff 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299a:	f7ff f9af 	bl	8001cfc <main>
  bx  lr    
 800299e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80029ac:	080076f4 	.word	0x080076f4
  ldr r2, =_sbss
 80029b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80029b4:	200003fc 	.word	0x200003fc

080029b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c0:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <HAL_Init+0x40>)
 80029c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_Init+0x40>)
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_Init+0x40>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f931 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ea:	200f      	movs	r0, #15
 80029ec:	f000 f808 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7ff fba8 	bl	8002144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_InitTick+0x54>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_InitTick+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f93b 	bl	8002c9a <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f000 f911 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	@ (8002a5c <HAL_InitTick+0x5c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008
 8002a84:	200002ac 	.word	0x200002ac

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200002ac 	.word	0x200002ac

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_Delay+0x44>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__NVIC_SetPriorityGrouping>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_SetPriority>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	@ (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	@ 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	@ 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff47 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff5c 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffb0 	bl	8002c08 <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e267      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d075      	beq.n	8002dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b85      	ldr	r3, [pc, #532]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b82      	ldr	r3, [pc, #520]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05b      	beq.n	8002dbc <HAL_RCC_OscConfig+0x108>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d157      	bne.n	8002dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e242      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x74>
 8002d1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a75      	ldr	r2, [pc, #468]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e01d      	b.n	8002d64 <HAL_RCC_OscConfig+0xb0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x98>
 8002d32:	4b70      	ldr	r3, [pc, #448]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6f      	ldr	r2, [pc, #444]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6c      	ldr	r2, [pc, #432]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCC_OscConfig+0xb0>
 8002d4c:	4b69      	ldr	r3, [pc, #420]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a68      	ldr	r2, [pc, #416]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b66      	ldr	r3, [pc, #408]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a65      	ldr	r2, [pc, #404]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fe8c 	bl	8002a88 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff fe88 	bl	8002a88 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e207      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0xc0>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fe78 	bl	8002a88 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7ff fe74 	bl	8002a88 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	@ 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1f3      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	4b51      	ldr	r3, [pc, #324]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0xe8>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d063      	beq.n	8002e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d11c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b44      	ldr	r3, [pc, #272]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	4b41      	ldr	r3, [pc, #260]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_RCC_OscConfig+0x152>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1c7      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4937      	ldr	r1, [pc, #220]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	e03a      	b.n	8002e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d020      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e24:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <HAL_RCC_OscConfig+0x244>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7ff fe2d 	bl	8002a88 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e32:	f7ff fe29 	bl	8002a88 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1a8      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b28      	ldr	r3, [pc, #160]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4925      	ldr	r1, [pc, #148]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	600b      	str	r3, [r1, #0]
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e66:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_RCC_OscConfig+0x244>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7ff fe0c 	bl	8002a88 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7ff fe08 	bl	8002a88 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e187      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d036      	beq.n	8002f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <HAL_RCC_OscConfig+0x248>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7ff fdec 	bl	8002a88 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7ff fde8 	bl	8002a88 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e167      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x200>
 8002ed2:	e01b      	b.n	8002f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_OscConfig+0x248>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7ff fdd5 	bl	8002a88 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	e00e      	b.n	8002f00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee2:	f7ff fdd1 	bl	8002a88 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d907      	bls.n	8002f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e150      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	42470000 	.word	0x42470000
 8002efc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ea      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8097 	beq.w	8003048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b81      	ldr	r3, [pc, #516]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	4a7c      	ldr	r2, [pc, #496]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b77      	ldr	r3, [pc, #476]	@ (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a73      	ldr	r2, [pc, #460]	@ (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f62:	f7ff fd91 	bl	8002a88 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6a:	f7ff fd8d 	bl	8002a88 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e10c      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003128 <HAL_RCC_OscConfig+0x474>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2ea>
 8002f90:	4b64      	ldr	r3, [pc, #400]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	4a63      	ldr	r2, [pc, #396]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x324>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x30c>
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	4a5e      	ldr	r2, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x324>
 8002fc0:	4b58      	ldr	r3, [pc, #352]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a57      	ldr	r2, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fcc:	4b55      	ldr	r3, [pc, #340]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	4a54      	ldr	r2, [pc, #336]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 0304 	bic.w	r3, r3, #4
 8002fd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7ff fd52 	bl	8002a88 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7ff fd4e 	bl	8002a88 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0cb      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	4b49      	ldr	r3, [pc, #292]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0ee      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x334>
 800300a:	e014      	b.n	8003036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7ff fd3c 	bl	8002a88 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7ff fd38 	bl	8002a88 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0b5      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	4b3e      	ldr	r3, [pc, #248]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ee      	bne.n	8003014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b39      	ldr	r3, [pc, #228]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	4a38      	ldr	r2, [pc, #224]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003046:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a1 	beq.w	8003194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003052:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	d05c      	beq.n	8003118 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d141      	bne.n	80030ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b31      	ldr	r3, [pc, #196]	@ (800312c <HAL_RCC_OscConfig+0x478>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7ff fd0c 	bl	8002a88 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7ff fd08 	bl	8002a88 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e087      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	491b      	ldr	r1, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x478>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7ff fce1 	bl	8002a88 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ca:	f7ff fcdd 	bl	8002a88 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e05c      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x416>
 80030e8:	e054      	b.n	8003194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <HAL_RCC_OscConfig+0x478>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff fcca 	bl	8002a88 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff fcc6 	bl	8002a88 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e045      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_OscConfig+0x470>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x444>
 8003116:	e03d      	b.n	8003194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e038      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
 8003124:	40023800 	.word	0x40023800
 8003128:	40007000 	.word	0x40007000
 800312c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <HAL_RCC_OscConfig+0x4ec>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d028      	beq.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d121      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d11a      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	4293      	cmp	r3, r2
 800316a:	d111      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0cc      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b68      	ldr	r3, [pc, #416]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d90c      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b65      	ldr	r3, [pc, #404]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ce:	4b63      	ldr	r3, [pc, #396]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0b8      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f8:	4b59      	ldr	r3, [pc, #356]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a58      	ldr	r2, [pc, #352]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003210:	4b53      	ldr	r3, [pc, #332]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a52      	ldr	r2, [pc, #328]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800321a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	494d      	ldr	r1, [pc, #308]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d044      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b47      	ldr	r3, [pc, #284]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d119      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e07f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d003      	beq.n	8003262 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	2b03      	cmp	r3, #3
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b3f      	ldr	r3, [pc, #252]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e067      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b37      	ldr	r3, [pc, #220]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4934      	ldr	r1, [pc, #208]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7ff fbf8 	bl	8002a88 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7ff fbf4 	bl	8002a88 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e04f      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d20c      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b22      	ldr	r3, [pc, #136]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b20      	ldr	r3, [pc, #128]	@ (800335c <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e032      	b.n	8003352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4916      	ldr	r1, [pc, #88]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003316:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	490e      	ldr	r1, [pc, #56]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332a:	f000 f821 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 800332e:	4602      	mov	r2, r0
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	490a      	ldr	r1, [pc, #40]	@ (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	5ccb      	ldrb	r3, [r1, r3]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	@ (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003346:	4b09      	ldr	r3, [pc, #36]	@ (800336c <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fb58 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023c00 	.word	0x40023c00
 8003360:	40023800 	.word	0x40023800
 8003364:	08007348 	.word	0x08007348
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004

08003370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b094      	sub	sp, #80	@ 0x50
 8003376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003388:	4b79      	ldr	r3, [pc, #484]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d00d      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003394:	2b08      	cmp	r3, #8
 8003396:	f200 80e1 	bhi.w	800355c <HAL_RCC_GetSysClockFreq+0x1ec>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x34>
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x3a>
 80033a2:	e0db      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b73      	ldr	r3, [pc, #460]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a8:	e0db      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033aa:	4b73      	ldr	r3, [pc, #460]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x208>)
 80033ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ae:	e0d8      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d063      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2200      	movs	r2, #0
 80033ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033da:	2300      	movs	r3, #0
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80033de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033e2:	4622      	mov	r2, r4
 80033e4:	462b      	mov	r3, r5
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4621      	mov	r1, r4
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	6139      	str	r1, [r7, #16]
 8003400:	4629      	mov	r1, r5
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003414:	4659      	mov	r1, fp
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4651      	mov	r1, sl
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4651      	mov	r1, sl
 8003424:	ebb2 0801 	subs.w	r8, r2, r1
 8003428:	4659      	mov	r1, fp
 800342a:	eb63 0901 	sbc.w	r9, r3, r1
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800343e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003442:	4690      	mov	r8, r2
 8003444:	4699      	mov	r9, r3
 8003446:	4623      	mov	r3, r4
 8003448:	eb18 0303 	adds.w	r3, r8, r3
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	462b      	mov	r3, r5
 8003450:	eb49 0303 	adc.w	r3, r9, r3
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003462:	4629      	mov	r1, r5
 8003464:	024b      	lsls	r3, r1, #9
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800346c:	4621      	mov	r1, r4
 800346e:	024a      	lsls	r2, r1, #9
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800347a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003480:	f7fd fb92 	bl	8000ba8 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800348c:	e058      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	2200      	movs	r2, #0
 8003496:	4618      	mov	r0, r3
 8003498:	4611      	mov	r1, r2
 800349a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	2300      	movs	r3, #0
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	f04f 0000 	mov.w	r0, #0
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	0159      	lsls	r1, r3, #5
 80034b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ba:	0150      	lsls	r0, r2, #5
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4641      	mov	r1, r8
 80034c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034c6:	4649      	mov	r1, r9
 80034c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e0:	ebb2 040a 	subs.w	r4, r2, sl
 80034e4:	eb63 050b 	sbc.w	r5, r3, fp
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	00eb      	lsls	r3, r5, #3
 80034f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f6:	00e2      	lsls	r2, r4, #3
 80034f8:	4614      	mov	r4, r2
 80034fa:	461d      	mov	r5, r3
 80034fc:	4643      	mov	r3, r8
 80034fe:	18e3      	adds	r3, r4, r3
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	464b      	mov	r3, r9
 8003504:	eb45 0303 	adc.w	r3, r5, r3
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003520:	4621      	mov	r1, r4
 8003522:	028a      	lsls	r2, r1, #10
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352a:	2200      	movs	r2, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	61fa      	str	r2, [r7, #28]
 8003530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003534:	f7fd fb38 	bl	8000ba8 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x204>)
 800355e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003564:	4618      	mov	r0, r3
 8003566:	3750      	adds	r7, #80	@ 0x50
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200

0800357c <LL_GPIO_SetPinMode>:
{
 800357c:	b480      	push	{r7}
 800357e:	b08b      	sub	sp, #44	@ 0x2c
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	613b      	str	r3, [r7, #16]
  return result;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80035a2:	2320      	movs	r3, #32
 80035a4:	e003      	b.n	80035ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2103      	movs	r1, #3
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	401a      	ands	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	61fb      	str	r3, [r7, #28]
  return result;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	372c      	adds	r7, #44	@ 0x2c
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_GPIO_SetPinOutputType>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_GPIO_SetPinSpeed>:
{
 8003626:	b480      	push	{r7}
 8003628:	b08b      	sub	sp, #44	@ 0x2c
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	613b      	str	r3, [r7, #16]
  return result;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2103      	movs	r1, #3
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
  return result;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e003      	b.n	8003686 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	372c      	adds	r7, #44	@ 0x2c
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_GPIO_SetPinPull>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08b      	sub	sp, #44	@ 0x2c
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	613b      	str	r3, [r7, #16]
  return result;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2103      	movs	r1, #3
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	61fb      	str	r3, [r7, #28]
  return result;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e003      	b.n	8003700 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	60da      	str	r2, [r3, #12]
}
 800370e:	bf00      	nop
 8003710:	372c      	adds	r7, #44	@ 0x2c
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_GPIO_SetAFPin_0_7>:
{
 800371a:	b480      	push	{r7}
 800371c:	b08b      	sub	sp, #44	@ 0x2c
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	613b      	str	r3, [r7, #16]
  return result;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	210f      	movs	r1, #15
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
  return result;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e003      	b.n	800377a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	372c      	adds	r7, #44	@ 0x2c
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_GPIO_SetAFPin_8_15>:
{
 8003794:	b480      	push	{r7}
 8003796:	b08b      	sub	sp, #44	@ 0x2c
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	613b      	str	r3, [r7, #16]
  return result;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	210f      	movs	r1, #15
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	61fb      	str	r3, [r7, #28]
  return result;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003806:	bf00      	nop
 8003808:	372c      	adds	r7, #44	@ 0x2c
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	@ 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	617b      	str	r3, [r7, #20]
  return result;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <LL_GPIO_Init+0x2e>
    return 32U;
 800383c:	2320      	movs	r3, #32
 800383e:	e003      	b.n	8003848 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800384a:	e057      	b.n	80038fc <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	4013      	ands	r3, r2
 800385a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d049      	beq.n	80038f6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d003      	beq.n	8003872 <LL_GPIO_Init+0x60>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d10d      	bne.n	800388e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	461a      	mov	r2, r3
 8003878:	6a39      	ldr	r1, [r7, #32]
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fed3 	bl	8003626 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	461a      	mov	r2, r3
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff feb4 	bl	80035f6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	461a      	mov	r2, r3
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff02 	bl	80036a0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d121      	bne.n	80038e8 <LL_GPIO_Init+0xd6>
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	60bb      	str	r3, [r7, #8]
  return result;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <LL_GPIO_Init+0xac>
    return 32U;
 80038ba:	2320      	movs	r3, #32
 80038bc:	e003      	b.n	80038c6 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80038c6:	2b07      	cmp	r3, #7
 80038c8:	d807      	bhi.n	80038da <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	461a      	mov	r2, r3
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff21 	bl	800371a <LL_GPIO_SetAFPin_0_7>
 80038d8:	e006      	b.n	80038e8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	461a      	mov	r2, r3
 80038e0:	6a39      	ldr	r1, [r7, #32]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ff56 	bl	8003794 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6a39      	ldr	r1, [r7, #32]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fe43 	bl	800357c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1a0      	bne.n	800384c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	@ 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003918:	4b04      	ldr	r3, [pc, #16]	@ (800392c <LL_RCC_GetSysClkSource+0x18>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800

08003930 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003934:	4b04      	ldr	r3, [pc, #16]	@ (8003948 <LL_RCC_GetAHBPrescaler+0x18>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800

0800394c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <LL_RCC_GetAPB2Prescaler+0x18>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <LL_RCC_PLL_GetMainSource+0x18>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039a4:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <LL_RCC_PLL_GetN+0x18>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40023800 	.word	0x40023800

080039bc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <LL_RCC_PLL_GetP+0x18>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800

080039d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <LL_RCC_PLL_GetDivider+0x18>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800

080039f4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80039fc:	f000 f820 	bl	8003a40 <RCC_GetSystemClockFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f840 	bl	8003a90 <RCC_GetHCLKClockFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f84e 	bl	8003abc <RCC_GetPCLK1ClockFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f85a 	bl	8003ae4 <RCC_GetPCLK2ClockFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a4a:	f7ff ff63 	bl	8003914 <LL_RCC_GetSysClkSource>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00c      	beq.n	8003a6e <RCC_GetSystemClockFreq+0x2e>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d80f      	bhi.n	8003a78 <RCC_GetSystemClockFreq+0x38>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <RCC_GetSystemClockFreq+0x22>
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d003      	beq.n	8003a68 <RCC_GetSystemClockFreq+0x28>
 8003a60:	e00a      	b.n	8003a78 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <RCC_GetSystemClockFreq+0x48>)
 8003a64:	607b      	str	r3, [r7, #4]
      break;
 8003a66:	e00a      	b.n	8003a7e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <RCC_GetSystemClockFreq+0x4c>)
 8003a6a:	607b      	str	r3, [r7, #4]
      break;
 8003a6c:	e007      	b.n	8003a7e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003a6e:	2008      	movs	r0, #8
 8003a70:	f000 f84c 	bl	8003b0c <RCC_PLL_GetFreqDomain_SYS>
 8003a74:	6078      	str	r0, [r7, #4]
      break;
 8003a76:	e002      	b.n	8003a7e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <RCC_GetSystemClockFreq+0x48>)
 8003a7a:	607b      	str	r3, [r7, #4]
      break;
 8003a7c:	bf00      	nop
  }

  return frequency;
 8003a7e:	687b      	ldr	r3, [r7, #4]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003a98:	f7ff ff4a 	bl	8003930 <LL_RCC_GetAHBPrescaler>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <RCC_GetHCLKClockFreq+0x28>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	40d3      	lsrs	r3, r2
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08007348 	.word	0x08007348

08003abc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ac4:	f7ff ff42 	bl	800394c <LL_RCC_GetAPB1Prescaler>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	0a9b      	lsrs	r3, r3, #10
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	40d3      	lsrs	r3, r2
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	08007358 	.word	0x08007358

08003ae4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003aec:	f7ff ff3c 	bl	8003968 <LL_RCC_GetAPB2Prescaler>
 8003af0:	4603      	mov	r3, r0
 8003af2:	0b5b      	lsrs	r3, r3, #13
 8003af4:	4a04      	ldr	r2, [pc, #16]	@ (8003b08 <RCC_GetPCLK2ClockFreq+0x24>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	40d3      	lsrs	r3, r2
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08007358 	.word	0x08007358

08003b0c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003b20:	f7ff ff30 	bl	8003984 <LL_RCC_PLL_GetMainSource>
 8003b24:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b32:	d003      	beq.n	8003b3c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003b34:	e005      	b.n	8003b42 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003b36:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b38:	617b      	str	r3, [r7, #20]
      break;
 8003b3a:	e005      	b.n	8003b48 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003b3e:	617b      	str	r3, [r7, #20]
      break;
 8003b40:	e002      	b.n	8003b48 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b44:	617b      	str	r3, [r7, #20]
      break;
 8003b46:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d113      	bne.n	8003b76 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b4e:	f7ff ff43 	bl	80039d8 <LL_RCC_PLL_GetDivider>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fbb3 f4f2 	udiv	r4, r3, r2
 8003b5a:	f7ff ff21 	bl	80039a0 <LL_RCC_PLL_GetN>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	fb03 f404 	mul.w	r4, r3, r4
 8003b64:	f7ff ff2a 	bl	80039bc <LL_RCC_PLL_GetP>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b74:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003b76:	693b      	ldr	r3, [r7, #16]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd90      	pop	{r4, r7, pc}
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200

08003b88 <LL_SPI_IsEnabled>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d101      	bne.n	8003ba0 <LL_SPI_IsEnabled+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_SPI_IsEnabled+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_SPI_SetCRCPolynomial>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ffd3 	bl	8003b88 <LL_SPI_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d139      	bne.n	8003c5c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bf0:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	6811      	ldr	r1, [r2, #0]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	4311      	orrs	r1, r2
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	68d2      	ldr	r2, [r2, #12]
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	6912      	ldr	r2, [r2, #16]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6952      	ldr	r2, [r2, #20]
 8003c14:	4311      	orrs	r1, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6992      	ldr	r2, [r2, #24]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	69d2      	ldr	r2, [r2, #28]
 8003c20:	4311      	orrs	r1, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6a12      	ldr	r2, [r2, #32]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f023 0204 	bic.w	r2, r3, #4
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4a:	d105      	bne.n	8003c58 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffab 	bl	8003bae <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	61da      	str	r2, [r3, #28]
  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <LL_TIM_SetPrescaler>:
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_TIM_SetAutoReload>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_TIM_SetRepetitionCounter>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_TIM_OC_SetCompareCH1>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_TIM_OC_SetCompareCH2>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_TIM_OC_SetCompareCH3>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_TIM_OC_SetCompareCH4>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	615a      	str	r2, [r3, #20]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e60 <LL_TIM_Init+0x108>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <LL_TIM_Init+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d00f      	beq.n	8003d98 <LL_TIM_Init+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e64 <LL_TIM_Init+0x10c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <LL_TIM_Init+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a39      	ldr	r2, [pc, #228]	@ (8003e68 <LL_TIM_Init+0x110>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <LL_TIM_Init+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a38      	ldr	r2, [pc, #224]	@ (8003e6c <LL_TIM_Init+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <LL_TIM_Init+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a37      	ldr	r2, [pc, #220]	@ (8003e70 <LL_TIM_Init+0x118>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d106      	bne.n	8003da6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <LL_TIM_Init+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d027      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <LL_TIM_Init+0x10c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d023      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	@ (8003e68 <LL_TIM_Init+0x110>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <LL_TIM_Init+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01b      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a27      	ldr	r2, [pc, #156]	@ (8003e70 <LL_TIM_Init+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d017      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	@ (8003e74 <LL_TIM_Init+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a25      	ldr	r2, [pc, #148]	@ (8003e78 <LL_TIM_Init+0x120>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a24      	ldr	r2, [pc, #144]	@ (8003e7c <LL_TIM_Init+0x124>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <LL_TIM_Init+0x128>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	@ (8003e84 <LL_TIM_Init+0x12c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <LL_TIM_Init+0xae>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <LL_TIM_Init+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d106      	bne.n	8003e14 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff34 	bl	8003c8e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff20 	bl	8003c72 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <LL_TIM_Init+0x108>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <LL_TIM_Init+0xea>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <LL_TIM_Init+0x118>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d105      	bne.n	8003e4e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff2e 	bl	8003caa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff71 	bl	8003d36 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	40001800 	.word	0x40001800
 8003e84:	40001c00 	.word	0x40001c00
 8003e88:	40002000 	.word	0x40002000

08003e8c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	d027      	beq.n	8003ef4 <LL_TIM_OC_Init+0x68>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	d82a      	bhi.n	8003f02 <LL_TIM_OC_Init+0x76>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eb2:	d018      	beq.n	8003ee6 <LL_TIM_OC_Init+0x5a>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eba:	d822      	bhi.n	8003f02 <LL_TIM_OC_Init+0x76>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d003      	beq.n	8003eca <LL_TIM_OC_Init+0x3e>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d007      	beq.n	8003ed8 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ec8:	e01b      	b.n	8003f02 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f81f 	bl	8003f10 <OC1Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed6:	e015      	b.n	8003f04 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f884 	bl	8003fe8 <OC2Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e00e      	b.n	8003f04 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8ed 	bl	80040c8 <OC3Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef2:	e007      	b.n	8003f04 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f956 	bl	80041a8 <OC4Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e000      	b.n	8003f04 <LL_TIM_OC_Init+0x78>
      break;
 8003f02:	bf00      	nop
  }

  return result;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0201 	bic.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 0202 	bic.w	r2, r3, #2
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe0 <OC1Config+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <OC1Config+0x6a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe4 <OC1Config+0xd4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d11e      	bne.n	8003fb8 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0208 	bic.w	r2, r3, #8
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0204 	bic.w	r2, r3, #4
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fe7b 	bl	8003cc6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0210 	bic.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0220 	bic.w	r2, r3, #32
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <OC2Config+0xd8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <OC2Config+0x70>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a1c      	ldr	r2, [pc, #112]	@ (80040c4 <OC2Config+0xdc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d11f      	bne.n	8004098 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	019b      	lsls	r3, r3, #6
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	019b      	lsls	r3, r3, #6
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe19 	bl	8003ce2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40010400 	.word	0x40010400

080040c8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <OC3Config+0xd8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <OC3Config+0x6e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1c      	ldr	r2, [pc, #112]	@ (80041a4 <OC3Config+0xdc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d11f      	bne.n	8004176 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	029b      	lsls	r3, r3, #10
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	015b      	lsls	r3, r3, #5
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fdb8 	bl	8003cfe <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	031b      	lsls	r3, r3, #12
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	031b      	lsls	r3, r3, #12
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a11      	ldr	r2, [pc, #68]	@ (8004250 <OC4Config+0xa8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <OC4Config+0x70>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a10      	ldr	r2, [pc, #64]	@ (8004254 <OC4Config+0xac>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d107      	bne.n	8004228 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	019b      	lsls	r3, r3, #6
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff fd6d 	bl	8003d1a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40010000 	.word	0x40010000
 8004254:	40010400 	.word	0x40010400

08004258 <LL_USART_IsEnabled>:
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_USART_SetStopBitsLength>:
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_USART_SetHWFlowCtrl>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	615a      	str	r2, [r3, #20]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_USART_SetBaudRate>:
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b0c0      	sub	sp, #256	@ 0x100
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042d8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80042dc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80042e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ec:	f040 810c 	bne.w	8004508 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80042f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	1891      	adds	r1, r2, r2
 8004308:	6639      	str	r1, [r7, #96]	@ 0x60
 800430a:	415b      	adcs	r3, r3
 800430c:	667b      	str	r3, [r7, #100]	@ 0x64
 800430e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004312:	4621      	mov	r1, r4
 8004314:	eb12 0801 	adds.w	r8, r2, r1
 8004318:	4629      	mov	r1, r5
 800431a:	eb43 0901 	adc.w	r9, r3, r1
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800432a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800432e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004332:	4690      	mov	r8, r2
 8004334:	4699      	mov	r9, r3
 8004336:	4623      	mov	r3, r4
 8004338:	eb18 0303 	adds.w	r3, r8, r3
 800433c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004340:	462b      	mov	r3, r5
 8004342:	eb49 0303 	adc.w	r3, r9, r3
 8004346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800434a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800434e:	2200      	movs	r2, #0
 8004350:	469a      	mov	sl, r3
 8004352:	4693      	mov	fp, r2
 8004354:	eb1a 030a 	adds.w	r3, sl, sl
 8004358:	65bb      	str	r3, [r7, #88]	@ 0x58
 800435a:	eb4b 030b 	adc.w	r3, fp, fp
 800435e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004360:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004368:	f7fc fc1e 	bl	8000ba8 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4b64      	ldr	r3, [pc, #400]	@ (8004504 <LL_USART_SetBaudRate+0x238>)
 8004372:	fba3 2302 	umull	r2, r3, r3, r2
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	b29b      	uxth	r3, r3
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	b29c      	uxth	r4, r3
 800437e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004388:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800438c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	6539      	str	r1, [r7, #80]	@ 0x50
 8004398:	415b      	adcs	r3, r3
 800439a:	657b      	str	r3, [r7, #84]	@ 0x54
 800439c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d4:	464b      	mov	r3, r9
 80043d6:	460a      	mov	r2, r1
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043ea:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80043ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043f2:	460b      	mov	r3, r1
 80043f4:	18db      	adds	r3, r3, r3
 80043f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f8:	4613      	mov	r3, r2
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004400:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004404:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004408:	f7fc fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4611      	mov	r1, r2
 8004412:	4b3c      	ldr	r3, [pc, #240]	@ (8004504 <LL_USART_SetBaudRate+0x238>)
 8004414:	fba3 2301 	umull	r2, r3, r3, r1
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	2264      	movs	r2, #100	@ 0x64
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	1acb      	subs	r3, r1, r3
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004428:	4b36      	ldr	r3, [pc, #216]	@ (8004504 <LL_USART_SetBaudRate+0x238>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	b29b      	uxth	r3, r3
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	b29b      	uxth	r3, r3
 8004436:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800443a:	b29b      	uxth	r3, r3
 800443c:	4423      	add	r3, r4
 800443e:	b29c      	uxth	r4, r3
 8004440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800444a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800444e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	63b9      	str	r1, [r7, #56]	@ 0x38
 800445a:	415b      	adcs	r3, r3
 800445c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800445e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004462:	4641      	mov	r1, r8
 8004464:	1851      	adds	r1, r2, r1
 8004466:	6339      	str	r1, [r7, #48]	@ 0x30
 8004468:	4649      	mov	r1, r9
 800446a:	414b      	adcs	r3, r1
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800447a:	4659      	mov	r1, fp
 800447c:	00cb      	lsls	r3, r1, #3
 800447e:	4651      	mov	r1, sl
 8004480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004484:	4651      	mov	r1, sl
 8004486:	00ca      	lsls	r2, r1, #3
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	4603      	mov	r3, r0
 800448e:	4642      	mov	r2, r8
 8004490:	189b      	adds	r3, r3, r2
 8004492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004496:	464b      	mov	r3, r9
 8004498:	460a      	mov	r2, r1
 800449a:	eb42 0303 	adc.w	r3, r2, r3
 800449e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044ac:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80044b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044b4:	460b      	mov	r3, r1
 80044b6:	18db      	adds	r3, r3, r3
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ba:	4613      	mov	r3, r2
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80044ca:	f7fc fb6d 	bl	8000ba8 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <LL_USART_SetBaudRate+0x238>)
 80044d4:	fba3 1302 	umull	r1, r3, r3, r2
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	2164      	movs	r1, #100	@ 0x64
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3332      	adds	r3, #50	@ 0x32
 80044e6:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <LL_USART_SetBaudRate+0x238>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4423      	add	r3, r4
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004500:	609a      	str	r2, [r3, #8]
}
 8004502:	e108      	b.n	8004716 <LL_USART_SetBaudRate+0x44a>
 8004504:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004512:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004516:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800451a:	4642      	mov	r2, r8
 800451c:	464b      	mov	r3, r9
 800451e:	1891      	adds	r1, r2, r2
 8004520:	6239      	str	r1, [r7, #32]
 8004522:	415b      	adcs	r3, r3
 8004524:	627b      	str	r3, [r7, #36]	@ 0x24
 8004526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452a:	4641      	mov	r1, r8
 800452c:	1854      	adds	r4, r2, r1
 800452e:	4649      	mov	r1, r9
 8004530:	eb43 0501 	adc.w	r5, r3, r1
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	00eb      	lsls	r3, r5, #3
 800453e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004542:	00e2      	lsls	r2, r4, #3
 8004544:	4614      	mov	r4, r2
 8004546:	461d      	mov	r5, r3
 8004548:	4643      	mov	r3, r8
 800454a:	18e3      	adds	r3, r4, r3
 800454c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004550:	464b      	mov	r3, r9
 8004552:	eb45 0303 	adc.w	r3, r5, r3
 8004556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800455a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004564:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004574:	4629      	mov	r1, r5
 8004576:	008b      	lsls	r3, r1, #2
 8004578:	4621      	mov	r1, r4
 800457a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457e:	4621      	mov	r1, r4
 8004580:	008a      	lsls	r2, r1, #2
 8004582:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004586:	f7fc fb0f 	bl	8000ba8 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4b65      	ldr	r3, [pc, #404]	@ (8004724 <LL_USART_SetBaudRate+0x458>)
 8004590:	fba3 2302 	umull	r2, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	b29b      	uxth	r3, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	b29c      	uxth	r4, r3
 800459c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045aa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80045ae:	4642      	mov	r2, r8
 80045b0:	464b      	mov	r3, r9
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	61b9      	str	r1, [r7, #24]
 80045b6:	415b      	adcs	r3, r3
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045be:	4641      	mov	r1, r8
 80045c0:	1851      	adds	r1, r2, r1
 80045c2:	6139      	str	r1, [r7, #16]
 80045c4:	4649      	mov	r1, r9
 80045c6:	414b      	adcs	r3, r1
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d6:	4659      	mov	r1, fp
 80045d8:	00cb      	lsls	r3, r1, #3
 80045da:	4651      	mov	r1, sl
 80045dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e0:	4651      	mov	r1, sl
 80045e2:	00ca      	lsls	r2, r1, #3
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	4603      	mov	r3, r0
 80045ea:	4642      	mov	r2, r8
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045f2:	464b      	mov	r3, r9
 80045f4:	460a      	mov	r2, r1
 80045f6:	eb42 0303 	adc.w	r3, r2, r3
 80045fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004608:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800462a:	f7fc fabd 	bl	8000ba8 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4611      	mov	r1, r2
 8004634:	4b3b      	ldr	r3, [pc, #236]	@ (8004724 <LL_USART_SetBaudRate+0x458>)
 8004636:	fba3 2301 	umull	r2, r3, r3, r1
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	@ 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	@ 0x32
 8004648:	4a36      	ldr	r2, [pc, #216]	@ (8004724 <LL_USART_SetBaudRate+0x458>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	b29b      	uxth	r3, r3
 8004652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004656:	b29b      	uxth	r3, r3
 8004658:	4423      	add	r3, r4
 800465a:	b29c      	uxth	r4, r3
 800465c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004660:	2200      	movs	r2, #0
 8004662:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004664:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004666:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800466a:	4642      	mov	r2, r8
 800466c:	464b      	mov	r3, r9
 800466e:	1891      	adds	r1, r2, r2
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	415b      	adcs	r3, r3
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467a:	4641      	mov	r1, r8
 800467c:	1851      	adds	r1, r2, r1
 800467e:	6039      	str	r1, [r7, #0]
 8004680:	4649      	mov	r1, r9
 8004682:	414b      	adcs	r3, r1
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004692:	4659      	mov	r1, fp
 8004694:	00cb      	lsls	r3, r1, #3
 8004696:	4651      	mov	r1, sl
 8004698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469c:	4651      	mov	r1, sl
 800469e:	00ca      	lsls	r2, r1, #3
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	4603      	mov	r3, r0
 80046a6:	4642      	mov	r2, r8
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ac:	464b      	mov	r3, r9
 80046ae:	460a      	mov	r2, r1
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80046b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046ba:	2200      	movs	r2, #0
 80046bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80046cc:	4649      	mov	r1, r9
 80046ce:	008b      	lsls	r3, r1, #2
 80046d0:	4641      	mov	r1, r8
 80046d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d6:	4641      	mov	r1, r8
 80046d8:	008a      	lsls	r2, r1, #2
 80046da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80046de:	f7fc fa63 	bl	8000ba8 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <LL_USART_SetBaudRate+0x458>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	@ 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	@ 0x32
 80046fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <LL_USART_SetBaudRate+0x458>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	b29b      	uxth	r3, r3
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	b29b      	uxth	r3, r3
 800470a:	4423      	add	r3, r4
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004714:	609a      	str	r2, [r3, #8]
}
 8004716:	bf00      	nop
 8004718:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004736:	2300      	movs	r3, #0
 8004738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fd8c 	bl	8004258 <LL_USART_IsEnabled>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15e      	bne.n	8004804 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800474e:	f023 030c 	bic.w	r3, r3, #12
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	6851      	ldr	r1, [r2, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	68d2      	ldr	r2, [r2, #12]
 800475a:	4311      	orrs	r1, r2
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	6912      	ldr	r2, [r2, #16]
 8004760:	4311      	orrs	r1, r2
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	6992      	ldr	r2, [r2, #24]
 8004766:	430a      	orrs	r2, r1
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fd83 	bl	8004280 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fd90 	bl	80042a6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff f932 	bl	80039f4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <LL_USART_Init+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d102      	bne.n	800479e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e021      	b.n	80047e2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004814 <LL_USART_Init+0xec>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d102      	bne.n	80047ac <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e01a      	b.n	80047e2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004818 <LL_USART_Init+0xf0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d102      	bne.n	80047ba <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	e013      	b.n	80047e2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a17      	ldr	r2, [pc, #92]	@ (800481c <LL_USART_Init+0xf4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d102      	bne.n	80047c8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e00c      	b.n	80047e2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <LL_USART_Init+0xf8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d102      	bne.n	80047d6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	e005      	b.n	80047e2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <LL_USART_Init+0xfc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fd64 	bl	80042cc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004804:	7ffb      	ldrb	r3, [r7, #31]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40011000 	.word	0x40011000
 8004814:	40004400 	.word	0x40004400
 8004818:	40004800 	.word	0x40004800
 800481c:	40011400 	.word	0x40011400
 8004820:	40004c00 	.word	0x40004c00
 8004824:	40005000 	.word	0x40005000

08004828 <__cvt>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	ec57 6b10 	vmov	r6, r7, d0
 8004830:	2f00      	cmp	r7, #0
 8004832:	460c      	mov	r4, r1
 8004834:	4619      	mov	r1, r3
 8004836:	463b      	mov	r3, r7
 8004838:	bfbb      	ittet	lt
 800483a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800483e:	461f      	movlt	r7, r3
 8004840:	2300      	movge	r3, #0
 8004842:	232d      	movlt	r3, #45	@ 0x2d
 8004844:	700b      	strb	r3, [r1, #0]
 8004846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004848:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800484c:	4691      	mov	r9, r2
 800484e:	f023 0820 	bic.w	r8, r3, #32
 8004852:	bfbc      	itt	lt
 8004854:	4632      	movlt	r2, r6
 8004856:	4616      	movlt	r6, r2
 8004858:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800485c:	d005      	beq.n	800486a <__cvt+0x42>
 800485e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004862:	d100      	bne.n	8004866 <__cvt+0x3e>
 8004864:	3401      	adds	r4, #1
 8004866:	2102      	movs	r1, #2
 8004868:	e000      	b.n	800486c <__cvt+0x44>
 800486a:	2103      	movs	r1, #3
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	ab02      	add	r3, sp, #8
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	ec47 6b10 	vmov	d0, r6, r7
 8004878:	4653      	mov	r3, sl
 800487a:	4622      	mov	r2, r4
 800487c:	f000 ff3c 	bl	80056f8 <_dtoa_r>
 8004880:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004884:	4605      	mov	r5, r0
 8004886:	d119      	bne.n	80048bc <__cvt+0x94>
 8004888:	f019 0f01 	tst.w	r9, #1
 800488c:	d00e      	beq.n	80048ac <__cvt+0x84>
 800488e:	eb00 0904 	add.w	r9, r0, r4
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	4630      	mov	r0, r6
 8004898:	4639      	mov	r1, r7
 800489a:	f7fc f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800489e:	b108      	cbz	r0, 80048a4 <__cvt+0x7c>
 80048a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80048a4:	2230      	movs	r2, #48	@ 0x30
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	454b      	cmp	r3, r9
 80048aa:	d31e      	bcc.n	80048ea <__cvt+0xc2>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048b0:	1b5b      	subs	r3, r3, r5
 80048b2:	4628      	mov	r0, r5
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	b004      	add	sp, #16
 80048b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048c0:	eb00 0904 	add.w	r9, r0, r4
 80048c4:	d1e5      	bne.n	8004892 <__cvt+0x6a>
 80048c6:	7803      	ldrb	r3, [r0, #0]
 80048c8:	2b30      	cmp	r3, #48	@ 0x30
 80048ca:	d10a      	bne.n	80048e2 <__cvt+0xba>
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fc f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80048d8:	b918      	cbnz	r0, 80048e2 <__cvt+0xba>
 80048da:	f1c4 0401 	rsb	r4, r4, #1
 80048de:	f8ca 4000 	str.w	r4, [sl]
 80048e2:	f8da 3000 	ldr.w	r3, [sl]
 80048e6:	4499      	add	r9, r3
 80048e8:	e7d3      	b.n	8004892 <__cvt+0x6a>
 80048ea:	1c59      	adds	r1, r3, #1
 80048ec:	9103      	str	r1, [sp, #12]
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e7d9      	b.n	80048a6 <__cvt+0x7e>

080048f2 <__exponent>:
 80048f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f4:	2900      	cmp	r1, #0
 80048f6:	bfba      	itte	lt
 80048f8:	4249      	neglt	r1, r1
 80048fa:	232d      	movlt	r3, #45	@ 0x2d
 80048fc:	232b      	movge	r3, #43	@ 0x2b
 80048fe:	2909      	cmp	r1, #9
 8004900:	7002      	strb	r2, [r0, #0]
 8004902:	7043      	strb	r3, [r0, #1]
 8004904:	dd29      	ble.n	800495a <__exponent+0x68>
 8004906:	f10d 0307 	add.w	r3, sp, #7
 800490a:	461d      	mov	r5, r3
 800490c:	270a      	movs	r7, #10
 800490e:	461a      	mov	r2, r3
 8004910:	fbb1 f6f7 	udiv	r6, r1, r7
 8004914:	fb07 1416 	mls	r4, r7, r6, r1
 8004918:	3430      	adds	r4, #48	@ 0x30
 800491a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800491e:	460c      	mov	r4, r1
 8004920:	2c63      	cmp	r4, #99	@ 0x63
 8004922:	f103 33ff 	add.w	r3, r3, #4294967295
 8004926:	4631      	mov	r1, r6
 8004928:	dcf1      	bgt.n	800490e <__exponent+0x1c>
 800492a:	3130      	adds	r1, #48	@ 0x30
 800492c:	1e94      	subs	r4, r2, #2
 800492e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004932:	1c41      	adds	r1, r0, #1
 8004934:	4623      	mov	r3, r4
 8004936:	42ab      	cmp	r3, r5
 8004938:	d30a      	bcc.n	8004950 <__exponent+0x5e>
 800493a:	f10d 0309 	add.w	r3, sp, #9
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	42ac      	cmp	r4, r5
 8004942:	bf88      	it	hi
 8004944:	2300      	movhi	r3, #0
 8004946:	3302      	adds	r3, #2
 8004948:	4403      	add	r3, r0
 800494a:	1a18      	subs	r0, r3, r0
 800494c:	b003      	add	sp, #12
 800494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004950:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004954:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004958:	e7ed      	b.n	8004936 <__exponent+0x44>
 800495a:	2330      	movs	r3, #48	@ 0x30
 800495c:	3130      	adds	r1, #48	@ 0x30
 800495e:	7083      	strb	r3, [r0, #2]
 8004960:	70c1      	strb	r1, [r0, #3]
 8004962:	1d03      	adds	r3, r0, #4
 8004964:	e7f1      	b.n	800494a <__exponent+0x58>
	...

08004968 <_printf_float>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	b08d      	sub	sp, #52	@ 0x34
 800496e:	460c      	mov	r4, r1
 8004970:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004974:	4616      	mov	r6, r2
 8004976:	461f      	mov	r7, r3
 8004978:	4605      	mov	r5, r0
 800497a:	f000 fdbd 	bl	80054f8 <_localeconv_r>
 800497e:	6803      	ldr	r3, [r0, #0]
 8004980:	9304      	str	r3, [sp, #16]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fc74 	bl	8000270 <strlen>
 8004988:	2300      	movs	r3, #0
 800498a:	930a      	str	r3, [sp, #40]	@ 0x28
 800498c:	f8d8 3000 	ldr.w	r3, [r8]
 8004990:	9005      	str	r0, [sp, #20]
 8004992:	3307      	adds	r3, #7
 8004994:	f023 0307 	bic.w	r3, r3, #7
 8004998:	f103 0208 	add.w	r2, r3, #8
 800499c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049a0:	f8d4 b000 	ldr.w	fp, [r4]
 80049a4:	f8c8 2000 	str.w	r2, [r8]
 80049a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049b0:	9307      	str	r3, [sp, #28]
 80049b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80049b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049be:	4b9c      	ldr	r3, [pc, #624]	@ (8004c30 <_printf_float+0x2c8>)
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	f7fc f8b2 	bl	8000b2c <__aeabi_dcmpun>
 80049c8:	bb70      	cbnz	r0, 8004a28 <_printf_float+0xc0>
 80049ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ce:	4b98      	ldr	r3, [pc, #608]	@ (8004c30 <_printf_float+0x2c8>)
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	f7fc f88c 	bl	8000af0 <__aeabi_dcmple>
 80049d8:	bb30      	cbnz	r0, 8004a28 <_printf_float+0xc0>
 80049da:	2200      	movs	r2, #0
 80049dc:	2300      	movs	r3, #0
 80049de:	4640      	mov	r0, r8
 80049e0:	4649      	mov	r1, r9
 80049e2:	f7fc f87b 	bl	8000adc <__aeabi_dcmplt>
 80049e6:	b110      	cbz	r0, 80049ee <_printf_float+0x86>
 80049e8:	232d      	movs	r3, #45	@ 0x2d
 80049ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ee:	4a91      	ldr	r2, [pc, #580]	@ (8004c34 <_printf_float+0x2cc>)
 80049f0:	4b91      	ldr	r3, [pc, #580]	@ (8004c38 <_printf_float+0x2d0>)
 80049f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80049f6:	bf8c      	ite	hi
 80049f8:	4690      	movhi	r8, r2
 80049fa:	4698      	movls	r8, r3
 80049fc:	2303      	movs	r3, #3
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	f02b 0304 	bic.w	r3, fp, #4
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	f04f 0900 	mov.w	r9, #0
 8004a0a:	9700      	str	r7, [sp, #0]
 8004a0c:	4633      	mov	r3, r6
 8004a0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a10:	4621      	mov	r1, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	f000 f9d2 	bl	8004dbc <_printf_common>
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f040 808d 	bne.w	8004b38 <_printf_float+0x1d0>
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	b00d      	add	sp, #52	@ 0x34
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fc f87c 	bl	8000b2c <__aeabi_dcmpun>
 8004a34:	b140      	cbz	r0, 8004a48 <_printf_float+0xe0>
 8004a36:	464b      	mov	r3, r9
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfbc      	itt	lt
 8004a3c:	232d      	movlt	r3, #45	@ 0x2d
 8004a3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a42:	4a7e      	ldr	r2, [pc, #504]	@ (8004c3c <_printf_float+0x2d4>)
 8004a44:	4b7e      	ldr	r3, [pc, #504]	@ (8004c40 <_printf_float+0x2d8>)
 8004a46:	e7d4      	b.n	80049f2 <_printf_float+0x8a>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a4e:	9206      	str	r2, [sp, #24]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	d13b      	bne.n	8004acc <_printf_float+0x164>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6022      	str	r2, [r4, #0]
 8004a60:	9303      	str	r3, [sp, #12]
 8004a62:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004a68:	ab09      	add	r3, sp, #36	@ 0x24
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	6861      	ldr	r1, [r4, #4]
 8004a6e:	ec49 8b10 	vmov	d0, r8, r9
 8004a72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7ff fed6 	bl	8004828 <__cvt>
 8004a7c:	9b06      	ldr	r3, [sp, #24]
 8004a7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a80:	2b47      	cmp	r3, #71	@ 0x47
 8004a82:	4680      	mov	r8, r0
 8004a84:	d129      	bne.n	8004ada <_printf_float+0x172>
 8004a86:	1cc8      	adds	r0, r1, #3
 8004a88:	db02      	blt.n	8004a90 <_printf_float+0x128>
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	dd41      	ble.n	8004b14 <_printf_float+0x1ac>
 8004a90:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a94:	fa5f fa8a 	uxtb.w	sl, sl
 8004a98:	3901      	subs	r1, #1
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004aa0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004aa2:	f7ff ff26 	bl	80048f2 <__exponent>
 8004aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004aa8:	1813      	adds	r3, r2, r0
 8004aaa:	2a01      	cmp	r2, #1
 8004aac:	4681      	mov	r9, r0
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	dc02      	bgt.n	8004ab8 <_printf_float+0x150>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	07d2      	lsls	r2, r2, #31
 8004ab6:	d501      	bpl.n	8004abc <_printf_float+0x154>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0a2      	beq.n	8004a0a <_printf_float+0xa2>
 8004ac4:	232d      	movs	r3, #45	@ 0x2d
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aca:	e79e      	b.n	8004a0a <_printf_float+0xa2>
 8004acc:	9a06      	ldr	r2, [sp, #24]
 8004ace:	2a47      	cmp	r2, #71	@ 0x47
 8004ad0:	d1c2      	bne.n	8004a58 <_printf_float+0xf0>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1c0      	bne.n	8004a58 <_printf_float+0xf0>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e7bd      	b.n	8004a56 <_printf_float+0xee>
 8004ada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ade:	d9db      	bls.n	8004a98 <_printf_float+0x130>
 8004ae0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ae4:	d118      	bne.n	8004b18 <_printf_float+0x1b0>
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	dd0b      	ble.n	8004b04 <_printf_float+0x19c>
 8004aec:	6121      	str	r1, [r4, #16]
 8004aee:	b913      	cbnz	r3, 8004af6 <_printf_float+0x18e>
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	07d0      	lsls	r0, r2, #31
 8004af4:	d502      	bpl.n	8004afc <_printf_float+0x194>
 8004af6:	3301      	adds	r3, #1
 8004af8:	440b      	add	r3, r1
 8004afa:	6123      	str	r3, [r4, #16]
 8004afc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004afe:	f04f 0900 	mov.w	r9, #0
 8004b02:	e7db      	b.n	8004abc <_printf_float+0x154>
 8004b04:	b913      	cbnz	r3, 8004b0c <_printf_float+0x1a4>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	07d2      	lsls	r2, r2, #31
 8004b0a:	d501      	bpl.n	8004b10 <_printf_float+0x1a8>
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	e7f4      	b.n	8004afa <_printf_float+0x192>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e7f2      	b.n	8004afa <_printf_float+0x192>
 8004b14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	db05      	blt.n	8004b2a <_printf_float+0x1c2>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6121      	str	r1, [r4, #16]
 8004b22:	07d8      	lsls	r0, r3, #31
 8004b24:	d5ea      	bpl.n	8004afc <_printf_float+0x194>
 8004b26:	1c4b      	adds	r3, r1, #1
 8004b28:	e7e7      	b.n	8004afa <_printf_float+0x192>
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	bfd4      	ite	le
 8004b2e:	f1c1 0202 	rsble	r2, r1, #2
 8004b32:	2201      	movgt	r2, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	e7e0      	b.n	8004afa <_printf_float+0x192>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	055a      	lsls	r2, r3, #21
 8004b3c:	d407      	bmi.n	8004b4e <_printf_float+0x1e6>
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	4642      	mov	r2, r8
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d12b      	bne.n	8004ba4 <_printf_float+0x23c>
 8004b4c:	e767      	b.n	8004a1e <_printf_float+0xb6>
 8004b4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b52:	f240 80dd 	bls.w	8004d10 <_printf_float+0x3a8>
 8004b56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f7fb ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d033      	beq.n	8004bce <_printf_float+0x266>
 8004b66:	4a37      	ldr	r2, [pc, #220]	@ (8004c44 <_printf_float+0x2dc>)
 8004b68:	2301      	movs	r3, #1
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f af54 	beq.w	8004a1e <_printf_float+0xb6>
 8004b76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b7a:	4543      	cmp	r3, r8
 8004b7c:	db02      	blt.n	8004b84 <_printf_float+0x21c>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	07d8      	lsls	r0, r3, #31
 8004b82:	d50f      	bpl.n	8004ba4 <_printf_float+0x23c>
 8004b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f af45 	beq.w	8004a1e <_printf_float+0xb6>
 8004b94:	f04f 0900 	mov.w	r9, #0
 8004b98:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b9c:	f104 0a1a 	add.w	sl, r4, #26
 8004ba0:	45c8      	cmp	r8, r9
 8004ba2:	dc09      	bgt.n	8004bb8 <_printf_float+0x250>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	079b      	lsls	r3, r3, #30
 8004ba8:	f100 8103 	bmi.w	8004db2 <_printf_float+0x44a>
 8004bac:	68e0      	ldr	r0, [r4, #12]
 8004bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bb0:	4298      	cmp	r0, r3
 8004bb2:	bfb8      	it	lt
 8004bb4:	4618      	movlt	r0, r3
 8004bb6:	e734      	b.n	8004a22 <_printf_float+0xba>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4652      	mov	r2, sl
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f af2b 	beq.w	8004a1e <_printf_float+0xb6>
 8004bc8:	f109 0901 	add.w	r9, r9, #1
 8004bcc:	e7e8      	b.n	8004ba0 <_printf_float+0x238>
 8004bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dc39      	bgt.n	8004c48 <_printf_float+0x2e0>
 8004bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c44 <_printf_float+0x2dc>)
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f af1d 	beq.w	8004a1e <_printf_float+0xb6>
 8004be4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004be8:	ea59 0303 	orrs.w	r3, r9, r3
 8004bec:	d102      	bne.n	8004bf4 <_printf_float+0x28c>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	07d9      	lsls	r1, r3, #31
 8004bf2:	d5d7      	bpl.n	8004ba4 <_printf_float+0x23c>
 8004bf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f43f af0d 	beq.w	8004a1e <_printf_float+0xb6>
 8004c04:	f04f 0a00 	mov.w	sl, #0
 8004c08:	f104 0b1a 	add.w	fp, r4, #26
 8004c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c0e:	425b      	negs	r3, r3
 8004c10:	4553      	cmp	r3, sl
 8004c12:	dc01      	bgt.n	8004c18 <_printf_float+0x2b0>
 8004c14:	464b      	mov	r3, r9
 8004c16:	e793      	b.n	8004b40 <_printf_float+0x1d8>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	465a      	mov	r2, fp
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f aefb 	beq.w	8004a1e <_printf_float+0xb6>
 8004c28:	f10a 0a01 	add.w	sl, sl, #1
 8004c2c:	e7ee      	b.n	8004c0c <_printf_float+0x2a4>
 8004c2e:	bf00      	nop
 8004c30:	7fefffff 	.word	0x7fefffff
 8004c34:	08007373 	.word	0x08007373
 8004c38:	0800736f 	.word	0x0800736f
 8004c3c:	0800737b 	.word	0x0800737b
 8004c40:	08007377 	.word	0x08007377
 8004c44:	0800737f 	.word	0x0800737f
 8004c48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c4e:	4553      	cmp	r3, sl
 8004c50:	bfa8      	it	ge
 8004c52:	4653      	movge	r3, sl
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	4699      	mov	r9, r3
 8004c58:	dc36      	bgt.n	8004cc8 <_printf_float+0x360>
 8004c5a:	f04f 0b00 	mov.w	fp, #0
 8004c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c62:	f104 021a 	add.w	r2, r4, #26
 8004c66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c68:	9306      	str	r3, [sp, #24]
 8004c6a:	eba3 0309 	sub.w	r3, r3, r9
 8004c6e:	455b      	cmp	r3, fp
 8004c70:	dc31      	bgt.n	8004cd6 <_printf_float+0x36e>
 8004c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c74:	459a      	cmp	sl, r3
 8004c76:	dc3a      	bgt.n	8004cee <_printf_float+0x386>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	07da      	lsls	r2, r3, #31
 8004c7c:	d437      	bmi.n	8004cee <_printf_float+0x386>
 8004c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c80:	ebaa 0903 	sub.w	r9, sl, r3
 8004c84:	9b06      	ldr	r3, [sp, #24]
 8004c86:	ebaa 0303 	sub.w	r3, sl, r3
 8004c8a:	4599      	cmp	r9, r3
 8004c8c:	bfa8      	it	ge
 8004c8e:	4699      	movge	r9, r3
 8004c90:	f1b9 0f00 	cmp.w	r9, #0
 8004c94:	dc33      	bgt.n	8004cfe <_printf_float+0x396>
 8004c96:	f04f 0800 	mov.w	r8, #0
 8004c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c9e:	f104 0b1a 	add.w	fp, r4, #26
 8004ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ca8:	eba3 0309 	sub.w	r3, r3, r9
 8004cac:	4543      	cmp	r3, r8
 8004cae:	f77f af79 	ble.w	8004ba4 <_printf_float+0x23c>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	465a      	mov	r2, fp
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f aeae 	beq.w	8004a1e <_printf_float+0xb6>
 8004cc2:	f108 0801 	add.w	r8, r8, #1
 8004cc6:	e7ec      	b.n	8004ca2 <_printf_float+0x33a>
 8004cc8:	4642      	mov	r2, r8
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d1c2      	bne.n	8004c5a <_printf_float+0x2f2>
 8004cd4:	e6a3      	b.n	8004a1e <_printf_float+0xb6>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	9206      	str	r2, [sp, #24]
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f43f ae9c 	beq.w	8004a1e <_printf_float+0xb6>
 8004ce6:	9a06      	ldr	r2, [sp, #24]
 8004ce8:	f10b 0b01 	add.w	fp, fp, #1
 8004cec:	e7bb      	b.n	8004c66 <_printf_float+0x2fe>
 8004cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d1c0      	bne.n	8004c7e <_printf_float+0x316>
 8004cfc:	e68f      	b.n	8004a1e <_printf_float+0xb6>
 8004cfe:	9a06      	ldr	r2, [sp, #24]
 8004d00:	464b      	mov	r3, r9
 8004d02:	4442      	add	r2, r8
 8004d04:	4631      	mov	r1, r6
 8004d06:	4628      	mov	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d1c3      	bne.n	8004c96 <_printf_float+0x32e>
 8004d0e:	e686      	b.n	8004a1e <_printf_float+0xb6>
 8004d10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d14:	f1ba 0f01 	cmp.w	sl, #1
 8004d18:	dc01      	bgt.n	8004d1e <_printf_float+0x3b6>
 8004d1a:	07db      	lsls	r3, r3, #31
 8004d1c:	d536      	bpl.n	8004d8c <_printf_float+0x424>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4642      	mov	r2, r8
 8004d22:	4631      	mov	r1, r6
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b8      	blx	r7
 8004d28:	3001      	adds	r0, #1
 8004d2a:	f43f ae78 	beq.w	8004a1e <_printf_float+0xb6>
 8004d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f43f ae70 	beq.w	8004a1e <_printf_float+0xb6>
 8004d3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d42:	2200      	movs	r2, #0
 8004d44:	2300      	movs	r3, #0
 8004d46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d4a:	f7fb febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d4e:	b9c0      	cbnz	r0, 8004d82 <_printf_float+0x41a>
 8004d50:	4653      	mov	r3, sl
 8004d52:	f108 0201 	add.w	r2, r8, #1
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d10c      	bne.n	8004d7a <_printf_float+0x412>
 8004d60:	e65d      	b.n	8004a1e <_printf_float+0xb6>
 8004d62:	2301      	movs	r3, #1
 8004d64:	465a      	mov	r2, fp
 8004d66:	4631      	mov	r1, r6
 8004d68:	4628      	mov	r0, r5
 8004d6a:	47b8      	blx	r7
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	f43f ae56 	beq.w	8004a1e <_printf_float+0xb6>
 8004d72:	f108 0801 	add.w	r8, r8, #1
 8004d76:	45d0      	cmp	r8, sl
 8004d78:	dbf3      	blt.n	8004d62 <_printf_float+0x3fa>
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d80:	e6df      	b.n	8004b42 <_printf_float+0x1da>
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	f104 0b1a 	add.w	fp, r4, #26
 8004d8a:	e7f4      	b.n	8004d76 <_printf_float+0x40e>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4642      	mov	r2, r8
 8004d90:	e7e1      	b.n	8004d56 <_printf_float+0x3ee>
 8004d92:	2301      	movs	r3, #1
 8004d94:	464a      	mov	r2, r9
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f ae3e 	beq.w	8004a1e <_printf_float+0xb6>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004daa:	1a5b      	subs	r3, r3, r1
 8004dac:	4543      	cmp	r3, r8
 8004dae:	dcf0      	bgt.n	8004d92 <_printf_float+0x42a>
 8004db0:	e6fc      	b.n	8004bac <_printf_float+0x244>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 0919 	add.w	r9, r4, #25
 8004dba:	e7f4      	b.n	8004da6 <_printf_float+0x43e>

08004dbc <_printf_common>:
 8004dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	4698      	mov	r8, r3
 8004dc4:	688a      	ldr	r2, [r1, #8]
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bfb8      	it	lt
 8004dd0:	4613      	movlt	r3, r2
 8004dd2:	6033      	str	r3, [r6, #0]
 8004dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dd8:	4607      	mov	r7, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	b10a      	cbz	r2, 8004de2 <_printf_common+0x26>
 8004dde:	3301      	adds	r3, #1
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	0699      	lsls	r1, r3, #26
 8004de6:	bf42      	ittt	mi
 8004de8:	6833      	ldrmi	r3, [r6, #0]
 8004dea:	3302      	addmi	r3, #2
 8004dec:	6033      	strmi	r3, [r6, #0]
 8004dee:	6825      	ldr	r5, [r4, #0]
 8004df0:	f015 0506 	ands.w	r5, r5, #6
 8004df4:	d106      	bne.n	8004e04 <_printf_common+0x48>
 8004df6:	f104 0a19 	add.w	sl, r4, #25
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	6832      	ldr	r2, [r6, #0]
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	42ab      	cmp	r3, r5
 8004e02:	dc26      	bgt.n	8004e52 <_printf_common+0x96>
 8004e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	3b00      	subs	r3, #0
 8004e0c:	bf18      	it	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	0692      	lsls	r2, r2, #26
 8004e12:	d42b      	bmi.n	8004e6c <_printf_common+0xb0>
 8004e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e18:	4641      	mov	r1, r8
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	47c8      	blx	r9
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d01e      	beq.n	8004e60 <_printf_common+0xa4>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	6922      	ldr	r2, [r4, #16]
 8004e26:	f003 0306 	and.w	r3, r3, #6
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf02      	ittt	eq
 8004e2e:	68e5      	ldreq	r5, [r4, #12]
 8004e30:	6833      	ldreq	r3, [r6, #0]
 8004e32:	1aed      	subeq	r5, r5, r3
 8004e34:	68a3      	ldr	r3, [r4, #8]
 8004e36:	bf0c      	ite	eq
 8004e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e3c:	2500      	movne	r5, #0
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	bfc4      	itt	gt
 8004e42:	1a9b      	subgt	r3, r3, r2
 8004e44:	18ed      	addgt	r5, r5, r3
 8004e46:	2600      	movs	r6, #0
 8004e48:	341a      	adds	r4, #26
 8004e4a:	42b5      	cmp	r5, r6
 8004e4c:	d11a      	bne.n	8004e84 <_printf_common+0xc8>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	e008      	b.n	8004e64 <_printf_common+0xa8>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4652      	mov	r2, sl
 8004e56:	4641      	mov	r1, r8
 8004e58:	4638      	mov	r0, r7
 8004e5a:	47c8      	blx	r9
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d103      	bne.n	8004e68 <_printf_common+0xac>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	3501      	adds	r5, #1
 8004e6a:	e7c6      	b.n	8004dfa <_printf_common+0x3e>
 8004e6c:	18e1      	adds	r1, r4, r3
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	2030      	movs	r0, #48	@ 0x30
 8004e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e76:	4422      	add	r2, r4
 8004e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e80:	3302      	adds	r3, #2
 8004e82:	e7c7      	b.n	8004e14 <_printf_common+0x58>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4622      	mov	r2, r4
 8004e88:	4641      	mov	r1, r8
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	47c8      	blx	r9
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d0e6      	beq.n	8004e60 <_printf_common+0xa4>
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7d9      	b.n	8004e4a <_printf_common+0x8e>
	...

08004e98 <_printf_i>:
 8004e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	7e0f      	ldrb	r7, [r1, #24]
 8004e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ea0:	2f78      	cmp	r7, #120	@ 0x78
 8004ea2:	4691      	mov	r9, r2
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	469a      	mov	sl, r3
 8004eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eae:	d807      	bhi.n	8004ec0 <_printf_i+0x28>
 8004eb0:	2f62      	cmp	r7, #98	@ 0x62
 8004eb2:	d80a      	bhi.n	8004eca <_printf_i+0x32>
 8004eb4:	2f00      	cmp	r7, #0
 8004eb6:	f000 80d1 	beq.w	800505c <_printf_i+0x1c4>
 8004eba:	2f58      	cmp	r7, #88	@ 0x58
 8004ebc:	f000 80b8 	beq.w	8005030 <_printf_i+0x198>
 8004ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ec8:	e03a      	b.n	8004f40 <_printf_i+0xa8>
 8004eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ece:	2b15      	cmp	r3, #21
 8004ed0:	d8f6      	bhi.n	8004ec0 <_printf_i+0x28>
 8004ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ed8 <_printf_i+0x40>)
 8004ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f45 	.word	0x08004f45
 8004ee0:	08004ec1 	.word	0x08004ec1
 8004ee4:	08004ec1 	.word	0x08004ec1
 8004ee8:	08004ec1 	.word	0x08004ec1
 8004eec:	08004ec1 	.word	0x08004ec1
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004ec1 	.word	0x08004ec1
 8004ef8:	08004ec1 	.word	0x08004ec1
 8004efc:	08004ec1 	.word	0x08004ec1
 8004f00:	08004ec1 	.word	0x08004ec1
 8004f04:	08005043 	.word	0x08005043
 8004f08:	08004f6f 	.word	0x08004f6f
 8004f0c:	08004ffd 	.word	0x08004ffd
 8004f10:	08004ec1 	.word	0x08004ec1
 8004f14:	08004ec1 	.word	0x08004ec1
 8004f18:	08005065 	.word	0x08005065
 8004f1c:	08004ec1 	.word	0x08004ec1
 8004f20:	08004f6f 	.word	0x08004f6f
 8004f24:	08004ec1 	.word	0x08004ec1
 8004f28:	08004ec1 	.word	0x08004ec1
 8004f2c:	08005005 	.word	0x08005005
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6032      	str	r2, [r6, #0]
 8004f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f40:	2301      	movs	r3, #1
 8004f42:	e09c      	b.n	800507e <_printf_i+0x1e6>
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	1d19      	adds	r1, r3, #4
 8004f4a:	6031      	str	r1, [r6, #0]
 8004f4c:	0606      	lsls	r6, r0, #24
 8004f4e:	d501      	bpl.n	8004f54 <_printf_i+0xbc>
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	e003      	b.n	8004f5c <_printf_i+0xc4>
 8004f54:	0645      	lsls	r5, r0, #25
 8004f56:	d5fb      	bpl.n	8004f50 <_printf_i+0xb8>
 8004f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	da03      	bge.n	8004f68 <_printf_i+0xd0>
 8004f60:	232d      	movs	r3, #45	@ 0x2d
 8004f62:	426d      	negs	r5, r5
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f68:	4858      	ldr	r0, [pc, #352]	@ (80050cc <_printf_i+0x234>)
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	e011      	b.n	8004f92 <_printf_i+0xfa>
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	0608      	lsls	r0, r1, #24
 8004f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f78:	d402      	bmi.n	8004f80 <_printf_i+0xe8>
 8004f7a:	0649      	lsls	r1, r1, #25
 8004f7c:	bf48      	it	mi
 8004f7e:	b2ad      	uxthmi	r5, r5
 8004f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f82:	4852      	ldr	r0, [pc, #328]	@ (80050cc <_printf_i+0x234>)
 8004f84:	6033      	str	r3, [r6, #0]
 8004f86:	bf14      	ite	ne
 8004f88:	230a      	movne	r3, #10
 8004f8a:	2308      	moveq	r3, #8
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f92:	6866      	ldr	r6, [r4, #4]
 8004f94:	60a6      	str	r6, [r4, #8]
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	db05      	blt.n	8004fa6 <_printf_i+0x10e>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	432e      	orrs	r6, r5
 8004f9e:	f021 0104 	bic.w	r1, r1, #4
 8004fa2:	6021      	str	r1, [r4, #0]
 8004fa4:	d04b      	beq.n	800503e <_printf_i+0x1a6>
 8004fa6:	4616      	mov	r6, r2
 8004fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fac:	fb03 5711 	mls	r7, r3, r1, r5
 8004fb0:	5dc7      	ldrb	r7, [r0, r7]
 8004fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fb6:	462f      	mov	r7, r5
 8004fb8:	42bb      	cmp	r3, r7
 8004fba:	460d      	mov	r5, r1
 8004fbc:	d9f4      	bls.n	8004fa8 <_printf_i+0x110>
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d10b      	bne.n	8004fda <_printf_i+0x142>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	07df      	lsls	r7, r3, #31
 8004fc6:	d508      	bpl.n	8004fda <_printf_i+0x142>
 8004fc8:	6923      	ldr	r3, [r4, #16]
 8004fca:	6861      	ldr	r1, [r4, #4]
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	bfde      	ittt	le
 8004fd0:	2330      	movle	r3, #48	@ 0x30
 8004fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fda:	1b92      	subs	r2, r2, r6
 8004fdc:	6122      	str	r2, [r4, #16]
 8004fde:	f8cd a000 	str.w	sl, [sp]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	aa03      	add	r2, sp, #12
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4640      	mov	r0, r8
 8004fea:	f7ff fee7 	bl	8004dbc <_printf_common>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d14a      	bne.n	8005088 <_printf_i+0x1f0>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff6:	b004      	add	sp, #16
 8004ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	f043 0320 	orr.w	r3, r3, #32
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	4832      	ldr	r0, [pc, #200]	@ (80050d0 <_printf_i+0x238>)
 8005006:	2778      	movs	r7, #120	@ 0x78
 8005008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	6831      	ldr	r1, [r6, #0]
 8005010:	061f      	lsls	r7, r3, #24
 8005012:	f851 5b04 	ldr.w	r5, [r1], #4
 8005016:	d402      	bmi.n	800501e <_printf_i+0x186>
 8005018:	065f      	lsls	r7, r3, #25
 800501a:	bf48      	it	mi
 800501c:	b2ad      	uxthmi	r5, r5
 800501e:	6031      	str	r1, [r6, #0]
 8005020:	07d9      	lsls	r1, r3, #31
 8005022:	bf44      	itt	mi
 8005024:	f043 0320 	orrmi.w	r3, r3, #32
 8005028:	6023      	strmi	r3, [r4, #0]
 800502a:	b11d      	cbz	r5, 8005034 <_printf_i+0x19c>
 800502c:	2310      	movs	r3, #16
 800502e:	e7ad      	b.n	8004f8c <_printf_i+0xf4>
 8005030:	4826      	ldr	r0, [pc, #152]	@ (80050cc <_printf_i+0x234>)
 8005032:	e7e9      	b.n	8005008 <_printf_i+0x170>
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	f023 0320 	bic.w	r3, r3, #32
 800503a:	6023      	str	r3, [r4, #0]
 800503c:	e7f6      	b.n	800502c <_printf_i+0x194>
 800503e:	4616      	mov	r6, r2
 8005040:	e7bd      	b.n	8004fbe <_printf_i+0x126>
 8005042:	6833      	ldr	r3, [r6, #0]
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	6961      	ldr	r1, [r4, #20]
 8005048:	1d18      	adds	r0, r3, #4
 800504a:	6030      	str	r0, [r6, #0]
 800504c:	062e      	lsls	r6, r5, #24
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	d501      	bpl.n	8005056 <_printf_i+0x1be>
 8005052:	6019      	str	r1, [r3, #0]
 8005054:	e002      	b.n	800505c <_printf_i+0x1c4>
 8005056:	0668      	lsls	r0, r5, #25
 8005058:	d5fb      	bpl.n	8005052 <_printf_i+0x1ba>
 800505a:	8019      	strh	r1, [r3, #0]
 800505c:	2300      	movs	r3, #0
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	4616      	mov	r6, r2
 8005062:	e7bc      	b.n	8004fde <_printf_i+0x146>
 8005064:	6833      	ldr	r3, [r6, #0]
 8005066:	1d1a      	adds	r2, r3, #4
 8005068:	6032      	str	r2, [r6, #0]
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	6862      	ldr	r2, [r4, #4]
 800506e:	2100      	movs	r1, #0
 8005070:	4630      	mov	r0, r6
 8005072:	f7fb f8ad 	bl	80001d0 <memchr>
 8005076:	b108      	cbz	r0, 800507c <_printf_i+0x1e4>
 8005078:	1b80      	subs	r0, r0, r6
 800507a:	6060      	str	r0, [r4, #4]
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	6123      	str	r3, [r4, #16]
 8005080:	2300      	movs	r3, #0
 8005082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005086:	e7aa      	b.n	8004fde <_printf_i+0x146>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	4632      	mov	r2, r6
 800508c:	4649      	mov	r1, r9
 800508e:	4640      	mov	r0, r8
 8005090:	47d0      	blx	sl
 8005092:	3001      	adds	r0, #1
 8005094:	d0ad      	beq.n	8004ff2 <_printf_i+0x15a>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	079b      	lsls	r3, r3, #30
 800509a:	d413      	bmi.n	80050c4 <_printf_i+0x22c>
 800509c:	68e0      	ldr	r0, [r4, #12]
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	4298      	cmp	r0, r3
 80050a2:	bfb8      	it	lt
 80050a4:	4618      	movlt	r0, r3
 80050a6:	e7a6      	b.n	8004ff6 <_printf_i+0x15e>
 80050a8:	2301      	movs	r3, #1
 80050aa:	4632      	mov	r2, r6
 80050ac:	4649      	mov	r1, r9
 80050ae:	4640      	mov	r0, r8
 80050b0:	47d0      	blx	sl
 80050b2:	3001      	adds	r0, #1
 80050b4:	d09d      	beq.n	8004ff2 <_printf_i+0x15a>
 80050b6:	3501      	adds	r5, #1
 80050b8:	68e3      	ldr	r3, [r4, #12]
 80050ba:	9903      	ldr	r1, [sp, #12]
 80050bc:	1a5b      	subs	r3, r3, r1
 80050be:	42ab      	cmp	r3, r5
 80050c0:	dcf2      	bgt.n	80050a8 <_printf_i+0x210>
 80050c2:	e7eb      	b.n	800509c <_printf_i+0x204>
 80050c4:	2500      	movs	r5, #0
 80050c6:	f104 0619 	add.w	r6, r4, #25
 80050ca:	e7f5      	b.n	80050b8 <_printf_i+0x220>
 80050cc:	08007381 	.word	0x08007381
 80050d0:	08007392 	.word	0x08007392

080050d4 <std>:
 80050d4:	2300      	movs	r3, #0
 80050d6:	b510      	push	{r4, lr}
 80050d8:	4604      	mov	r4, r0
 80050da:	e9c0 3300 	strd	r3, r3, [r0]
 80050de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050e2:	6083      	str	r3, [r0, #8]
 80050e4:	8181      	strh	r1, [r0, #12]
 80050e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80050e8:	81c2      	strh	r2, [r0, #14]
 80050ea:	6183      	str	r3, [r0, #24]
 80050ec:	4619      	mov	r1, r3
 80050ee:	2208      	movs	r2, #8
 80050f0:	305c      	adds	r0, #92	@ 0x5c
 80050f2:	f000 f9f9 	bl	80054e8 <memset>
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <std+0x58>)
 80050f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80050fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <std+0x5c>)
 80050fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <std+0x60>)
 8005100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <std+0x64>)
 8005104:	6323      	str	r3, [r4, #48]	@ 0x30
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <std+0x68>)
 8005108:	6224      	str	r4, [r4, #32]
 800510a:	429c      	cmp	r4, r3
 800510c:	d006      	beq.n	800511c <std+0x48>
 800510e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005112:	4294      	cmp	r4, r2
 8005114:	d002      	beq.n	800511c <std+0x48>
 8005116:	33d0      	adds	r3, #208	@ 0xd0
 8005118:	429c      	cmp	r4, r3
 800511a:	d105      	bne.n	8005128 <std+0x54>
 800511c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	f000 ba5c 	b.w	80055e0 <__retarget_lock_init_recursive>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	08005339 	.word	0x08005339
 8005130:	0800535b 	.word	0x0800535b
 8005134:	08005393 	.word	0x08005393
 8005138:	080053b7 	.word	0x080053b7
 800513c:	200002b0 	.word	0x200002b0

08005140 <stdio_exit_handler>:
 8005140:	4a02      	ldr	r2, [pc, #8]	@ (800514c <stdio_exit_handler+0xc>)
 8005142:	4903      	ldr	r1, [pc, #12]	@ (8005150 <stdio_exit_handler+0x10>)
 8005144:	4803      	ldr	r0, [pc, #12]	@ (8005154 <stdio_exit_handler+0x14>)
 8005146:	f000 b869 	b.w	800521c <_fwalk_sglue>
 800514a:	bf00      	nop
 800514c:	2000000c 	.word	0x2000000c
 8005150:	08006f19 	.word	0x08006f19
 8005154:	2000001c 	.word	0x2000001c

08005158 <cleanup_stdio>:
 8005158:	6841      	ldr	r1, [r0, #4]
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <cleanup_stdio+0x34>)
 800515c:	4299      	cmp	r1, r3
 800515e:	b510      	push	{r4, lr}
 8005160:	4604      	mov	r4, r0
 8005162:	d001      	beq.n	8005168 <cleanup_stdio+0x10>
 8005164:	f001 fed8 	bl	8006f18 <_fflush_r>
 8005168:	68a1      	ldr	r1, [r4, #8]
 800516a:	4b09      	ldr	r3, [pc, #36]	@ (8005190 <cleanup_stdio+0x38>)
 800516c:	4299      	cmp	r1, r3
 800516e:	d002      	beq.n	8005176 <cleanup_stdio+0x1e>
 8005170:	4620      	mov	r0, r4
 8005172:	f001 fed1 	bl	8006f18 <_fflush_r>
 8005176:	68e1      	ldr	r1, [r4, #12]
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <cleanup_stdio+0x3c>)
 800517a:	4299      	cmp	r1, r3
 800517c:	d004      	beq.n	8005188 <cleanup_stdio+0x30>
 800517e:	4620      	mov	r0, r4
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	f001 bec8 	b.w	8006f18 <_fflush_r>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	bf00      	nop
 800518c:	200002b0 	.word	0x200002b0
 8005190:	20000318 	.word	0x20000318
 8005194:	20000380 	.word	0x20000380

08005198 <global_stdio_init.part.0>:
 8005198:	b510      	push	{r4, lr}
 800519a:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <global_stdio_init.part.0+0x30>)
 800519c:	4c0b      	ldr	r4, [pc, #44]	@ (80051cc <global_stdio_init.part.0+0x34>)
 800519e:	4a0c      	ldr	r2, [pc, #48]	@ (80051d0 <global_stdio_init.part.0+0x38>)
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	4620      	mov	r0, r4
 80051a4:	2200      	movs	r2, #0
 80051a6:	2104      	movs	r1, #4
 80051a8:	f7ff ff94 	bl	80050d4 <std>
 80051ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051b0:	2201      	movs	r2, #1
 80051b2:	2109      	movs	r1, #9
 80051b4:	f7ff ff8e 	bl	80050d4 <std>
 80051b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051bc:	2202      	movs	r2, #2
 80051be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c2:	2112      	movs	r1, #18
 80051c4:	f7ff bf86 	b.w	80050d4 <std>
 80051c8:	200003e8 	.word	0x200003e8
 80051cc:	200002b0 	.word	0x200002b0
 80051d0:	08005141 	.word	0x08005141

080051d4 <__sfp_lock_acquire>:
 80051d4:	4801      	ldr	r0, [pc, #4]	@ (80051dc <__sfp_lock_acquire+0x8>)
 80051d6:	f000 ba04 	b.w	80055e2 <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	200003f1 	.word	0x200003f1

080051e0 <__sfp_lock_release>:
 80051e0:	4801      	ldr	r0, [pc, #4]	@ (80051e8 <__sfp_lock_release+0x8>)
 80051e2:	f000 b9ff 	b.w	80055e4 <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	200003f1 	.word	0x200003f1

080051ec <__sinit>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4604      	mov	r4, r0
 80051f0:	f7ff fff0 	bl	80051d4 <__sfp_lock_acquire>
 80051f4:	6a23      	ldr	r3, [r4, #32]
 80051f6:	b11b      	cbz	r3, 8005200 <__sinit+0x14>
 80051f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051fc:	f7ff bff0 	b.w	80051e0 <__sfp_lock_release>
 8005200:	4b04      	ldr	r3, [pc, #16]	@ (8005214 <__sinit+0x28>)
 8005202:	6223      	str	r3, [r4, #32]
 8005204:	4b04      	ldr	r3, [pc, #16]	@ (8005218 <__sinit+0x2c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f5      	bne.n	80051f8 <__sinit+0xc>
 800520c:	f7ff ffc4 	bl	8005198 <global_stdio_init.part.0>
 8005210:	e7f2      	b.n	80051f8 <__sinit+0xc>
 8005212:	bf00      	nop
 8005214:	08005159 	.word	0x08005159
 8005218:	200003e8 	.word	0x200003e8

0800521c <_fwalk_sglue>:
 800521c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005220:	4607      	mov	r7, r0
 8005222:	4688      	mov	r8, r1
 8005224:	4614      	mov	r4, r2
 8005226:	2600      	movs	r6, #0
 8005228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800522c:	f1b9 0901 	subs.w	r9, r9, #1
 8005230:	d505      	bpl.n	800523e <_fwalk_sglue+0x22>
 8005232:	6824      	ldr	r4, [r4, #0]
 8005234:	2c00      	cmp	r4, #0
 8005236:	d1f7      	bne.n	8005228 <_fwalk_sglue+0xc>
 8005238:	4630      	mov	r0, r6
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d907      	bls.n	8005254 <_fwalk_sglue+0x38>
 8005244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005248:	3301      	adds	r3, #1
 800524a:	d003      	beq.n	8005254 <_fwalk_sglue+0x38>
 800524c:	4629      	mov	r1, r5
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	4306      	orrs	r6, r0
 8005254:	3568      	adds	r5, #104	@ 0x68
 8005256:	e7e9      	b.n	800522c <_fwalk_sglue+0x10>

08005258 <iprintf>:
 8005258:	b40f      	push	{r0, r1, r2, r3}
 800525a:	b507      	push	{r0, r1, r2, lr}
 800525c:	4906      	ldr	r1, [pc, #24]	@ (8005278 <iprintf+0x20>)
 800525e:	ab04      	add	r3, sp, #16
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	f853 2b04 	ldr.w	r2, [r3], #4
 8005266:	6881      	ldr	r1, [r0, #8]
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	f001 fcb9 	bl	8006be0 <_vfiprintf_r>
 800526e:	b003      	add	sp, #12
 8005270:	f85d eb04 	ldr.w	lr, [sp], #4
 8005274:	b004      	add	sp, #16
 8005276:	4770      	bx	lr
 8005278:	20000018 	.word	0x20000018

0800527c <_puts_r>:
 800527c:	6a03      	ldr	r3, [r0, #32]
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	6884      	ldr	r4, [r0, #8]
 8005282:	4605      	mov	r5, r0
 8005284:	460e      	mov	r6, r1
 8005286:	b90b      	cbnz	r3, 800528c <_puts_r+0x10>
 8005288:	f7ff ffb0 	bl	80051ec <__sinit>
 800528c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800528e:	07db      	lsls	r3, r3, #31
 8005290:	d405      	bmi.n	800529e <_puts_r+0x22>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	0598      	lsls	r0, r3, #22
 8005296:	d402      	bmi.n	800529e <_puts_r+0x22>
 8005298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800529a:	f000 f9a2 	bl	80055e2 <__retarget_lock_acquire_recursive>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	0719      	lsls	r1, r3, #28
 80052a2:	d502      	bpl.n	80052aa <_puts_r+0x2e>
 80052a4:	6923      	ldr	r3, [r4, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d135      	bne.n	8005316 <_puts_r+0x9a>
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f8c5 	bl	800543c <__swsetup_r>
 80052b2:	b380      	cbz	r0, 8005316 <_puts_r+0x9a>
 80052b4:	f04f 35ff 	mov.w	r5, #4294967295
 80052b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d405      	bmi.n	80052ca <_puts_r+0x4e>
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	059b      	lsls	r3, r3, #22
 80052c2:	d402      	bmi.n	80052ca <_puts_r+0x4e>
 80052c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052c6:	f000 f98d 	bl	80055e4 <__retarget_lock_release_recursive>
 80052ca:	4628      	mov	r0, r5
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da04      	bge.n	80052dc <_puts_r+0x60>
 80052d2:	69a2      	ldr	r2, [r4, #24]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	dc17      	bgt.n	8005308 <_puts_r+0x8c>
 80052d8:	290a      	cmp	r1, #10
 80052da:	d015      	beq.n	8005308 <_puts_r+0x8c>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	6022      	str	r2, [r4, #0]
 80052e2:	7019      	strb	r1, [r3, #0]
 80052e4:	68a3      	ldr	r3, [r4, #8]
 80052e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052ea:	3b01      	subs	r3, #1
 80052ec:	60a3      	str	r3, [r4, #8]
 80052ee:	2900      	cmp	r1, #0
 80052f0:	d1ed      	bne.n	80052ce <_puts_r+0x52>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da11      	bge.n	800531a <_puts_r+0x9e>
 80052f6:	4622      	mov	r2, r4
 80052f8:	210a      	movs	r1, #10
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 f85f 	bl	80053be <__swbuf_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d0d7      	beq.n	80052b4 <_puts_r+0x38>
 8005304:	250a      	movs	r5, #10
 8005306:	e7d7      	b.n	80052b8 <_puts_r+0x3c>
 8005308:	4622      	mov	r2, r4
 800530a:	4628      	mov	r0, r5
 800530c:	f000 f857 	bl	80053be <__swbuf_r>
 8005310:	3001      	adds	r0, #1
 8005312:	d1e7      	bne.n	80052e4 <_puts_r+0x68>
 8005314:	e7ce      	b.n	80052b4 <_puts_r+0x38>
 8005316:	3e01      	subs	r6, #1
 8005318:	e7e4      	b.n	80052e4 <_puts_r+0x68>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	220a      	movs	r2, #10
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e7ee      	b.n	8005304 <_puts_r+0x88>
	...

08005328 <puts>:
 8005328:	4b02      	ldr	r3, [pc, #8]	@ (8005334 <puts+0xc>)
 800532a:	4601      	mov	r1, r0
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	f7ff bfa5 	b.w	800527c <_puts_r>
 8005332:	bf00      	nop
 8005334:	20000018 	.word	0x20000018

08005338 <__sread>:
 8005338:	b510      	push	{r4, lr}
 800533a:	460c      	mov	r4, r1
 800533c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005340:	f000 f900 	bl	8005544 <_read_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	bfab      	itete	ge
 8005348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800534a:	89a3      	ldrhlt	r3, [r4, #12]
 800534c:	181b      	addge	r3, r3, r0
 800534e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005352:	bfac      	ite	ge
 8005354:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005356:	81a3      	strhlt	r3, [r4, #12]
 8005358:	bd10      	pop	{r4, pc}

0800535a <__swrite>:
 800535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535e:	461f      	mov	r7, r3
 8005360:	898b      	ldrh	r3, [r1, #12]
 8005362:	05db      	lsls	r3, r3, #23
 8005364:	4605      	mov	r5, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4616      	mov	r6, r2
 800536a:	d505      	bpl.n	8005378 <__swrite+0x1e>
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	2302      	movs	r3, #2
 8005372:	2200      	movs	r2, #0
 8005374:	f000 f8d4 	bl	8005520 <_lseek_r>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	4628      	mov	r0, r5
 800538a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	f000 b8eb 	b.w	8005568 <_write_r>

08005392 <__sseek>:
 8005392:	b510      	push	{r4, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 f8c1 	bl	8005520 <_lseek_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	bf15      	itete	ne
 80053a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ae:	81a3      	strheq	r3, [r4, #12]
 80053b0:	bf18      	it	ne
 80053b2:	81a3      	strhne	r3, [r4, #12]
 80053b4:	bd10      	pop	{r4, pc}

080053b6 <__sclose>:
 80053b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ba:	f000 b8a1 	b.w	8005500 <_close_r>

080053be <__swbuf_r>:
 80053be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c0:	460e      	mov	r6, r1
 80053c2:	4614      	mov	r4, r2
 80053c4:	4605      	mov	r5, r0
 80053c6:	b118      	cbz	r0, 80053d0 <__swbuf_r+0x12>
 80053c8:	6a03      	ldr	r3, [r0, #32]
 80053ca:	b90b      	cbnz	r3, 80053d0 <__swbuf_r+0x12>
 80053cc:	f7ff ff0e 	bl	80051ec <__sinit>
 80053d0:	69a3      	ldr	r3, [r4, #24]
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	071a      	lsls	r2, r3, #28
 80053d8:	d501      	bpl.n	80053de <__swbuf_r+0x20>
 80053da:	6923      	ldr	r3, [r4, #16]
 80053dc:	b943      	cbnz	r3, 80053f0 <__swbuf_r+0x32>
 80053de:	4621      	mov	r1, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f82b 	bl	800543c <__swsetup_r>
 80053e6:	b118      	cbz	r0, 80053f0 <__swbuf_r+0x32>
 80053e8:	f04f 37ff 	mov.w	r7, #4294967295
 80053ec:	4638      	mov	r0, r7
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	6922      	ldr	r2, [r4, #16]
 80053f4:	1a98      	subs	r0, r3, r2
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	b2f6      	uxtb	r6, r6
 80053fa:	4283      	cmp	r3, r0
 80053fc:	4637      	mov	r7, r6
 80053fe:	dc05      	bgt.n	800540c <__swbuf_r+0x4e>
 8005400:	4621      	mov	r1, r4
 8005402:	4628      	mov	r0, r5
 8005404:	f001 fd88 	bl	8006f18 <_fflush_r>
 8005408:	2800      	cmp	r0, #0
 800540a:	d1ed      	bne.n	80053e8 <__swbuf_r+0x2a>
 800540c:	68a3      	ldr	r3, [r4, #8]
 800540e:	3b01      	subs	r3, #1
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	701e      	strb	r6, [r3, #0]
 800541a:	6962      	ldr	r2, [r4, #20]
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	429a      	cmp	r2, r3
 8005420:	d004      	beq.n	800542c <__swbuf_r+0x6e>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	07db      	lsls	r3, r3, #31
 8005426:	d5e1      	bpl.n	80053ec <__swbuf_r+0x2e>
 8005428:	2e0a      	cmp	r6, #10
 800542a:	d1df      	bne.n	80053ec <__swbuf_r+0x2e>
 800542c:	4621      	mov	r1, r4
 800542e:	4628      	mov	r0, r5
 8005430:	f001 fd72 	bl	8006f18 <_fflush_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	d0d9      	beq.n	80053ec <__swbuf_r+0x2e>
 8005438:	e7d6      	b.n	80053e8 <__swbuf_r+0x2a>
	...

0800543c <__swsetup_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4b29      	ldr	r3, [pc, #164]	@ (80054e4 <__swsetup_r+0xa8>)
 8005440:	4605      	mov	r5, r0
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	460c      	mov	r4, r1
 8005446:	b118      	cbz	r0, 8005450 <__swsetup_r+0x14>
 8005448:	6a03      	ldr	r3, [r0, #32]
 800544a:	b90b      	cbnz	r3, 8005450 <__swsetup_r+0x14>
 800544c:	f7ff fece 	bl	80051ec <__sinit>
 8005450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005454:	0719      	lsls	r1, r3, #28
 8005456:	d422      	bmi.n	800549e <__swsetup_r+0x62>
 8005458:	06da      	lsls	r2, r3, #27
 800545a:	d407      	bmi.n	800546c <__swsetup_r+0x30>
 800545c:	2209      	movs	r2, #9
 800545e:	602a      	str	r2, [r5, #0]
 8005460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	e033      	b.n	80054d4 <__swsetup_r+0x98>
 800546c:	0758      	lsls	r0, r3, #29
 800546e:	d512      	bpl.n	8005496 <__swsetup_r+0x5a>
 8005470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005472:	b141      	cbz	r1, 8005486 <__swsetup_r+0x4a>
 8005474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005478:	4299      	cmp	r1, r3
 800547a:	d002      	beq.n	8005482 <__swsetup_r+0x46>
 800547c:	4628      	mov	r0, r5
 800547e:	f000 ff0b 	bl	8006298 <_free_r>
 8005482:	2300      	movs	r3, #0
 8005484:	6363      	str	r3, [r4, #52]	@ 0x34
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	2300      	movs	r3, #0
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	f043 0308 	orr.w	r3, r3, #8
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	6923      	ldr	r3, [r4, #16]
 80054a0:	b94b      	cbnz	r3, 80054b6 <__swsetup_r+0x7a>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ac:	d003      	beq.n	80054b6 <__swsetup_r+0x7a>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f001 fd7f 	bl	8006fb4 <__smakebuf_r>
 80054b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ba:	f013 0201 	ands.w	r2, r3, #1
 80054be:	d00a      	beq.n	80054d6 <__swsetup_r+0x9a>
 80054c0:	2200      	movs	r2, #0
 80054c2:	60a2      	str	r2, [r4, #8]
 80054c4:	6962      	ldr	r2, [r4, #20]
 80054c6:	4252      	negs	r2, r2
 80054c8:	61a2      	str	r2, [r4, #24]
 80054ca:	6922      	ldr	r2, [r4, #16]
 80054cc:	b942      	cbnz	r2, 80054e0 <__swsetup_r+0xa4>
 80054ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054d2:	d1c5      	bne.n	8005460 <__swsetup_r+0x24>
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
 80054d6:	0799      	lsls	r1, r3, #30
 80054d8:	bf58      	it	pl
 80054da:	6962      	ldrpl	r2, [r4, #20]
 80054dc:	60a2      	str	r2, [r4, #8]
 80054de:	e7f4      	b.n	80054ca <__swsetup_r+0x8e>
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7f7      	b.n	80054d4 <__swsetup_r+0x98>
 80054e4:	20000018 	.word	0x20000018

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <_localeconv_r>:
 80054f8:	4800      	ldr	r0, [pc, #0]	@ (80054fc <_localeconv_r+0x4>)
 80054fa:	4770      	bx	lr
 80054fc:	20000158 	.word	0x20000158

08005500 <_close_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d06      	ldr	r5, [pc, #24]	@ (800551c <_close_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fc fefe 	bl	800230c <_close>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_close_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_close_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200003ec 	.word	0x200003ec

08005520 <_lseek_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d07      	ldr	r5, [pc, #28]	@ (8005540 <_lseek_r+0x20>)
 8005524:	4604      	mov	r4, r0
 8005526:	4608      	mov	r0, r1
 8005528:	4611      	mov	r1, r2
 800552a:	2200      	movs	r2, #0
 800552c:	602a      	str	r2, [r5, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	f7fc ff13 	bl	800235a <_lseek>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_lseek_r+0x1e>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_lseek_r+0x1e>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	200003ec 	.word	0x200003ec

08005544 <_read_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	@ (8005564 <_read_r+0x20>)
 8005548:	4604      	mov	r4, r0
 800554a:	4608      	mov	r0, r1
 800554c:	4611      	mov	r1, r2
 800554e:	2200      	movs	r2, #0
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f7fc febd 	bl	80022d2 <_read>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_read_r+0x1e>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_read_r+0x1e>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	200003ec 	.word	0x200003ec

08005568 <_write_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d07      	ldr	r5, [pc, #28]	@ (8005588 <_write_r+0x20>)
 800556c:	4604      	mov	r4, r0
 800556e:	4608      	mov	r0, r1
 8005570:	4611      	mov	r1, r2
 8005572:	2200      	movs	r2, #0
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fc fb9e 	bl	8001cb8 <_write>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_write_r+0x1e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_write_r+0x1e>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	200003ec 	.word	0x200003ec

0800558c <__errno>:
 800558c:	4b01      	ldr	r3, [pc, #4]	@ (8005594 <__errno+0x8>)
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000018 	.word	0x20000018

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4d0d      	ldr	r5, [pc, #52]	@ (80055d0 <__libc_init_array+0x38>)
 800559c:	4c0d      	ldr	r4, [pc, #52]	@ (80055d4 <__libc_init_array+0x3c>)
 800559e:	1b64      	subs	r4, r4, r5
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	2600      	movs	r6, #0
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	4d0b      	ldr	r5, [pc, #44]	@ (80055d8 <__libc_init_array+0x40>)
 80055aa:	4c0c      	ldr	r4, [pc, #48]	@ (80055dc <__libc_init_array+0x44>)
 80055ac:	f001 fe2e 	bl	800720c <_init>
 80055b0:	1b64      	subs	r4, r4, r5
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	2600      	movs	r6, #0
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	080076ec 	.word	0x080076ec
 80055d4:	080076ec 	.word	0x080076ec
 80055d8:	080076ec 	.word	0x080076ec
 80055dc:	080076f0 	.word	0x080076f0

080055e0 <__retarget_lock_init_recursive>:
 80055e0:	4770      	bx	lr

080055e2 <__retarget_lock_acquire_recursive>:
 80055e2:	4770      	bx	lr

080055e4 <__retarget_lock_release_recursive>:
 80055e4:	4770      	bx	lr

080055e6 <quorem>:
 80055e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ea:	6903      	ldr	r3, [r0, #16]
 80055ec:	690c      	ldr	r4, [r1, #16]
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	4607      	mov	r7, r0
 80055f2:	db7e      	blt.n	80056f2 <quorem+0x10c>
 80055f4:	3c01      	subs	r4, #1
 80055f6:	f101 0814 	add.w	r8, r1, #20
 80055fa:	00a3      	lsls	r3, r4, #2
 80055fc:	f100 0514 	add.w	r5, r0, #20
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800560c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005610:	3301      	adds	r3, #1
 8005612:	429a      	cmp	r2, r3
 8005614:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005618:	fbb2 f6f3 	udiv	r6, r2, r3
 800561c:	d32e      	bcc.n	800567c <quorem+0x96>
 800561e:	f04f 0a00 	mov.w	sl, #0
 8005622:	46c4      	mov	ip, r8
 8005624:	46ae      	mov	lr, r5
 8005626:	46d3      	mov	fp, sl
 8005628:	f85c 3b04 	ldr.w	r3, [ip], #4
 800562c:	b298      	uxth	r0, r3
 800562e:	fb06 a000 	mla	r0, r6, r0, sl
 8005632:	0c02      	lsrs	r2, r0, #16
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	fb06 2303 	mla	r3, r6, r3, r2
 800563a:	f8de 2000 	ldr.w	r2, [lr]
 800563e:	b280      	uxth	r0, r0
 8005640:	b292      	uxth	r2, r2
 8005642:	1a12      	subs	r2, r2, r0
 8005644:	445a      	add	r2, fp
 8005646:	f8de 0000 	ldr.w	r0, [lr]
 800564a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800564e:	b29b      	uxth	r3, r3
 8005650:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005654:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005658:	b292      	uxth	r2, r2
 800565a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800565e:	45e1      	cmp	r9, ip
 8005660:	f84e 2b04 	str.w	r2, [lr], #4
 8005664:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005668:	d2de      	bcs.n	8005628 <quorem+0x42>
 800566a:	9b00      	ldr	r3, [sp, #0]
 800566c:	58eb      	ldr	r3, [r5, r3]
 800566e:	b92b      	cbnz	r3, 800567c <quorem+0x96>
 8005670:	9b01      	ldr	r3, [sp, #4]
 8005672:	3b04      	subs	r3, #4
 8005674:	429d      	cmp	r5, r3
 8005676:	461a      	mov	r2, r3
 8005678:	d32f      	bcc.n	80056da <quorem+0xf4>
 800567a:	613c      	str	r4, [r7, #16]
 800567c:	4638      	mov	r0, r7
 800567e:	f001 f97d 	bl	800697c <__mcmp>
 8005682:	2800      	cmp	r0, #0
 8005684:	db25      	blt.n	80056d2 <quorem+0xec>
 8005686:	4629      	mov	r1, r5
 8005688:	2000      	movs	r0, #0
 800568a:	f858 2b04 	ldr.w	r2, [r8], #4
 800568e:	f8d1 c000 	ldr.w	ip, [r1]
 8005692:	fa1f fe82 	uxth.w	lr, r2
 8005696:	fa1f f38c 	uxth.w	r3, ip
 800569a:	eba3 030e 	sub.w	r3, r3, lr
 800569e:	4403      	add	r3, r0
 80056a0:	0c12      	lsrs	r2, r2, #16
 80056a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b0:	45c1      	cmp	r9, r8
 80056b2:	f841 3b04 	str.w	r3, [r1], #4
 80056b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056ba:	d2e6      	bcs.n	800568a <quorem+0xa4>
 80056bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c4:	b922      	cbnz	r2, 80056d0 <quorem+0xea>
 80056c6:	3b04      	subs	r3, #4
 80056c8:	429d      	cmp	r5, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	d30b      	bcc.n	80056e6 <quorem+0x100>
 80056ce:	613c      	str	r4, [r7, #16]
 80056d0:	3601      	adds	r6, #1
 80056d2:	4630      	mov	r0, r6
 80056d4:	b003      	add	sp, #12
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	3b04      	subs	r3, #4
 80056de:	2a00      	cmp	r2, #0
 80056e0:	d1cb      	bne.n	800567a <quorem+0x94>
 80056e2:	3c01      	subs	r4, #1
 80056e4:	e7c6      	b.n	8005674 <quorem+0x8e>
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	3b04      	subs	r3, #4
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	d1ef      	bne.n	80056ce <quorem+0xe8>
 80056ee:	3c01      	subs	r4, #1
 80056f0:	e7ea      	b.n	80056c8 <quorem+0xe2>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e7ee      	b.n	80056d4 <quorem+0xee>
	...

080056f8 <_dtoa_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	69c7      	ldr	r7, [r0, #28]
 80056fe:	b097      	sub	sp, #92	@ 0x5c
 8005700:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005704:	ec55 4b10 	vmov	r4, r5, d0
 8005708:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800570a:	9107      	str	r1, [sp, #28]
 800570c:	4681      	mov	r9, r0
 800570e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005710:	9311      	str	r3, [sp, #68]	@ 0x44
 8005712:	b97f      	cbnz	r7, 8005734 <_dtoa_r+0x3c>
 8005714:	2010      	movs	r0, #16
 8005716:	f000 fe09 	bl	800632c <malloc>
 800571a:	4602      	mov	r2, r0
 800571c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005720:	b920      	cbnz	r0, 800572c <_dtoa_r+0x34>
 8005722:	4ba9      	ldr	r3, [pc, #676]	@ (80059c8 <_dtoa_r+0x2d0>)
 8005724:	21ef      	movs	r1, #239	@ 0xef
 8005726:	48a9      	ldr	r0, [pc, #676]	@ (80059cc <_dtoa_r+0x2d4>)
 8005728:	f001 fcc0 	bl	80070ac <__assert_func>
 800572c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005730:	6007      	str	r7, [r0, #0]
 8005732:	60c7      	str	r7, [r0, #12]
 8005734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	b159      	cbz	r1, 8005754 <_dtoa_r+0x5c>
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	604a      	str	r2, [r1, #4]
 8005740:	2301      	movs	r3, #1
 8005742:	4093      	lsls	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
 8005746:	4648      	mov	r0, r9
 8005748:	f000 fee6 	bl	8006518 <_Bfree>
 800574c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	1e2b      	subs	r3, r5, #0
 8005756:	bfb9      	ittee	lt
 8005758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800575c:	9305      	strlt	r3, [sp, #20]
 800575e:	2300      	movge	r3, #0
 8005760:	6033      	strge	r3, [r6, #0]
 8005762:	9f05      	ldr	r7, [sp, #20]
 8005764:	4b9a      	ldr	r3, [pc, #616]	@ (80059d0 <_dtoa_r+0x2d8>)
 8005766:	bfbc      	itt	lt
 8005768:	2201      	movlt	r2, #1
 800576a:	6032      	strlt	r2, [r6, #0]
 800576c:	43bb      	bics	r3, r7
 800576e:	d112      	bne.n	8005796 <_dtoa_r+0x9e>
 8005770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800577c:	4323      	orrs	r3, r4
 800577e:	f000 855a 	beq.w	8006236 <_dtoa_r+0xb3e>
 8005782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005784:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80059e4 <_dtoa_r+0x2ec>
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 855c 	beq.w	8006246 <_dtoa_r+0xb4e>
 800578e:	f10a 0303 	add.w	r3, sl, #3
 8005792:	f000 bd56 	b.w	8006242 <_dtoa_r+0xb4a>
 8005796:	ed9d 7b04 	vldr	d7, [sp, #16]
 800579a:	2200      	movs	r2, #0
 800579c:	ec51 0b17 	vmov	r0, r1, d7
 80057a0:	2300      	movs	r3, #0
 80057a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80057a6:	f7fb f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80057aa:	4680      	mov	r8, r0
 80057ac:	b158      	cbz	r0, 80057c6 <_dtoa_r+0xce>
 80057ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80057b0:	2301      	movs	r3, #1
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057b6:	b113      	cbz	r3, 80057be <_dtoa_r+0xc6>
 80057b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80057ba:	4b86      	ldr	r3, [pc, #536]	@ (80059d4 <_dtoa_r+0x2dc>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80059e8 <_dtoa_r+0x2f0>
 80057c2:	f000 bd40 	b.w	8006246 <_dtoa_r+0xb4e>
 80057c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80057ca:	aa14      	add	r2, sp, #80	@ 0x50
 80057cc:	a915      	add	r1, sp, #84	@ 0x54
 80057ce:	4648      	mov	r0, r9
 80057d0:	f001 f984 	bl	8006adc <__d2b>
 80057d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057d8:	9002      	str	r0, [sp, #8]
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d078      	beq.n	80058d0 <_dtoa_r+0x1d8>
 80057de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80057e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057f8:	4619      	mov	r1, r3
 80057fa:	2200      	movs	r2, #0
 80057fc:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <_dtoa_r+0x2e0>)
 80057fe:	f7fa fd43 	bl	8000288 <__aeabi_dsub>
 8005802:	a36b      	add	r3, pc, #428	@ (adr r3, 80059b0 <_dtoa_r+0x2b8>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fef6 	bl	80005f8 <__aeabi_dmul>
 800580c:	a36a      	add	r3, pc, #424	@ (adr r3, 80059b8 <_dtoa_r+0x2c0>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fd3b 	bl	800028c <__adddf3>
 8005816:	4604      	mov	r4, r0
 8005818:	4630      	mov	r0, r6
 800581a:	460d      	mov	r5, r1
 800581c:	f7fa fe82 	bl	8000524 <__aeabi_i2d>
 8005820:	a367      	add	r3, pc, #412	@ (adr r3, 80059c0 <_dtoa_r+0x2c8>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa fee7 	bl	80005f8 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fa fd2b 	bl	800028c <__adddf3>
 8005836:	4604      	mov	r4, r0
 8005838:	460d      	mov	r5, r1
 800583a:	f7fb f98d 	bl	8000b58 <__aeabi_d2iz>
 800583e:	2200      	movs	r2, #0
 8005840:	4607      	mov	r7, r0
 8005842:	2300      	movs	r3, #0
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fb f948 	bl	8000adc <__aeabi_dcmplt>
 800584c:	b140      	cbz	r0, 8005860 <_dtoa_r+0x168>
 800584e:	4638      	mov	r0, r7
 8005850:	f7fa fe68 	bl	8000524 <__aeabi_i2d>
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	f7fb f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800585c:	b900      	cbnz	r0, 8005860 <_dtoa_r+0x168>
 800585e:	3f01      	subs	r7, #1
 8005860:	2f16      	cmp	r7, #22
 8005862:	d852      	bhi.n	800590a <_dtoa_r+0x212>
 8005864:	4b5d      	ldr	r3, [pc, #372]	@ (80059dc <_dtoa_r+0x2e4>)
 8005866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005872:	f7fb f933 	bl	8000adc <__aeabi_dcmplt>
 8005876:	2800      	cmp	r0, #0
 8005878:	d049      	beq.n	800590e <_dtoa_r+0x216>
 800587a:	3f01      	subs	r7, #1
 800587c:	2300      	movs	r3, #0
 800587e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005882:	1b9b      	subs	r3, r3, r6
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	bf45      	ittet	mi
 8005888:	f1c3 0301 	rsbmi	r3, r3, #1
 800588c:	9300      	strmi	r3, [sp, #0]
 800588e:	2300      	movpl	r3, #0
 8005890:	2300      	movmi	r3, #0
 8005892:	9206      	str	r2, [sp, #24]
 8005894:	bf54      	ite	pl
 8005896:	9300      	strpl	r3, [sp, #0]
 8005898:	9306      	strmi	r3, [sp, #24]
 800589a:	2f00      	cmp	r7, #0
 800589c:	db39      	blt.n	8005912 <_dtoa_r+0x21a>
 800589e:	9b06      	ldr	r3, [sp, #24]
 80058a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80058a2:	443b      	add	r3, r7
 80058a4:	9306      	str	r3, [sp, #24]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9308      	str	r3, [sp, #32]
 80058aa:	9b07      	ldr	r3, [sp, #28]
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d863      	bhi.n	8005978 <_dtoa_r+0x280>
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	bfc4      	itt	gt
 80058b4:	3b04      	subgt	r3, #4
 80058b6:	9307      	strgt	r3, [sp, #28]
 80058b8:	9b07      	ldr	r3, [sp, #28]
 80058ba:	f1a3 0302 	sub.w	r3, r3, #2
 80058be:	bfcc      	ite	gt
 80058c0:	2400      	movgt	r4, #0
 80058c2:	2401      	movle	r4, #1
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d863      	bhi.n	8005990 <_dtoa_r+0x298>
 80058c8:	e8df f003 	tbb	[pc, r3]
 80058cc:	2b375452 	.word	0x2b375452
 80058d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058d4:	441e      	add	r6, r3
 80058d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058da:	2b20      	cmp	r3, #32
 80058dc:	bfc1      	itttt	gt
 80058de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058e2:	409f      	lslgt	r7, r3
 80058e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058ec:	bfd6      	itet	le
 80058ee:	f1c3 0320 	rsble	r3, r3, #32
 80058f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80058f6:	fa04 f003 	lslle.w	r0, r4, r3
 80058fa:	f7fa fe03 	bl	8000504 <__aeabi_ui2d>
 80058fe:	2201      	movs	r2, #1
 8005900:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005904:	3e01      	subs	r6, #1
 8005906:	9212      	str	r2, [sp, #72]	@ 0x48
 8005908:	e776      	b.n	80057f8 <_dtoa_r+0x100>
 800590a:	2301      	movs	r3, #1
 800590c:	e7b7      	b.n	800587e <_dtoa_r+0x186>
 800590e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005910:	e7b6      	b.n	8005880 <_dtoa_r+0x188>
 8005912:	9b00      	ldr	r3, [sp, #0]
 8005914:	1bdb      	subs	r3, r3, r7
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	427b      	negs	r3, r7
 800591a:	9308      	str	r3, [sp, #32]
 800591c:	2300      	movs	r3, #0
 800591e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005920:	e7c3      	b.n	80058aa <_dtoa_r+0x1b2>
 8005922:	2301      	movs	r3, #1
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005928:	eb07 0b03 	add.w	fp, r7, r3
 800592c:	f10b 0301 	add.w	r3, fp, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	bfb8      	it	lt
 8005936:	2301      	movlt	r3, #1
 8005938:	e006      	b.n	8005948 <_dtoa_r+0x250>
 800593a:	2301      	movs	r3, #1
 800593c:	9309      	str	r3, [sp, #36]	@ 0x24
 800593e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	dd28      	ble.n	8005996 <_dtoa_r+0x29e>
 8005944:	469b      	mov	fp, r3
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800594c:	2100      	movs	r1, #0
 800594e:	2204      	movs	r2, #4
 8005950:	f102 0514 	add.w	r5, r2, #20
 8005954:	429d      	cmp	r5, r3
 8005956:	d926      	bls.n	80059a6 <_dtoa_r+0x2ae>
 8005958:	6041      	str	r1, [r0, #4]
 800595a:	4648      	mov	r0, r9
 800595c:	f000 fd9c 	bl	8006498 <_Balloc>
 8005960:	4682      	mov	sl, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	d142      	bne.n	80059ec <_dtoa_r+0x2f4>
 8005966:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <_dtoa_r+0x2e8>)
 8005968:	4602      	mov	r2, r0
 800596a:	f240 11af 	movw	r1, #431	@ 0x1af
 800596e:	e6da      	b.n	8005726 <_dtoa_r+0x2e>
 8005970:	2300      	movs	r3, #0
 8005972:	e7e3      	b.n	800593c <_dtoa_r+0x244>
 8005974:	2300      	movs	r3, #0
 8005976:	e7d5      	b.n	8005924 <_dtoa_r+0x22c>
 8005978:	2401      	movs	r4, #1
 800597a:	2300      	movs	r3, #0
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005980:	f04f 3bff 	mov.w	fp, #4294967295
 8005984:	2200      	movs	r2, #0
 8005986:	f8cd b00c 	str.w	fp, [sp, #12]
 800598a:	2312      	movs	r3, #18
 800598c:	920c      	str	r2, [sp, #48]	@ 0x30
 800598e:	e7db      	b.n	8005948 <_dtoa_r+0x250>
 8005990:	2301      	movs	r3, #1
 8005992:	9309      	str	r3, [sp, #36]	@ 0x24
 8005994:	e7f4      	b.n	8005980 <_dtoa_r+0x288>
 8005996:	f04f 0b01 	mov.w	fp, #1
 800599a:	f8cd b00c 	str.w	fp, [sp, #12]
 800599e:	465b      	mov	r3, fp
 80059a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80059a4:	e7d0      	b.n	8005948 <_dtoa_r+0x250>
 80059a6:	3101      	adds	r1, #1
 80059a8:	0052      	lsls	r2, r2, #1
 80059aa:	e7d1      	b.n	8005950 <_dtoa_r+0x258>
 80059ac:	f3af 8000 	nop.w
 80059b0:	636f4361 	.word	0x636f4361
 80059b4:	3fd287a7 	.word	0x3fd287a7
 80059b8:	8b60c8b3 	.word	0x8b60c8b3
 80059bc:	3fc68a28 	.word	0x3fc68a28
 80059c0:	509f79fb 	.word	0x509f79fb
 80059c4:	3fd34413 	.word	0x3fd34413
 80059c8:	080073b0 	.word	0x080073b0
 80059cc:	080073c7 	.word	0x080073c7
 80059d0:	7ff00000 	.word	0x7ff00000
 80059d4:	08007380 	.word	0x08007380
 80059d8:	3ff80000 	.word	0x3ff80000
 80059dc:	08007518 	.word	0x08007518
 80059e0:	0800741f 	.word	0x0800741f
 80059e4:	080073ac 	.word	0x080073ac
 80059e8:	0800737f 	.word	0x0800737f
 80059ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059f0:	6018      	str	r0, [r3, #0]
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	2b0e      	cmp	r3, #14
 80059f6:	f200 80a1 	bhi.w	8005b3c <_dtoa_r+0x444>
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	f000 809e 	beq.w	8005b3c <_dtoa_r+0x444>
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	dd33      	ble.n	8005a6c <_dtoa_r+0x374>
 8005a04:	4b9c      	ldr	r3, [pc, #624]	@ (8005c78 <_dtoa_r+0x580>)
 8005a06:	f007 020f 	and.w	r2, r7, #15
 8005a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a0e:	ed93 7b00 	vldr	d7, [r3]
 8005a12:	05f8      	lsls	r0, r7, #23
 8005a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a1c:	d516      	bpl.n	8005a4c <_dtoa_r+0x354>
 8005a1e:	4b97      	ldr	r3, [pc, #604]	@ (8005c7c <_dtoa_r+0x584>)
 8005a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a28:	f7fa ff10 	bl	800084c <__aeabi_ddiv>
 8005a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a30:	f004 040f 	and.w	r4, r4, #15
 8005a34:	2603      	movs	r6, #3
 8005a36:	4d91      	ldr	r5, [pc, #580]	@ (8005c7c <_dtoa_r+0x584>)
 8005a38:	b954      	cbnz	r4, 8005a50 <_dtoa_r+0x358>
 8005a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a42:	f7fa ff03 	bl	800084c <__aeabi_ddiv>
 8005a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a4a:	e028      	b.n	8005a9e <_dtoa_r+0x3a6>
 8005a4c:	2602      	movs	r6, #2
 8005a4e:	e7f2      	b.n	8005a36 <_dtoa_r+0x33e>
 8005a50:	07e1      	lsls	r1, r4, #31
 8005a52:	d508      	bpl.n	8005a66 <_dtoa_r+0x36e>
 8005a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a5c:	f7fa fdcc 	bl	80005f8 <__aeabi_dmul>
 8005a60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a64:	3601      	adds	r6, #1
 8005a66:	1064      	asrs	r4, r4, #1
 8005a68:	3508      	adds	r5, #8
 8005a6a:	e7e5      	b.n	8005a38 <_dtoa_r+0x340>
 8005a6c:	f000 80af 	beq.w	8005bce <_dtoa_r+0x4d6>
 8005a70:	427c      	negs	r4, r7
 8005a72:	4b81      	ldr	r3, [pc, #516]	@ (8005c78 <_dtoa_r+0x580>)
 8005a74:	4d81      	ldr	r5, [pc, #516]	@ (8005c7c <_dtoa_r+0x584>)
 8005a76:	f004 020f 	and.w	r2, r4, #15
 8005a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a8e:	1124      	asrs	r4, r4, #4
 8005a90:	2300      	movs	r3, #0
 8005a92:	2602      	movs	r6, #2
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	f040 808f 	bne.w	8005bb8 <_dtoa_r+0x4c0>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1d3      	bne.n	8005a46 <_dtoa_r+0x34e>
 8005a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005aa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8094 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005aaa:	4b75      	ldr	r3, [pc, #468]	@ (8005c80 <_dtoa_r+0x588>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fb f813 	bl	8000adc <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f000 808b 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8087 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005ac4:	f1bb 0f00 	cmp.w	fp, #0
 8005ac8:	dd34      	ble.n	8005b34 <_dtoa_r+0x43c>
 8005aca:	4620      	mov	r0, r4
 8005acc:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <_dtoa_r+0x58c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	f7fa fd91 	bl	80005f8 <__aeabi_dmul>
 8005ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ada:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ade:	3601      	adds	r6, #1
 8005ae0:	465c      	mov	r4, fp
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7fa fd1e 	bl	8000524 <__aeabi_i2d>
 8005ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	4b65      	ldr	r3, [pc, #404]	@ (8005c88 <_dtoa_r+0x590>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fbca 	bl	800028c <__adddf3>
 8005af8:	4605      	mov	r5, r0
 8005afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	d16a      	bne.n	8005bd8 <_dtoa_r+0x4e0>
 8005b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b06:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <_dtoa_r+0x594>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f7fa fbbd 	bl	8000288 <__aeabi_dsub>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b16:	462a      	mov	r2, r5
 8005b18:	4633      	mov	r3, r6
 8005b1a:	f7fa fffd 	bl	8000b18 <__aeabi_dcmpgt>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f040 8298 	bne.w	8006054 <_dtoa_r+0x95c>
 8005b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b2e:	f7fa ffd5 	bl	8000adc <__aeabi_dcmplt>
 8005b32:	bb38      	cbnz	r0, 8005b84 <_dtoa_r+0x48c>
 8005b34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005b38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f2c0 8157 	blt.w	8005df2 <_dtoa_r+0x6fa>
 8005b44:	2f0e      	cmp	r7, #14
 8005b46:	f300 8154 	bgt.w	8005df2 <_dtoa_r+0x6fa>
 8005b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <_dtoa_r+0x580>)
 8005b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b50:	ed93 7b00 	vldr	d7, [r3]
 8005b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	ed8d 7b00 	vstr	d7, [sp]
 8005b5c:	f280 80e5 	bge.w	8005d2a <_dtoa_r+0x632>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f300 80e1 	bgt.w	8005d2a <_dtoa_r+0x632>
 8005b68:	d10c      	bne.n	8005b84 <_dtoa_r+0x48c>
 8005b6a:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <_dtoa_r+0x594>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	ec51 0b17 	vmov	r0, r1, d7
 8005b72:	f7fa fd41 	bl	80005f8 <__aeabi_dmul>
 8005b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7a:	f7fa ffc3 	bl	8000b04 <__aeabi_dcmpge>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f000 8266 	beq.w	8006050 <_dtoa_r+0x958>
 8005b84:	2400      	movs	r4, #0
 8005b86:	4625      	mov	r5, r4
 8005b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b8a:	4656      	mov	r6, sl
 8005b8c:	ea6f 0803 	mvn.w	r8, r3
 8005b90:	2700      	movs	r7, #0
 8005b92:	4621      	mov	r1, r4
 8005b94:	4648      	mov	r0, r9
 8005b96:	f000 fcbf 	bl	8006518 <_Bfree>
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	f000 80bd 	beq.w	8005d1a <_dtoa_r+0x622>
 8005ba0:	b12f      	cbz	r7, 8005bae <_dtoa_r+0x4b6>
 8005ba2:	42af      	cmp	r7, r5
 8005ba4:	d003      	beq.n	8005bae <_dtoa_r+0x4b6>
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4648      	mov	r0, r9
 8005baa:	f000 fcb5 	bl	8006518 <_Bfree>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	f000 fcb1 	bl	8006518 <_Bfree>
 8005bb6:	e0b0      	b.n	8005d1a <_dtoa_r+0x622>
 8005bb8:	07e2      	lsls	r2, r4, #31
 8005bba:	d505      	bpl.n	8005bc8 <_dtoa_r+0x4d0>
 8005bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	1064      	asrs	r4, r4, #1
 8005bca:	3508      	adds	r5, #8
 8005bcc:	e762      	b.n	8005a94 <_dtoa_r+0x39c>
 8005bce:	2602      	movs	r6, #2
 8005bd0:	e765      	b.n	8005a9e <_dtoa_r+0x3a6>
 8005bd2:	9c03      	ldr	r4, [sp, #12]
 8005bd4:	46b8      	mov	r8, r7
 8005bd6:	e784      	b.n	8005ae2 <_dtoa_r+0x3ea>
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <_dtoa_r+0x580>)
 8005bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005be4:	4454      	add	r4, sl
 8005be6:	2900      	cmp	r1, #0
 8005be8:	d054      	beq.n	8005c94 <_dtoa_r+0x59c>
 8005bea:	4929      	ldr	r1, [pc, #164]	@ (8005c90 <_dtoa_r+0x598>)
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7fa fe2d 	bl	800084c <__aeabi_ddiv>
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	f7fa fb47 	bl	8000288 <__aeabi_dsub>
 8005bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bfe:	4656      	mov	r6, sl
 8005c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c04:	f7fa ffa8 	bl	8000b58 <__aeabi_d2iz>
 8005c08:	4605      	mov	r5, r0
 8005c0a:	f7fa fc8b 	bl	8000524 <__aeabi_i2d>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c16:	f7fa fb37 	bl	8000288 <__aeabi_dsub>
 8005c1a:	3530      	adds	r5, #48	@ 0x30
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c24:	f806 5b01 	strb.w	r5, [r6], #1
 8005c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c2c:	f7fa ff56 	bl	8000adc <__aeabi_dcmplt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d172      	bne.n	8005d1a <_dtoa_r+0x622>
 8005c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c38:	4911      	ldr	r1, [pc, #68]	@ (8005c80 <_dtoa_r+0x588>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fa fb24 	bl	8000288 <__aeabi_dsub>
 8005c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c44:	f7fa ff4a 	bl	8000adc <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f040 80b4 	bne.w	8005db6 <_dtoa_r+0x6be>
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	f43f af70 	beq.w	8005b34 <_dtoa_r+0x43c>
 8005c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c58:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <_dtoa_r+0x58c>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f7fa fccc 	bl	80005f8 <__aeabi_dmul>
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <_dtoa_r+0x58c>)
 8005c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c66:	2200      	movs	r2, #0
 8005c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c6c:	f7fa fcc4 	bl	80005f8 <__aeabi_dmul>
 8005c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c74:	e7c4      	b.n	8005c00 <_dtoa_r+0x508>
 8005c76:	bf00      	nop
 8005c78:	08007518 	.word	0x08007518
 8005c7c:	080074f0 	.word	0x080074f0
 8005c80:	3ff00000 	.word	0x3ff00000
 8005c84:	40240000 	.word	0x40240000
 8005c88:	401c0000 	.word	0x401c0000
 8005c8c:	40140000 	.word	0x40140000
 8005c90:	3fe00000 	.word	0x3fe00000
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fa fcae 	bl	80005f8 <__aeabi_dmul>
 8005c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005ca0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca8:	f7fa ff56 	bl	8000b58 <__aeabi_d2iz>
 8005cac:	4605      	mov	r5, r0
 8005cae:	f7fa fc39 	bl	8000524 <__aeabi_i2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cba:	f7fa fae5 	bl	8000288 <__aeabi_dsub>
 8005cbe:	3530      	adds	r5, #48	@ 0x30
 8005cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	d124      	bne.n	8005d1e <_dtoa_r+0x626>
 8005cd4:	4baf      	ldr	r3, [pc, #700]	@ (8005f94 <_dtoa_r+0x89c>)
 8005cd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce6:	f7fa ff17 	bl	8000b18 <__aeabi_dcmpgt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d163      	bne.n	8005db6 <_dtoa_r+0x6be>
 8005cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005cf2:	49a8      	ldr	r1, [pc, #672]	@ (8005f94 <_dtoa_r+0x89c>)
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f7fa fac7 	bl	8000288 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d02:	f7fa feeb 	bl	8000adc <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f43f af14 	beq.w	8005b34 <_dtoa_r+0x43c>
 8005d0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d0e:	1e73      	subs	r3, r6, #1
 8005d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d16:	2b30      	cmp	r3, #48	@ 0x30
 8005d18:	d0f8      	beq.n	8005d0c <_dtoa_r+0x614>
 8005d1a:	4647      	mov	r7, r8
 8005d1c:	e03b      	b.n	8005d96 <_dtoa_r+0x69e>
 8005d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005f98 <_dtoa_r+0x8a0>)
 8005d20:	f7fa fc6a 	bl	80005f8 <__aeabi_dmul>
 8005d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d28:	e7bc      	b.n	8005ca4 <_dtoa_r+0x5ac>
 8005d2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005d2e:	4656      	mov	r6, sl
 8005d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fd88 	bl	800084c <__aeabi_ddiv>
 8005d3c:	f7fa ff0c 	bl	8000b58 <__aeabi_d2iz>
 8005d40:	4680      	mov	r8, r0
 8005d42:	f7fa fbef 	bl	8000524 <__aeabi_i2d>
 8005d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d4a:	f7fa fc55 	bl	80005f8 <__aeabi_dmul>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d5a:	f7fa fa95 	bl	8000288 <__aeabi_dsub>
 8005d5e:	f806 4b01 	strb.w	r4, [r6], #1
 8005d62:	9d03      	ldr	r5, [sp, #12]
 8005d64:	eba6 040a 	sub.w	r4, r6, sl
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	d133      	bne.n	8005dd8 <_dtoa_r+0x6e0>
 8005d70:	f7fa fa8c 	bl	800028c <__adddf3>
 8005d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	f7fa fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8005d80:	b9c0      	cbnz	r0, 8005db4 <_dtoa_r+0x6bc>
 8005d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d8e:	b110      	cbz	r0, 8005d96 <_dtoa_r+0x69e>
 8005d90:	f018 0f01 	tst.w	r8, #1
 8005d94:	d10e      	bne.n	8005db4 <_dtoa_r+0x6bc>
 8005d96:	9902      	ldr	r1, [sp, #8]
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fbbd 	bl	8006518 <_Bfree>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	7033      	strb	r3, [r6, #0]
 8005da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005da4:	3701      	adds	r7, #1
 8005da6:	601f      	str	r7, [r3, #0]
 8005da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 824b 	beq.w	8006246 <_dtoa_r+0xb4e>
 8005db0:	601e      	str	r6, [r3, #0]
 8005db2:	e248      	b.n	8006246 <_dtoa_r+0xb4e>
 8005db4:	46b8      	mov	r8, r7
 8005db6:	4633      	mov	r3, r6
 8005db8:	461e      	mov	r6, r3
 8005dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dbe:	2a39      	cmp	r2, #57	@ 0x39
 8005dc0:	d106      	bne.n	8005dd0 <_dtoa_r+0x6d8>
 8005dc2:	459a      	cmp	sl, r3
 8005dc4:	d1f8      	bne.n	8005db8 <_dtoa_r+0x6c0>
 8005dc6:	2230      	movs	r2, #48	@ 0x30
 8005dc8:	f108 0801 	add.w	r8, r8, #1
 8005dcc:	f88a 2000 	strb.w	r2, [sl]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e7a0      	b.n	8005d1a <_dtoa_r+0x622>
 8005dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f98 <_dtoa_r+0x8a0>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fa fc0c 	bl	80005f8 <__aeabi_dmul>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	f7fa fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d09f      	beq.n	8005d30 <_dtoa_r+0x638>
 8005df0:	e7d1      	b.n	8005d96 <_dtoa_r+0x69e>
 8005df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	f000 80ea 	beq.w	8005fce <_dtoa_r+0x8d6>
 8005dfa:	9a07      	ldr	r2, [sp, #28]
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	f300 80cd 	bgt.w	8005f9c <_dtoa_r+0x8a4>
 8005e02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	f000 80c1 	beq.w	8005f8c <_dtoa_r+0x894>
 8005e0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e0e:	9c08      	ldr	r4, [sp, #32]
 8005e10:	9e00      	ldr	r6, [sp, #0]
 8005e12:	9a00      	ldr	r2, [sp, #0]
 8005e14:	441a      	add	r2, r3
 8005e16:	9200      	str	r2, [sp, #0]
 8005e18:	9a06      	ldr	r2, [sp, #24]
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	4648      	mov	r0, r9
 8005e20:	9206      	str	r2, [sp, #24]
 8005e22:	f000 fc2d 	bl	8006680 <__i2b>
 8005e26:	4605      	mov	r5, r0
 8005e28:	b166      	cbz	r6, 8005e44 <_dtoa_r+0x74c>
 8005e2a:	9b06      	ldr	r3, [sp, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dd09      	ble.n	8005e44 <_dtoa_r+0x74c>
 8005e30:	42b3      	cmp	r3, r6
 8005e32:	9a00      	ldr	r2, [sp, #0]
 8005e34:	bfa8      	it	ge
 8005e36:	4633      	movge	r3, r6
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	9200      	str	r2, [sp, #0]
 8005e3c:	9a06      	ldr	r2, [sp, #24]
 8005e3e:	1af6      	subs	r6, r6, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	b30b      	cbz	r3, 8005e8c <_dtoa_r+0x794>
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80c6 	beq.w	8005fdc <_dtoa_r+0x8e4>
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	f000 80c0 	beq.w	8005fd6 <_dtoa_r+0x8de>
 8005e56:	4629      	mov	r1, r5
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4648      	mov	r0, r9
 8005e5c:	f000 fcc8 	bl	80067f0 <__pow5mult>
 8005e60:	9a02      	ldr	r2, [sp, #8]
 8005e62:	4601      	mov	r1, r0
 8005e64:	4605      	mov	r5, r0
 8005e66:	4648      	mov	r0, r9
 8005e68:	f000 fc20 	bl	80066ac <__multiply>
 8005e6c:	9902      	ldr	r1, [sp, #8]
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4648      	mov	r0, r9
 8005e72:	f000 fb51 	bl	8006518 <_Bfree>
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	1b1b      	subs	r3, r3, r4
 8005e7a:	9308      	str	r3, [sp, #32]
 8005e7c:	f000 80b1 	beq.w	8005fe2 <_dtoa_r+0x8ea>
 8005e80:	9a08      	ldr	r2, [sp, #32]
 8005e82:	4641      	mov	r1, r8
 8005e84:	4648      	mov	r0, r9
 8005e86:	f000 fcb3 	bl	80067f0 <__pow5mult>
 8005e8a:	9002      	str	r0, [sp, #8]
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 fbf6 	bl	8006680 <__i2b>
 8005e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e96:	4604      	mov	r4, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 81d8 	beq.w	800624e <_dtoa_r+0xb56>
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f000 fca4 	bl	80067f0 <__pow5mult>
 8005ea8:	9b07      	ldr	r3, [sp, #28]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	4604      	mov	r4, r0
 8005eae:	f300 809f 	bgt.w	8005ff0 <_dtoa_r+0x8f8>
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 8097 	bne.w	8005fe8 <_dtoa_r+0x8f0>
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 8093 	bne.w	8005fec <_dtoa_r+0x8f4>
 8005ec6:	9b05      	ldr	r3, [sp, #20]
 8005ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ecc:	0d1b      	lsrs	r3, r3, #20
 8005ece:	051b      	lsls	r3, r3, #20
 8005ed0:	b133      	cbz	r3, 8005ee0 <_dtoa_r+0x7e8>
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	3301      	adds	r3, #1
 8005edc:	9306      	str	r3, [sp, #24]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 81b8 	beq.w	800625a <_dtoa_r+0xb62>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ef0:	6918      	ldr	r0, [r3, #16]
 8005ef2:	f000 fb79 	bl	80065e8 <__hi0bits>
 8005ef6:	f1c0 0020 	rsb	r0, r0, #32
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	4418      	add	r0, r3
 8005efe:	f010 001f 	ands.w	r0, r0, #31
 8005f02:	f000 8082 	beq.w	800600a <_dtoa_r+0x912>
 8005f06:	f1c0 0320 	rsb	r3, r0, #32
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	dd73      	ble.n	8005ff6 <_dtoa_r+0x8fe>
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	f1c0 001c 	rsb	r0, r0, #28
 8005f14:	4403      	add	r3, r0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	9b06      	ldr	r3, [sp, #24]
 8005f1a:	4403      	add	r3, r0
 8005f1c:	4406      	add	r6, r0
 8005f1e:	9306      	str	r3, [sp, #24]
 8005f20:	9b00      	ldr	r3, [sp, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dd05      	ble.n	8005f32 <_dtoa_r+0x83a>
 8005f26:	9902      	ldr	r1, [sp, #8]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4648      	mov	r0, r9
 8005f2c:	f000 fcba 	bl	80068a4 <__lshift>
 8005f30:	9002      	str	r0, [sp, #8]
 8005f32:	9b06      	ldr	r3, [sp, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dd05      	ble.n	8005f44 <_dtoa_r+0x84c>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f000 fcb1 	bl	80068a4 <__lshift>
 8005f42:	4604      	mov	r4, r0
 8005f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d061      	beq.n	800600e <_dtoa_r+0x916>
 8005f4a:	9802      	ldr	r0, [sp, #8]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f000 fd15 	bl	800697c <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	da5b      	bge.n	800600e <_dtoa_r+0x916>
 8005f56:	2300      	movs	r3, #0
 8005f58:	9902      	ldr	r1, [sp, #8]
 8005f5a:	220a      	movs	r2, #10
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f000 fafd 	bl	800655c <__multadd>
 8005f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f64:	9002      	str	r0, [sp, #8]
 8005f66:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8177 	beq.w	800625e <_dtoa_r+0xb66>
 8005f70:	4629      	mov	r1, r5
 8005f72:	2300      	movs	r3, #0
 8005f74:	220a      	movs	r2, #10
 8005f76:	4648      	mov	r0, r9
 8005f78:	f000 faf0 	bl	800655c <__multadd>
 8005f7c:	f1bb 0f00 	cmp.w	fp, #0
 8005f80:	4605      	mov	r5, r0
 8005f82:	dc6f      	bgt.n	8006064 <_dtoa_r+0x96c>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	dc49      	bgt.n	800601e <_dtoa_r+0x926>
 8005f8a:	e06b      	b.n	8006064 <_dtoa_r+0x96c>
 8005f8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f92:	e73c      	b.n	8005e0e <_dtoa_r+0x716>
 8005f94:	3fe00000 	.word	0x3fe00000
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1e5c      	subs	r4, r3, #1
 8005fa0:	9b08      	ldr	r3, [sp, #32]
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	db09      	blt.n	8005fba <_dtoa_r+0x8c2>
 8005fa6:	1b1c      	subs	r4, r3, r4
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f6bf af30 	bge.w	8005e10 <_dtoa_r+0x718>
 8005fb0:	9b00      	ldr	r3, [sp, #0]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	1a9e      	subs	r6, r3, r2
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e72b      	b.n	8005e12 <_dtoa_r+0x71a>
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fbe:	9408      	str	r4, [sp, #32]
 8005fc0:	1ae3      	subs	r3, r4, r3
 8005fc2:	441a      	add	r2, r3
 8005fc4:	9e00      	ldr	r6, [sp, #0]
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005fca:	2400      	movs	r4, #0
 8005fcc:	e721      	b.n	8005e12 <_dtoa_r+0x71a>
 8005fce:	9c08      	ldr	r4, [sp, #32]
 8005fd0:	9e00      	ldr	r6, [sp, #0]
 8005fd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005fd4:	e728      	b.n	8005e28 <_dtoa_r+0x730>
 8005fd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005fda:	e751      	b.n	8005e80 <_dtoa_r+0x788>
 8005fdc:	9a08      	ldr	r2, [sp, #32]
 8005fde:	9902      	ldr	r1, [sp, #8]
 8005fe0:	e750      	b.n	8005e84 <_dtoa_r+0x78c>
 8005fe2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005fe6:	e751      	b.n	8005e8c <_dtoa_r+0x794>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e779      	b.n	8005ee0 <_dtoa_r+0x7e8>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	e777      	b.n	8005ee0 <_dtoa_r+0x7e8>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9308      	str	r3, [sp, #32]
 8005ff4:	e779      	b.n	8005eea <_dtoa_r+0x7f2>
 8005ff6:	d093      	beq.n	8005f20 <_dtoa_r+0x828>
 8005ff8:	9a00      	ldr	r2, [sp, #0]
 8005ffa:	331c      	adds	r3, #28
 8005ffc:	441a      	add	r2, r3
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	441a      	add	r2, r3
 8006004:	441e      	add	r6, r3
 8006006:	9206      	str	r2, [sp, #24]
 8006008:	e78a      	b.n	8005f20 <_dtoa_r+0x828>
 800600a:	4603      	mov	r3, r0
 800600c:	e7f4      	b.n	8005ff8 <_dtoa_r+0x900>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	46b8      	mov	r8, r7
 8006014:	dc20      	bgt.n	8006058 <_dtoa_r+0x960>
 8006016:	469b      	mov	fp, r3
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	2b02      	cmp	r3, #2
 800601c:	dd1e      	ble.n	800605c <_dtoa_r+0x964>
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	f47f adb1 	bne.w	8005b88 <_dtoa_r+0x490>
 8006026:	4621      	mov	r1, r4
 8006028:	465b      	mov	r3, fp
 800602a:	2205      	movs	r2, #5
 800602c:	4648      	mov	r0, r9
 800602e:	f000 fa95 	bl	800655c <__multadd>
 8006032:	4601      	mov	r1, r0
 8006034:	4604      	mov	r4, r0
 8006036:	9802      	ldr	r0, [sp, #8]
 8006038:	f000 fca0 	bl	800697c <__mcmp>
 800603c:	2800      	cmp	r0, #0
 800603e:	f77f ada3 	ble.w	8005b88 <_dtoa_r+0x490>
 8006042:	4656      	mov	r6, sl
 8006044:	2331      	movs	r3, #49	@ 0x31
 8006046:	f806 3b01 	strb.w	r3, [r6], #1
 800604a:	f108 0801 	add.w	r8, r8, #1
 800604e:	e59f      	b.n	8005b90 <_dtoa_r+0x498>
 8006050:	9c03      	ldr	r4, [sp, #12]
 8006052:	46b8      	mov	r8, r7
 8006054:	4625      	mov	r5, r4
 8006056:	e7f4      	b.n	8006042 <_dtoa_r+0x94a>
 8006058:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800605c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8101 	beq.w	8006266 <_dtoa_r+0xb6e>
 8006064:	2e00      	cmp	r6, #0
 8006066:	dd05      	ble.n	8006074 <_dtoa_r+0x97c>
 8006068:	4629      	mov	r1, r5
 800606a:	4632      	mov	r2, r6
 800606c:	4648      	mov	r0, r9
 800606e:	f000 fc19 	bl	80068a4 <__lshift>
 8006072:	4605      	mov	r5, r0
 8006074:	9b08      	ldr	r3, [sp, #32]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d05c      	beq.n	8006134 <_dtoa_r+0xa3c>
 800607a:	6869      	ldr	r1, [r5, #4]
 800607c:	4648      	mov	r0, r9
 800607e:	f000 fa0b 	bl	8006498 <_Balloc>
 8006082:	4606      	mov	r6, r0
 8006084:	b928      	cbnz	r0, 8006092 <_dtoa_r+0x99a>
 8006086:	4b82      	ldr	r3, [pc, #520]	@ (8006290 <_dtoa_r+0xb98>)
 8006088:	4602      	mov	r2, r0
 800608a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800608e:	f7ff bb4a 	b.w	8005726 <_dtoa_r+0x2e>
 8006092:	692a      	ldr	r2, [r5, #16]
 8006094:	3202      	adds	r2, #2
 8006096:	0092      	lsls	r2, r2, #2
 8006098:	f105 010c 	add.w	r1, r5, #12
 800609c:	300c      	adds	r0, #12
 800609e:	f000 fff7 	bl	8007090 <memcpy>
 80060a2:	2201      	movs	r2, #1
 80060a4:	4631      	mov	r1, r6
 80060a6:	4648      	mov	r0, r9
 80060a8:	f000 fbfc 	bl	80068a4 <__lshift>
 80060ac:	f10a 0301 	add.w	r3, sl, #1
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	eb0a 030b 	add.w	r3, sl, fp
 80060b6:	9308      	str	r3, [sp, #32]
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	462f      	mov	r7, r5
 80060c0:	9306      	str	r3, [sp, #24]
 80060c2:	4605      	mov	r5, r0
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	9802      	ldr	r0, [sp, #8]
 80060c8:	4621      	mov	r1, r4
 80060ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80060ce:	f7ff fa8a 	bl	80055e6 <quorem>
 80060d2:	4603      	mov	r3, r0
 80060d4:	3330      	adds	r3, #48	@ 0x30
 80060d6:	9003      	str	r0, [sp, #12]
 80060d8:	4639      	mov	r1, r7
 80060da:	9802      	ldr	r0, [sp, #8]
 80060dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060de:	f000 fc4d 	bl	800697c <__mcmp>
 80060e2:	462a      	mov	r2, r5
 80060e4:	9004      	str	r0, [sp, #16]
 80060e6:	4621      	mov	r1, r4
 80060e8:	4648      	mov	r0, r9
 80060ea:	f000 fc63 	bl	80069b4 <__mdiff>
 80060ee:	68c2      	ldr	r2, [r0, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f2:	4606      	mov	r6, r0
 80060f4:	bb02      	cbnz	r2, 8006138 <_dtoa_r+0xa40>
 80060f6:	4601      	mov	r1, r0
 80060f8:	9802      	ldr	r0, [sp, #8]
 80060fa:	f000 fc3f 	bl	800697c <__mcmp>
 80060fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006100:	4602      	mov	r2, r0
 8006102:	4631      	mov	r1, r6
 8006104:	4648      	mov	r0, r9
 8006106:	920c      	str	r2, [sp, #48]	@ 0x30
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	f000 fa05 	bl	8006518 <_Bfree>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006112:	9e00      	ldr	r6, [sp, #0]
 8006114:	ea42 0103 	orr.w	r1, r2, r3
 8006118:	9b06      	ldr	r3, [sp, #24]
 800611a:	4319      	orrs	r1, r3
 800611c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611e:	d10d      	bne.n	800613c <_dtoa_r+0xa44>
 8006120:	2b39      	cmp	r3, #57	@ 0x39
 8006122:	d027      	beq.n	8006174 <_dtoa_r+0xa7c>
 8006124:	9a04      	ldr	r2, [sp, #16]
 8006126:	2a00      	cmp	r2, #0
 8006128:	dd01      	ble.n	800612e <_dtoa_r+0xa36>
 800612a:	9b03      	ldr	r3, [sp, #12]
 800612c:	3331      	adds	r3, #49	@ 0x31
 800612e:	f88b 3000 	strb.w	r3, [fp]
 8006132:	e52e      	b.n	8005b92 <_dtoa_r+0x49a>
 8006134:	4628      	mov	r0, r5
 8006136:	e7b9      	b.n	80060ac <_dtoa_r+0x9b4>
 8006138:	2201      	movs	r2, #1
 800613a:	e7e2      	b.n	8006102 <_dtoa_r+0xa0a>
 800613c:	9904      	ldr	r1, [sp, #16]
 800613e:	2900      	cmp	r1, #0
 8006140:	db04      	blt.n	800614c <_dtoa_r+0xa54>
 8006142:	9807      	ldr	r0, [sp, #28]
 8006144:	4301      	orrs	r1, r0
 8006146:	9806      	ldr	r0, [sp, #24]
 8006148:	4301      	orrs	r1, r0
 800614a:	d120      	bne.n	800618e <_dtoa_r+0xa96>
 800614c:	2a00      	cmp	r2, #0
 800614e:	ddee      	ble.n	800612e <_dtoa_r+0xa36>
 8006150:	9902      	ldr	r1, [sp, #8]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	4648      	mov	r0, r9
 8006158:	f000 fba4 	bl	80068a4 <__lshift>
 800615c:	4621      	mov	r1, r4
 800615e:	9002      	str	r0, [sp, #8]
 8006160:	f000 fc0c 	bl	800697c <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	dc02      	bgt.n	8006170 <_dtoa_r+0xa78>
 800616a:	d1e0      	bne.n	800612e <_dtoa_r+0xa36>
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	d5de      	bpl.n	800612e <_dtoa_r+0xa36>
 8006170:	2b39      	cmp	r3, #57	@ 0x39
 8006172:	d1da      	bne.n	800612a <_dtoa_r+0xa32>
 8006174:	2339      	movs	r3, #57	@ 0x39
 8006176:	f88b 3000 	strb.w	r3, [fp]
 800617a:	4633      	mov	r3, r6
 800617c:	461e      	mov	r6, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006184:	2a39      	cmp	r2, #57	@ 0x39
 8006186:	d04e      	beq.n	8006226 <_dtoa_r+0xb2e>
 8006188:	3201      	adds	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e501      	b.n	8005b92 <_dtoa_r+0x49a>
 800618e:	2a00      	cmp	r2, #0
 8006190:	dd03      	ble.n	800619a <_dtoa_r+0xaa2>
 8006192:	2b39      	cmp	r3, #57	@ 0x39
 8006194:	d0ee      	beq.n	8006174 <_dtoa_r+0xa7c>
 8006196:	3301      	adds	r3, #1
 8006198:	e7c9      	b.n	800612e <_dtoa_r+0xa36>
 800619a:	9a00      	ldr	r2, [sp, #0]
 800619c:	9908      	ldr	r1, [sp, #32]
 800619e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061a2:	428a      	cmp	r2, r1
 80061a4:	d028      	beq.n	80061f8 <_dtoa_r+0xb00>
 80061a6:	9902      	ldr	r1, [sp, #8]
 80061a8:	2300      	movs	r3, #0
 80061aa:	220a      	movs	r2, #10
 80061ac:	4648      	mov	r0, r9
 80061ae:	f000 f9d5 	bl	800655c <__multadd>
 80061b2:	42af      	cmp	r7, r5
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	f04f 020a 	mov.w	r2, #10
 80061be:	4639      	mov	r1, r7
 80061c0:	4648      	mov	r0, r9
 80061c2:	d107      	bne.n	80061d4 <_dtoa_r+0xadc>
 80061c4:	f000 f9ca 	bl	800655c <__multadd>
 80061c8:	4607      	mov	r7, r0
 80061ca:	4605      	mov	r5, r0
 80061cc:	9b00      	ldr	r3, [sp, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	e777      	b.n	80060c4 <_dtoa_r+0x9cc>
 80061d4:	f000 f9c2 	bl	800655c <__multadd>
 80061d8:	4629      	mov	r1, r5
 80061da:	4607      	mov	r7, r0
 80061dc:	2300      	movs	r3, #0
 80061de:	220a      	movs	r2, #10
 80061e0:	4648      	mov	r0, r9
 80061e2:	f000 f9bb 	bl	800655c <__multadd>
 80061e6:	4605      	mov	r5, r0
 80061e8:	e7f0      	b.n	80061cc <_dtoa_r+0xad4>
 80061ea:	f1bb 0f00 	cmp.w	fp, #0
 80061ee:	bfcc      	ite	gt
 80061f0:	465e      	movgt	r6, fp
 80061f2:	2601      	movle	r6, #1
 80061f4:	4456      	add	r6, sl
 80061f6:	2700      	movs	r7, #0
 80061f8:	9902      	ldr	r1, [sp, #8]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	4648      	mov	r0, r9
 8006200:	f000 fb50 	bl	80068a4 <__lshift>
 8006204:	4621      	mov	r1, r4
 8006206:	9002      	str	r0, [sp, #8]
 8006208:	f000 fbb8 	bl	800697c <__mcmp>
 800620c:	2800      	cmp	r0, #0
 800620e:	dcb4      	bgt.n	800617a <_dtoa_r+0xa82>
 8006210:	d102      	bne.n	8006218 <_dtoa_r+0xb20>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	07db      	lsls	r3, r3, #31
 8006216:	d4b0      	bmi.n	800617a <_dtoa_r+0xa82>
 8006218:	4633      	mov	r3, r6
 800621a:	461e      	mov	r6, r3
 800621c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006220:	2a30      	cmp	r2, #48	@ 0x30
 8006222:	d0fa      	beq.n	800621a <_dtoa_r+0xb22>
 8006224:	e4b5      	b.n	8005b92 <_dtoa_r+0x49a>
 8006226:	459a      	cmp	sl, r3
 8006228:	d1a8      	bne.n	800617c <_dtoa_r+0xa84>
 800622a:	2331      	movs	r3, #49	@ 0x31
 800622c:	f108 0801 	add.w	r8, r8, #1
 8006230:	f88a 3000 	strb.w	r3, [sl]
 8006234:	e4ad      	b.n	8005b92 <_dtoa_r+0x49a>
 8006236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006238:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006294 <_dtoa_r+0xb9c>
 800623c:	b11b      	cbz	r3, 8006246 <_dtoa_r+0xb4e>
 800623e:	f10a 0308 	add.w	r3, sl, #8
 8006242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4650      	mov	r0, sl
 8006248:	b017      	add	sp, #92	@ 0x5c
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f77f ae2e 	ble.w	8005eb2 <_dtoa_r+0x7ba>
 8006256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006258:	9308      	str	r3, [sp, #32]
 800625a:	2001      	movs	r0, #1
 800625c:	e64d      	b.n	8005efa <_dtoa_r+0x802>
 800625e:	f1bb 0f00 	cmp.w	fp, #0
 8006262:	f77f aed9 	ble.w	8006018 <_dtoa_r+0x920>
 8006266:	4656      	mov	r6, sl
 8006268:	9802      	ldr	r0, [sp, #8]
 800626a:	4621      	mov	r1, r4
 800626c:	f7ff f9bb 	bl	80055e6 <quorem>
 8006270:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006274:	f806 3b01 	strb.w	r3, [r6], #1
 8006278:	eba6 020a 	sub.w	r2, r6, sl
 800627c:	4593      	cmp	fp, r2
 800627e:	ddb4      	ble.n	80061ea <_dtoa_r+0xaf2>
 8006280:	9902      	ldr	r1, [sp, #8]
 8006282:	2300      	movs	r3, #0
 8006284:	220a      	movs	r2, #10
 8006286:	4648      	mov	r0, r9
 8006288:	f000 f968 	bl	800655c <__multadd>
 800628c:	9002      	str	r0, [sp, #8]
 800628e:	e7eb      	b.n	8006268 <_dtoa_r+0xb70>
 8006290:	0800741f 	.word	0x0800741f
 8006294:	080073a3 	.word	0x080073a3

08006298 <_free_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4605      	mov	r5, r0
 800629c:	2900      	cmp	r1, #0
 800629e:	d041      	beq.n	8006324 <_free_r+0x8c>
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f0c      	subs	r4, r1, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfb8      	it	lt
 80062aa:	18e4      	addlt	r4, r4, r3
 80062ac:	f000 f8e8 	bl	8006480 <__malloc_lock>
 80062b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <_free_r+0x90>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x2c>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	4628      	mov	r0, r5
 80062bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c0:	f000 b8e4 	b.w	800648c <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x42>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	1821      	adds	r1, r4, r0
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1809      	addeq	r1, r1, r0
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x1e>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x4c>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x42>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1850      	adds	r0, r2, r1
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x6c>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	4401      	add	r1, r0
 80062f0:	1850      	adds	r0, r2, r1
 80062f2:	4283      	cmp	r3, r0
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x22>
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	4408      	add	r0, r1
 8006300:	6010      	str	r0, [r2, #0]
 8006302:	e7da      	b.n	80062ba <_free_r+0x22>
 8006304:	d902      	bls.n	800630c <_free_r+0x74>
 8006306:	230c      	movs	r3, #12
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x22>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428b      	cmp	r3, r1
 8006312:	bf04      	itt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1809      	addeq	r1, r1, r0
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	6054      	str	r4, [r2, #4]
 8006322:	e7ca      	b.n	80062ba <_free_r+0x22>
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	200003f8 	.word	0x200003f8

0800632c <malloc>:
 800632c:	4b02      	ldr	r3, [pc, #8]	@ (8006338 <malloc+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f000 b825 	b.w	8006380 <_malloc_r>
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018

0800633c <sbrk_aligned>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4e0f      	ldr	r6, [pc, #60]	@ (800637c <sbrk_aligned+0x40>)
 8006340:	460c      	mov	r4, r1
 8006342:	6831      	ldr	r1, [r6, #0]
 8006344:	4605      	mov	r5, r0
 8006346:	b911      	cbnz	r1, 800634e <sbrk_aligned+0x12>
 8006348:	f000 fe92 	bl	8007070 <_sbrk_r>
 800634c:	6030      	str	r0, [r6, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fe8d 	bl	8007070 <_sbrk_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d103      	bne.n	8006362 <sbrk_aligned+0x26>
 800635a:	f04f 34ff 	mov.w	r4, #4294967295
 800635e:	4620      	mov	r0, r4
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	1cc4      	adds	r4, r0, #3
 8006364:	f024 0403 	bic.w	r4, r4, #3
 8006368:	42a0      	cmp	r0, r4
 800636a:	d0f8      	beq.n	800635e <sbrk_aligned+0x22>
 800636c:	1a21      	subs	r1, r4, r0
 800636e:	4628      	mov	r0, r5
 8006370:	f000 fe7e 	bl	8007070 <_sbrk_r>
 8006374:	3001      	adds	r0, #1
 8006376:	d1f2      	bne.n	800635e <sbrk_aligned+0x22>
 8006378:	e7ef      	b.n	800635a <sbrk_aligned+0x1e>
 800637a:	bf00      	nop
 800637c:	200003f4 	.word	0x200003f4

08006380 <_malloc_r>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	1ccd      	adds	r5, r1, #3
 8006386:	f025 0503 	bic.w	r5, r5, #3
 800638a:	3508      	adds	r5, #8
 800638c:	2d0c      	cmp	r5, #12
 800638e:	bf38      	it	cc
 8006390:	250c      	movcc	r5, #12
 8006392:	2d00      	cmp	r5, #0
 8006394:	4606      	mov	r6, r0
 8006396:	db01      	blt.n	800639c <_malloc_r+0x1c>
 8006398:	42a9      	cmp	r1, r5
 800639a:	d904      	bls.n	80063a6 <_malloc_r+0x26>
 800639c:	230c      	movs	r3, #12
 800639e:	6033      	str	r3, [r6, #0]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800647c <_malloc_r+0xfc>
 80063aa:	f000 f869 	bl	8006480 <__malloc_lock>
 80063ae:	f8d8 3000 	ldr.w	r3, [r8]
 80063b2:	461c      	mov	r4, r3
 80063b4:	bb44      	cbnz	r4, 8006408 <_malloc_r+0x88>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4630      	mov	r0, r6
 80063ba:	f7ff ffbf 	bl	800633c <sbrk_aligned>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	4604      	mov	r4, r0
 80063c2:	d158      	bne.n	8006476 <_malloc_r+0xf6>
 80063c4:	f8d8 4000 	ldr.w	r4, [r8]
 80063c8:	4627      	mov	r7, r4
 80063ca:	2f00      	cmp	r7, #0
 80063cc:	d143      	bne.n	8006456 <_malloc_r+0xd6>
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d04b      	beq.n	800646a <_malloc_r+0xea>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	4639      	mov	r1, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	eb04 0903 	add.w	r9, r4, r3
 80063dc:	f000 fe48 	bl	8007070 <_sbrk_r>
 80063e0:	4581      	cmp	r9, r0
 80063e2:	d142      	bne.n	800646a <_malloc_r+0xea>
 80063e4:	6821      	ldr	r1, [r4, #0]
 80063e6:	1a6d      	subs	r5, r5, r1
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ffa6 	bl	800633c <sbrk_aligned>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d03a      	beq.n	800646a <_malloc_r+0xea>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	442b      	add	r3, r5
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	f8d8 3000 	ldr.w	r3, [r8]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	bb62      	cbnz	r2, 800645c <_malloc_r+0xdc>
 8006402:	f8c8 7000 	str.w	r7, [r8]
 8006406:	e00f      	b.n	8006428 <_malloc_r+0xa8>
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	1b52      	subs	r2, r2, r5
 800640c:	d420      	bmi.n	8006450 <_malloc_r+0xd0>
 800640e:	2a0b      	cmp	r2, #11
 8006410:	d917      	bls.n	8006442 <_malloc_r+0xc2>
 8006412:	1961      	adds	r1, r4, r5
 8006414:	42a3      	cmp	r3, r4
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	6059      	strne	r1, [r3, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	bf08      	it	eq
 8006420:	f8c8 1000 	streq.w	r1, [r8]
 8006424:	5162      	str	r2, [r4, r5]
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f82f 	bl	800648c <__malloc_unlock>
 800642e:	f104 000b 	add.w	r0, r4, #11
 8006432:	1d23      	adds	r3, r4, #4
 8006434:	f020 0007 	bic.w	r0, r0, #7
 8006438:	1ac2      	subs	r2, r0, r3
 800643a:	bf1c      	itt	ne
 800643c:	1a1b      	subne	r3, r3, r0
 800643e:	50a3      	strne	r3, [r4, r2]
 8006440:	e7af      	b.n	80063a2 <_malloc_r+0x22>
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	42a3      	cmp	r3, r4
 8006446:	bf0c      	ite	eq
 8006448:	f8c8 2000 	streq.w	r2, [r8]
 800644c:	605a      	strne	r2, [r3, #4]
 800644e:	e7eb      	b.n	8006428 <_malloc_r+0xa8>
 8006450:	4623      	mov	r3, r4
 8006452:	6864      	ldr	r4, [r4, #4]
 8006454:	e7ae      	b.n	80063b4 <_malloc_r+0x34>
 8006456:	463c      	mov	r4, r7
 8006458:	687f      	ldr	r7, [r7, #4]
 800645a:	e7b6      	b.n	80063ca <_malloc_r+0x4a>
 800645c:	461a      	mov	r2, r3
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	42a3      	cmp	r3, r4
 8006462:	d1fb      	bne.n	800645c <_malloc_r+0xdc>
 8006464:	2300      	movs	r3, #0
 8006466:	6053      	str	r3, [r2, #4]
 8006468:	e7de      	b.n	8006428 <_malloc_r+0xa8>
 800646a:	230c      	movs	r3, #12
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f80c 	bl	800648c <__malloc_unlock>
 8006474:	e794      	b.n	80063a0 <_malloc_r+0x20>
 8006476:	6005      	str	r5, [r0, #0]
 8006478:	e7d6      	b.n	8006428 <_malloc_r+0xa8>
 800647a:	bf00      	nop
 800647c:	200003f8 	.word	0x200003f8

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	@ (8006488 <__malloc_lock+0x8>)
 8006482:	f7ff b8ae 	b.w	80055e2 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	200003f0 	.word	0x200003f0

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	@ (8006494 <__malloc_unlock+0x8>)
 800648e:	f7ff b8a9 	b.w	80055e4 <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	200003f0 	.word	0x200003f0

08006498 <_Balloc>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	69c6      	ldr	r6, [r0, #28]
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	b976      	cbnz	r6, 80064c0 <_Balloc+0x28>
 80064a2:	2010      	movs	r0, #16
 80064a4:	f7ff ff42 	bl	800632c <malloc>
 80064a8:	4602      	mov	r2, r0
 80064aa:	61e0      	str	r0, [r4, #28]
 80064ac:	b920      	cbnz	r0, 80064b8 <_Balloc+0x20>
 80064ae:	4b18      	ldr	r3, [pc, #96]	@ (8006510 <_Balloc+0x78>)
 80064b0:	4818      	ldr	r0, [pc, #96]	@ (8006514 <_Balloc+0x7c>)
 80064b2:	216b      	movs	r1, #107	@ 0x6b
 80064b4:	f000 fdfa 	bl	80070ac <__assert_func>
 80064b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064bc:	6006      	str	r6, [r0, #0]
 80064be:	60c6      	str	r6, [r0, #12]
 80064c0:	69e6      	ldr	r6, [r4, #28]
 80064c2:	68f3      	ldr	r3, [r6, #12]
 80064c4:	b183      	cbz	r3, 80064e8 <_Balloc+0x50>
 80064c6:	69e3      	ldr	r3, [r4, #28]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ce:	b9b8      	cbnz	r0, 8006500 <_Balloc+0x68>
 80064d0:	2101      	movs	r1, #1
 80064d2:	fa01 f605 	lsl.w	r6, r1, r5
 80064d6:	1d72      	adds	r2, r6, #5
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 fe04 	bl	80070e8 <_calloc_r>
 80064e0:	b160      	cbz	r0, 80064fc <_Balloc+0x64>
 80064e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064e6:	e00e      	b.n	8006506 <_Balloc+0x6e>
 80064e8:	2221      	movs	r2, #33	@ 0x21
 80064ea:	2104      	movs	r1, #4
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fdfb 	bl	80070e8 <_calloc_r>
 80064f2:	69e3      	ldr	r3, [r4, #28]
 80064f4:	60f0      	str	r0, [r6, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e4      	bne.n	80064c6 <_Balloc+0x2e>
 80064fc:	2000      	movs	r0, #0
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	6802      	ldr	r2, [r0, #0]
 8006502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006506:	2300      	movs	r3, #0
 8006508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800650c:	e7f7      	b.n	80064fe <_Balloc+0x66>
 800650e:	bf00      	nop
 8006510:	080073b0 	.word	0x080073b0
 8006514:	08007430 	.word	0x08007430

08006518 <_Bfree>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	69c6      	ldr	r6, [r0, #28]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b976      	cbnz	r6, 8006540 <_Bfree+0x28>
 8006522:	2010      	movs	r0, #16
 8006524:	f7ff ff02 	bl	800632c <malloc>
 8006528:	4602      	mov	r2, r0
 800652a:	61e8      	str	r0, [r5, #28]
 800652c:	b920      	cbnz	r0, 8006538 <_Bfree+0x20>
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <_Bfree+0x3c>)
 8006530:	4809      	ldr	r0, [pc, #36]	@ (8006558 <_Bfree+0x40>)
 8006532:	218f      	movs	r1, #143	@ 0x8f
 8006534:	f000 fdba 	bl	80070ac <__assert_func>
 8006538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800653c:	6006      	str	r6, [r0, #0]
 800653e:	60c6      	str	r6, [r0, #12]
 8006540:	b13c      	cbz	r4, 8006552 <_Bfree+0x3a>
 8006542:	69eb      	ldr	r3, [r5, #28]
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800654c:	6021      	str	r1, [r4, #0]
 800654e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	080073b0 	.word	0x080073b0
 8006558:	08007430 	.word	0x08007430

0800655c <__multadd>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	690d      	ldr	r5, [r1, #16]
 8006562:	4607      	mov	r7, r0
 8006564:	460c      	mov	r4, r1
 8006566:	461e      	mov	r6, r3
 8006568:	f101 0c14 	add.w	ip, r1, #20
 800656c:	2000      	movs	r0, #0
 800656e:	f8dc 3000 	ldr.w	r3, [ip]
 8006572:	b299      	uxth	r1, r3
 8006574:	fb02 6101 	mla	r1, r2, r1, r6
 8006578:	0c1e      	lsrs	r6, r3, #16
 800657a:	0c0b      	lsrs	r3, r1, #16
 800657c:	fb02 3306 	mla	r3, r2, r6, r3
 8006580:	b289      	uxth	r1, r1
 8006582:	3001      	adds	r0, #1
 8006584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006588:	4285      	cmp	r5, r0
 800658a:	f84c 1b04 	str.w	r1, [ip], #4
 800658e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006592:	dcec      	bgt.n	800656e <__multadd+0x12>
 8006594:	b30e      	cbz	r6, 80065da <__multadd+0x7e>
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc19      	bgt.n	80065d0 <__multadd+0x74>
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	4638      	mov	r0, r7
 80065a0:	3101      	adds	r1, #1
 80065a2:	f7ff ff79 	bl	8006498 <_Balloc>
 80065a6:	4680      	mov	r8, r0
 80065a8:	b928      	cbnz	r0, 80065b6 <__multadd+0x5a>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <__multadd+0x84>)
 80065ae:	480d      	ldr	r0, [pc, #52]	@ (80065e4 <__multadd+0x88>)
 80065b0:	21ba      	movs	r1, #186	@ 0xba
 80065b2:	f000 fd7b 	bl	80070ac <__assert_func>
 80065b6:	6922      	ldr	r2, [r4, #16]
 80065b8:	3202      	adds	r2, #2
 80065ba:	f104 010c 	add.w	r1, r4, #12
 80065be:	0092      	lsls	r2, r2, #2
 80065c0:	300c      	adds	r0, #12
 80065c2:	f000 fd65 	bl	8007090 <memcpy>
 80065c6:	4621      	mov	r1, r4
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7ff ffa5 	bl	8006518 <_Bfree>
 80065ce:	4644      	mov	r4, r8
 80065d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d4:	3501      	adds	r5, #1
 80065d6:	615e      	str	r6, [r3, #20]
 80065d8:	6125      	str	r5, [r4, #16]
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	0800741f 	.word	0x0800741f
 80065e4:	08007430 	.word	0x08007430

080065e8 <__hi0bits>:
 80065e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065ec:	4603      	mov	r3, r0
 80065ee:	bf36      	itet	cc
 80065f0:	0403      	lslcc	r3, r0, #16
 80065f2:	2000      	movcs	r0, #0
 80065f4:	2010      	movcc	r0, #16
 80065f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065fa:	bf3c      	itt	cc
 80065fc:	021b      	lslcc	r3, r3, #8
 80065fe:	3008      	addcc	r0, #8
 8006600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006604:	bf3c      	itt	cc
 8006606:	011b      	lslcc	r3, r3, #4
 8006608:	3004      	addcc	r0, #4
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660e:	bf3c      	itt	cc
 8006610:	009b      	lslcc	r3, r3, #2
 8006612:	3002      	addcc	r0, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	db05      	blt.n	8006624 <__hi0bits+0x3c>
 8006618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800661c:	f100 0001 	add.w	r0, r0, #1
 8006620:	bf08      	it	eq
 8006622:	2020      	moveq	r0, #32
 8006624:	4770      	bx	lr

08006626 <__lo0bits>:
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	4602      	mov	r2, r0
 800662a:	f013 0007 	ands.w	r0, r3, #7
 800662e:	d00b      	beq.n	8006648 <__lo0bits+0x22>
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d421      	bmi.n	8006678 <__lo0bits+0x52>
 8006634:	0798      	lsls	r0, r3, #30
 8006636:	bf49      	itett	mi
 8006638:	085b      	lsrmi	r3, r3, #1
 800663a:	089b      	lsrpl	r3, r3, #2
 800663c:	2001      	movmi	r0, #1
 800663e:	6013      	strmi	r3, [r2, #0]
 8006640:	bf5c      	itt	pl
 8006642:	6013      	strpl	r3, [r2, #0]
 8006644:	2002      	movpl	r0, #2
 8006646:	4770      	bx	lr
 8006648:	b299      	uxth	r1, r3
 800664a:	b909      	cbnz	r1, 8006650 <__lo0bits+0x2a>
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	2010      	movs	r0, #16
 8006650:	b2d9      	uxtb	r1, r3
 8006652:	b909      	cbnz	r1, 8006658 <__lo0bits+0x32>
 8006654:	3008      	adds	r0, #8
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	0719      	lsls	r1, r3, #28
 800665a:	bf04      	itt	eq
 800665c:	091b      	lsreq	r3, r3, #4
 800665e:	3004      	addeq	r0, #4
 8006660:	0799      	lsls	r1, r3, #30
 8006662:	bf04      	itt	eq
 8006664:	089b      	lsreq	r3, r3, #2
 8006666:	3002      	addeq	r0, #2
 8006668:	07d9      	lsls	r1, r3, #31
 800666a:	d403      	bmi.n	8006674 <__lo0bits+0x4e>
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f100 0001 	add.w	r0, r0, #1
 8006672:	d003      	beq.n	800667c <__lo0bits+0x56>
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4770      	bx	lr
 8006678:	2000      	movs	r0, #0
 800667a:	4770      	bx	lr
 800667c:	2020      	movs	r0, #32
 800667e:	4770      	bx	lr

08006680 <__i2b>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	2101      	movs	r1, #1
 8006686:	f7ff ff07 	bl	8006498 <_Balloc>
 800668a:	4602      	mov	r2, r0
 800668c:	b928      	cbnz	r0, 800669a <__i2b+0x1a>
 800668e:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <__i2b+0x24>)
 8006690:	4805      	ldr	r0, [pc, #20]	@ (80066a8 <__i2b+0x28>)
 8006692:	f240 1145 	movw	r1, #325	@ 0x145
 8006696:	f000 fd09 	bl	80070ac <__assert_func>
 800669a:	2301      	movs	r3, #1
 800669c:	6144      	str	r4, [r0, #20]
 800669e:	6103      	str	r3, [r0, #16]
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	0800741f 	.word	0x0800741f
 80066a8:	08007430 	.word	0x08007430

080066ac <__multiply>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	4617      	mov	r7, r2
 80066b2:	690a      	ldr	r2, [r1, #16]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	bfa8      	it	ge
 80066ba:	463b      	movge	r3, r7
 80066bc:	4689      	mov	r9, r1
 80066be:	bfa4      	itt	ge
 80066c0:	460f      	movge	r7, r1
 80066c2:	4699      	movge	r9, r3
 80066c4:	693d      	ldr	r5, [r7, #16]
 80066c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	eb05 060a 	add.w	r6, r5, sl
 80066d2:	42b3      	cmp	r3, r6
 80066d4:	b085      	sub	sp, #20
 80066d6:	bfb8      	it	lt
 80066d8:	3101      	addlt	r1, #1
 80066da:	f7ff fedd 	bl	8006498 <_Balloc>
 80066de:	b930      	cbnz	r0, 80066ee <__multiply+0x42>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b41      	ldr	r3, [pc, #260]	@ (80067e8 <__multiply+0x13c>)
 80066e4:	4841      	ldr	r0, [pc, #260]	@ (80067ec <__multiply+0x140>)
 80066e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066ea:	f000 fcdf 	bl	80070ac <__assert_func>
 80066ee:	f100 0414 	add.w	r4, r0, #20
 80066f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80066f6:	4623      	mov	r3, r4
 80066f8:	2200      	movs	r2, #0
 80066fa:	4573      	cmp	r3, lr
 80066fc:	d320      	bcc.n	8006740 <__multiply+0x94>
 80066fe:	f107 0814 	add.w	r8, r7, #20
 8006702:	f109 0114 	add.w	r1, r9, #20
 8006706:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800670a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	1beb      	subs	r3, r5, r7
 8006712:	3b15      	subs	r3, #21
 8006714:	f023 0303 	bic.w	r3, r3, #3
 8006718:	3304      	adds	r3, #4
 800671a:	3715      	adds	r7, #21
 800671c:	42bd      	cmp	r5, r7
 800671e:	bf38      	it	cc
 8006720:	2304      	movcc	r3, #4
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	9103      	str	r1, [sp, #12]
 8006728:	428b      	cmp	r3, r1
 800672a:	d80c      	bhi.n	8006746 <__multiply+0x9a>
 800672c:	2e00      	cmp	r6, #0
 800672e:	dd03      	ble.n	8006738 <__multiply+0x8c>
 8006730:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006734:	2b00      	cmp	r3, #0
 8006736:	d055      	beq.n	80067e4 <__multiply+0x138>
 8006738:	6106      	str	r6, [r0, #16]
 800673a:	b005      	add	sp, #20
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	f843 2b04 	str.w	r2, [r3], #4
 8006744:	e7d9      	b.n	80066fa <__multiply+0x4e>
 8006746:	f8b1 a000 	ldrh.w	sl, [r1]
 800674a:	f1ba 0f00 	cmp.w	sl, #0
 800674e:	d01f      	beq.n	8006790 <__multiply+0xe4>
 8006750:	46c4      	mov	ip, r8
 8006752:	46a1      	mov	r9, r4
 8006754:	2700      	movs	r7, #0
 8006756:	f85c 2b04 	ldr.w	r2, [ip], #4
 800675a:	f8d9 3000 	ldr.w	r3, [r9]
 800675e:	fa1f fb82 	uxth.w	fp, r2
 8006762:	b29b      	uxth	r3, r3
 8006764:	fb0a 330b 	mla	r3, sl, fp, r3
 8006768:	443b      	add	r3, r7
 800676a:	f8d9 7000 	ldr.w	r7, [r9]
 800676e:	0c12      	lsrs	r2, r2, #16
 8006770:	0c3f      	lsrs	r7, r7, #16
 8006772:	fb0a 7202 	mla	r2, sl, r2, r7
 8006776:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800677a:	b29b      	uxth	r3, r3
 800677c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006780:	4565      	cmp	r5, ip
 8006782:	f849 3b04 	str.w	r3, [r9], #4
 8006786:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800678a:	d8e4      	bhi.n	8006756 <__multiply+0xaa>
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	50e7      	str	r7, [r4, r3]
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006796:	3104      	adds	r1, #4
 8006798:	f1b9 0f00 	cmp.w	r9, #0
 800679c:	d020      	beq.n	80067e0 <__multiply+0x134>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	4647      	mov	r7, r8
 80067a2:	46a4      	mov	ip, r4
 80067a4:	f04f 0a00 	mov.w	sl, #0
 80067a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80067ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067b0:	fb09 220b 	mla	r2, r9, fp, r2
 80067b4:	4452      	add	r2, sl
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067bc:	f84c 3b04 	str.w	r3, [ip], #4
 80067c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80067c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80067cc:	fb09 330a 	mla	r3, r9, sl, r3
 80067d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067d4:	42bd      	cmp	r5, r7
 80067d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067da:	d8e5      	bhi.n	80067a8 <__multiply+0xfc>
 80067dc:	9a01      	ldr	r2, [sp, #4]
 80067de:	50a3      	str	r3, [r4, r2]
 80067e0:	3404      	adds	r4, #4
 80067e2:	e79f      	b.n	8006724 <__multiply+0x78>
 80067e4:	3e01      	subs	r6, #1
 80067e6:	e7a1      	b.n	800672c <__multiply+0x80>
 80067e8:	0800741f 	.word	0x0800741f
 80067ec:	08007430 	.word	0x08007430

080067f0 <__pow5mult>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	4615      	mov	r5, r2
 80067f6:	f012 0203 	ands.w	r2, r2, #3
 80067fa:	4607      	mov	r7, r0
 80067fc:	460e      	mov	r6, r1
 80067fe:	d007      	beq.n	8006810 <__pow5mult+0x20>
 8006800:	4c25      	ldr	r4, [pc, #148]	@ (8006898 <__pow5mult+0xa8>)
 8006802:	3a01      	subs	r2, #1
 8006804:	2300      	movs	r3, #0
 8006806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800680a:	f7ff fea7 	bl	800655c <__multadd>
 800680e:	4606      	mov	r6, r0
 8006810:	10ad      	asrs	r5, r5, #2
 8006812:	d03d      	beq.n	8006890 <__pow5mult+0xa0>
 8006814:	69fc      	ldr	r4, [r7, #28]
 8006816:	b97c      	cbnz	r4, 8006838 <__pow5mult+0x48>
 8006818:	2010      	movs	r0, #16
 800681a:	f7ff fd87 	bl	800632c <malloc>
 800681e:	4602      	mov	r2, r0
 8006820:	61f8      	str	r0, [r7, #28]
 8006822:	b928      	cbnz	r0, 8006830 <__pow5mult+0x40>
 8006824:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <__pow5mult+0xac>)
 8006826:	481e      	ldr	r0, [pc, #120]	@ (80068a0 <__pow5mult+0xb0>)
 8006828:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800682c:	f000 fc3e 	bl	80070ac <__assert_func>
 8006830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006834:	6004      	str	r4, [r0, #0]
 8006836:	60c4      	str	r4, [r0, #12]
 8006838:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800683c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006840:	b94c      	cbnz	r4, 8006856 <__pow5mult+0x66>
 8006842:	f240 2171 	movw	r1, #625	@ 0x271
 8006846:	4638      	mov	r0, r7
 8006848:	f7ff ff1a 	bl	8006680 <__i2b>
 800684c:	2300      	movs	r3, #0
 800684e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006852:	4604      	mov	r4, r0
 8006854:	6003      	str	r3, [r0, #0]
 8006856:	f04f 0900 	mov.w	r9, #0
 800685a:	07eb      	lsls	r3, r5, #31
 800685c:	d50a      	bpl.n	8006874 <__pow5mult+0x84>
 800685e:	4631      	mov	r1, r6
 8006860:	4622      	mov	r2, r4
 8006862:	4638      	mov	r0, r7
 8006864:	f7ff ff22 	bl	80066ac <__multiply>
 8006868:	4631      	mov	r1, r6
 800686a:	4680      	mov	r8, r0
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff fe53 	bl	8006518 <_Bfree>
 8006872:	4646      	mov	r6, r8
 8006874:	106d      	asrs	r5, r5, #1
 8006876:	d00b      	beq.n	8006890 <__pow5mult+0xa0>
 8006878:	6820      	ldr	r0, [r4, #0]
 800687a:	b938      	cbnz	r0, 800688c <__pow5mult+0x9c>
 800687c:	4622      	mov	r2, r4
 800687e:	4621      	mov	r1, r4
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ff13 	bl	80066ac <__multiply>
 8006886:	6020      	str	r0, [r4, #0]
 8006888:	f8c0 9000 	str.w	r9, [r0]
 800688c:	4604      	mov	r4, r0
 800688e:	e7e4      	b.n	800685a <__pow5mult+0x6a>
 8006890:	4630      	mov	r0, r6
 8006892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006896:	bf00      	nop
 8006898:	080074e0 	.word	0x080074e0
 800689c:	080073b0 	.word	0x080073b0
 80068a0:	08007430 	.word	0x08007430

080068a4 <__lshift>:
 80068a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	460c      	mov	r4, r1
 80068aa:	6849      	ldr	r1, [r1, #4]
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	4607      	mov	r7, r0
 80068b6:	4691      	mov	r9, r2
 80068b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068bc:	f108 0601 	add.w	r6, r8, #1
 80068c0:	42b3      	cmp	r3, r6
 80068c2:	db0b      	blt.n	80068dc <__lshift+0x38>
 80068c4:	4638      	mov	r0, r7
 80068c6:	f7ff fde7 	bl	8006498 <_Balloc>
 80068ca:	4605      	mov	r5, r0
 80068cc:	b948      	cbnz	r0, 80068e2 <__lshift+0x3e>
 80068ce:	4602      	mov	r2, r0
 80068d0:	4b28      	ldr	r3, [pc, #160]	@ (8006974 <__lshift+0xd0>)
 80068d2:	4829      	ldr	r0, [pc, #164]	@ (8006978 <__lshift+0xd4>)
 80068d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068d8:	f000 fbe8 	bl	80070ac <__assert_func>
 80068dc:	3101      	adds	r1, #1
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	e7ee      	b.n	80068c0 <__lshift+0x1c>
 80068e2:	2300      	movs	r3, #0
 80068e4:	f100 0114 	add.w	r1, r0, #20
 80068e8:	f100 0210 	add.w	r2, r0, #16
 80068ec:	4618      	mov	r0, r3
 80068ee:	4553      	cmp	r3, sl
 80068f0:	db33      	blt.n	800695a <__lshift+0xb6>
 80068f2:	6920      	ldr	r0, [r4, #16]
 80068f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068f8:	f104 0314 	add.w	r3, r4, #20
 80068fc:	f019 091f 	ands.w	r9, r9, #31
 8006900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006908:	d02b      	beq.n	8006962 <__lshift+0xbe>
 800690a:	f1c9 0e20 	rsb	lr, r9, #32
 800690e:	468a      	mov	sl, r1
 8006910:	2200      	movs	r2, #0
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	fa00 f009 	lsl.w	r0, r0, r9
 8006918:	4310      	orrs	r0, r2
 800691a:	f84a 0b04 	str.w	r0, [sl], #4
 800691e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006922:	459c      	cmp	ip, r3
 8006924:	fa22 f20e 	lsr.w	r2, r2, lr
 8006928:	d8f3      	bhi.n	8006912 <__lshift+0x6e>
 800692a:	ebac 0304 	sub.w	r3, ip, r4
 800692e:	3b15      	subs	r3, #21
 8006930:	f023 0303 	bic.w	r3, r3, #3
 8006934:	3304      	adds	r3, #4
 8006936:	f104 0015 	add.w	r0, r4, #21
 800693a:	4560      	cmp	r0, ip
 800693c:	bf88      	it	hi
 800693e:	2304      	movhi	r3, #4
 8006940:	50ca      	str	r2, [r1, r3]
 8006942:	b10a      	cbz	r2, 8006948 <__lshift+0xa4>
 8006944:	f108 0602 	add.w	r6, r8, #2
 8006948:	3e01      	subs	r6, #1
 800694a:	4638      	mov	r0, r7
 800694c:	612e      	str	r6, [r5, #16]
 800694e:	4621      	mov	r1, r4
 8006950:	f7ff fde2 	bl	8006518 <_Bfree>
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695a:	f842 0f04 	str.w	r0, [r2, #4]!
 800695e:	3301      	adds	r3, #1
 8006960:	e7c5      	b.n	80068ee <__lshift+0x4a>
 8006962:	3904      	subs	r1, #4
 8006964:	f853 2b04 	ldr.w	r2, [r3], #4
 8006968:	f841 2f04 	str.w	r2, [r1, #4]!
 800696c:	459c      	cmp	ip, r3
 800696e:	d8f9      	bhi.n	8006964 <__lshift+0xc0>
 8006970:	e7ea      	b.n	8006948 <__lshift+0xa4>
 8006972:	bf00      	nop
 8006974:	0800741f 	.word	0x0800741f
 8006978:	08007430 	.word	0x08007430

0800697c <__mcmp>:
 800697c:	690a      	ldr	r2, [r1, #16]
 800697e:	4603      	mov	r3, r0
 8006980:	6900      	ldr	r0, [r0, #16]
 8006982:	1a80      	subs	r0, r0, r2
 8006984:	b530      	push	{r4, r5, lr}
 8006986:	d10e      	bne.n	80069a6 <__mcmp+0x2a>
 8006988:	3314      	adds	r3, #20
 800698a:	3114      	adds	r1, #20
 800698c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800699c:	4295      	cmp	r5, r2
 800699e:	d003      	beq.n	80069a8 <__mcmp+0x2c>
 80069a0:	d205      	bcs.n	80069ae <__mcmp+0x32>
 80069a2:	f04f 30ff 	mov.w	r0, #4294967295
 80069a6:	bd30      	pop	{r4, r5, pc}
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d3f3      	bcc.n	8006994 <__mcmp+0x18>
 80069ac:	e7fb      	b.n	80069a6 <__mcmp+0x2a>
 80069ae:	2001      	movs	r0, #1
 80069b0:	e7f9      	b.n	80069a6 <__mcmp+0x2a>
	...

080069b4 <__mdiff>:
 80069b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	4689      	mov	r9, r1
 80069ba:	4606      	mov	r6, r0
 80069bc:	4611      	mov	r1, r2
 80069be:	4648      	mov	r0, r9
 80069c0:	4614      	mov	r4, r2
 80069c2:	f7ff ffdb 	bl	800697c <__mcmp>
 80069c6:	1e05      	subs	r5, r0, #0
 80069c8:	d112      	bne.n	80069f0 <__mdiff+0x3c>
 80069ca:	4629      	mov	r1, r5
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff fd63 	bl	8006498 <_Balloc>
 80069d2:	4602      	mov	r2, r0
 80069d4:	b928      	cbnz	r0, 80069e2 <__mdiff+0x2e>
 80069d6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ad4 <__mdiff+0x120>)
 80069d8:	f240 2137 	movw	r1, #567	@ 0x237
 80069dc:	483e      	ldr	r0, [pc, #248]	@ (8006ad8 <__mdiff+0x124>)
 80069de:	f000 fb65 	bl	80070ac <__assert_func>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e8:	4610      	mov	r0, r2
 80069ea:	b003      	add	sp, #12
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	bfbc      	itt	lt
 80069f2:	464b      	movlt	r3, r9
 80069f4:	46a1      	movlt	r9, r4
 80069f6:	4630      	mov	r0, r6
 80069f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069fc:	bfba      	itte	lt
 80069fe:	461c      	movlt	r4, r3
 8006a00:	2501      	movlt	r5, #1
 8006a02:	2500      	movge	r5, #0
 8006a04:	f7ff fd48 	bl	8006498 <_Balloc>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	b918      	cbnz	r0, 8006a14 <__mdiff+0x60>
 8006a0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <__mdiff+0x120>)
 8006a0e:	f240 2145 	movw	r1, #581	@ 0x245
 8006a12:	e7e3      	b.n	80069dc <__mdiff+0x28>
 8006a14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a18:	6926      	ldr	r6, [r4, #16]
 8006a1a:	60c5      	str	r5, [r0, #12]
 8006a1c:	f109 0310 	add.w	r3, r9, #16
 8006a20:	f109 0514 	add.w	r5, r9, #20
 8006a24:	f104 0e14 	add.w	lr, r4, #20
 8006a28:	f100 0b14 	add.w	fp, r0, #20
 8006a2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	46d9      	mov	r9, fp
 8006a38:	f04f 0c00 	mov.w	ip, #0
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	fa1f f38a 	uxth.w	r3, sl
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	b283      	uxth	r3, r0
 8006a50:	1acb      	subs	r3, r1, r3
 8006a52:	0c00      	lsrs	r0, r0, #16
 8006a54:	4463      	add	r3, ip
 8006a56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a64:	4576      	cmp	r6, lr
 8006a66:	f849 3b04 	str.w	r3, [r9], #4
 8006a6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a6e:	d8e5      	bhi.n	8006a3c <__mdiff+0x88>
 8006a70:	1b33      	subs	r3, r6, r4
 8006a72:	3b15      	subs	r3, #21
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	3415      	adds	r4, #21
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	42a6      	cmp	r6, r4
 8006a7e:	bf38      	it	cc
 8006a80:	2304      	movcc	r3, #4
 8006a82:	441d      	add	r5, r3
 8006a84:	445b      	add	r3, fp
 8006a86:	461e      	mov	r6, r3
 8006a88:	462c      	mov	r4, r5
 8006a8a:	4544      	cmp	r4, r8
 8006a8c:	d30e      	bcc.n	8006aac <__mdiff+0xf8>
 8006a8e:	f108 0103 	add.w	r1, r8, #3
 8006a92:	1b49      	subs	r1, r1, r5
 8006a94:	f021 0103 	bic.w	r1, r1, #3
 8006a98:	3d03      	subs	r5, #3
 8006a9a:	45a8      	cmp	r8, r5
 8006a9c:	bf38      	it	cc
 8006a9e:	2100      	movcc	r1, #0
 8006aa0:	440b      	add	r3, r1
 8006aa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006aa6:	b191      	cbz	r1, 8006ace <__mdiff+0x11a>
 8006aa8:	6117      	str	r7, [r2, #16]
 8006aaa:	e79d      	b.n	80069e8 <__mdiff+0x34>
 8006aac:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ab0:	46e6      	mov	lr, ip
 8006ab2:	0c08      	lsrs	r0, r1, #16
 8006ab4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ab8:	4471      	add	r1, lr
 8006aba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006abe:	b289      	uxth	r1, r1
 8006ac0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ac4:	f846 1b04 	str.w	r1, [r6], #4
 8006ac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006acc:	e7dd      	b.n	8006a8a <__mdiff+0xd6>
 8006ace:	3f01      	subs	r7, #1
 8006ad0:	e7e7      	b.n	8006aa2 <__mdiff+0xee>
 8006ad2:	bf00      	nop
 8006ad4:	0800741f 	.word	0x0800741f
 8006ad8:	08007430 	.word	0x08007430

08006adc <__d2b>:
 8006adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	460f      	mov	r7, r1
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	ec59 8b10 	vmov	r8, r9, d0
 8006ae8:	4616      	mov	r6, r2
 8006aea:	f7ff fcd5 	bl	8006498 <_Balloc>
 8006aee:	4604      	mov	r4, r0
 8006af0:	b930      	cbnz	r0, 8006b00 <__d2b+0x24>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b23      	ldr	r3, [pc, #140]	@ (8006b84 <__d2b+0xa8>)
 8006af6:	4824      	ldr	r0, [pc, #144]	@ (8006b88 <__d2b+0xac>)
 8006af8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006afc:	f000 fad6 	bl	80070ac <__assert_func>
 8006b00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b08:	b10d      	cbz	r5, 8006b0e <__d2b+0x32>
 8006b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	f1b8 0300 	subs.w	r3, r8, #0
 8006b14:	d023      	beq.n	8006b5e <__d2b+0x82>
 8006b16:	4668      	mov	r0, sp
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	f7ff fd84 	bl	8006626 <__lo0bits>
 8006b1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b22:	b1d0      	cbz	r0, 8006b5a <__d2b+0x7e>
 8006b24:	f1c0 0320 	rsb	r3, r0, #32
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	40c2      	lsrs	r2, r0
 8006b30:	6163      	str	r3, [r4, #20]
 8006b32:	9201      	str	r2, [sp, #4]
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	61a3      	str	r3, [r4, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2201      	moveq	r2, #1
 8006b3e:	2202      	movne	r2, #2
 8006b40:	6122      	str	r2, [r4, #16]
 8006b42:	b1a5      	cbz	r5, 8006b6e <__d2b+0x92>
 8006b44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b48:	4405      	add	r5, r0
 8006b4a:	603d      	str	r5, [r7, #0]
 8006b4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b50:	6030      	str	r0, [r6, #0]
 8006b52:	4620      	mov	r0, r4
 8006b54:	b003      	add	sp, #12
 8006b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b5a:	6161      	str	r1, [r4, #20]
 8006b5c:	e7ea      	b.n	8006b34 <__d2b+0x58>
 8006b5e:	a801      	add	r0, sp, #4
 8006b60:	f7ff fd61 	bl	8006626 <__lo0bits>
 8006b64:	9b01      	ldr	r3, [sp, #4]
 8006b66:	6163      	str	r3, [r4, #20]
 8006b68:	3020      	adds	r0, #32
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	e7e8      	b.n	8006b40 <__d2b+0x64>
 8006b6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b76:	6038      	str	r0, [r7, #0]
 8006b78:	6918      	ldr	r0, [r3, #16]
 8006b7a:	f7ff fd35 	bl	80065e8 <__hi0bits>
 8006b7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b82:	e7e5      	b.n	8006b50 <__d2b+0x74>
 8006b84:	0800741f 	.word	0x0800741f
 8006b88:	08007430 	.word	0x08007430

08006b8c <__sfputc_r>:
 8006b8c:	6893      	ldr	r3, [r2, #8]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	b410      	push	{r4}
 8006b94:	6093      	str	r3, [r2, #8]
 8006b96:	da08      	bge.n	8006baa <__sfputc_r+0x1e>
 8006b98:	6994      	ldr	r4, [r2, #24]
 8006b9a:	42a3      	cmp	r3, r4
 8006b9c:	db01      	blt.n	8006ba2 <__sfputc_r+0x16>
 8006b9e:	290a      	cmp	r1, #10
 8006ba0:	d103      	bne.n	8006baa <__sfputc_r+0x1e>
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	f7fe bc0a 	b.w	80053be <__swbuf_r>
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	1c58      	adds	r0, r3, #1
 8006bae:	6010      	str	r0, [r2, #0]
 8006bb0:	7019      	strb	r1, [r3, #0]
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <__sfputs_r>:
 8006bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	460f      	mov	r7, r1
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	18d5      	adds	r5, r2, r3
 8006bc4:	42ac      	cmp	r4, r5
 8006bc6:	d101      	bne.n	8006bcc <__sfputs_r+0x12>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e007      	b.n	8006bdc <__sfputs_r+0x22>
 8006bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd0:	463a      	mov	r2, r7
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ffda 	bl	8006b8c <__sfputc_r>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d1f3      	bne.n	8006bc4 <__sfputs_r+0xa>
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006be0 <_vfiprintf_r>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	460d      	mov	r5, r1
 8006be6:	b09d      	sub	sp, #116	@ 0x74
 8006be8:	4614      	mov	r4, r2
 8006bea:	4698      	mov	r8, r3
 8006bec:	4606      	mov	r6, r0
 8006bee:	b118      	cbz	r0, 8006bf8 <_vfiprintf_r+0x18>
 8006bf0:	6a03      	ldr	r3, [r0, #32]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <_vfiprintf_r+0x18>
 8006bf4:	f7fe fafa 	bl	80051ec <__sinit>
 8006bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bfa:	07d9      	lsls	r1, r3, #31
 8006bfc:	d405      	bmi.n	8006c0a <_vfiprintf_r+0x2a>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	059a      	lsls	r2, r3, #22
 8006c02:	d402      	bmi.n	8006c0a <_vfiprintf_r+0x2a>
 8006c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c06:	f7fe fcec 	bl	80055e2 <__retarget_lock_acquire_recursive>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	d501      	bpl.n	8006c14 <_vfiprintf_r+0x34>
 8006c10:	692b      	ldr	r3, [r5, #16]
 8006c12:	b99b      	cbnz	r3, 8006c3c <_vfiprintf_r+0x5c>
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f7fe fc10 	bl	800543c <__swsetup_r>
 8006c1c:	b170      	cbz	r0, 8006c3c <_vfiprintf_r+0x5c>
 8006c1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c20:	07dc      	lsls	r4, r3, #31
 8006c22:	d504      	bpl.n	8006c2e <_vfiprintf_r+0x4e>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b01d      	add	sp, #116	@ 0x74
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	0598      	lsls	r0, r3, #22
 8006c32:	d4f7      	bmi.n	8006c24 <_vfiprintf_r+0x44>
 8006c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c36:	f7fe fcd5 	bl	80055e4 <__retarget_lock_release_recursive>
 8006c3a:	e7f3      	b.n	8006c24 <_vfiprintf_r+0x44>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c40:	2320      	movs	r3, #32
 8006c42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4a:	2330      	movs	r3, #48	@ 0x30
 8006c4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006dfc <_vfiprintf_r+0x21c>
 8006c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c54:	f04f 0901 	mov.w	r9, #1
 8006c58:	4623      	mov	r3, r4
 8006c5a:	469a      	mov	sl, r3
 8006c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c60:	b10a      	cbz	r2, 8006c66 <_vfiprintf_r+0x86>
 8006c62:	2a25      	cmp	r2, #37	@ 0x25
 8006c64:	d1f9      	bne.n	8006c5a <_vfiprintf_r+0x7a>
 8006c66:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6a:	d00b      	beq.n	8006c84 <_vfiprintf_r+0xa4>
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	4622      	mov	r2, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	4630      	mov	r0, r6
 8006c74:	f7ff ffa1 	bl	8006bba <__sfputs_r>
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f000 80a7 	beq.w	8006dcc <_vfiprintf_r+0x1ec>
 8006c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c80:	445a      	add	r2, fp
 8006c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c84:	f89a 3000 	ldrb.w	r3, [sl]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 809f 	beq.w	8006dcc <_vfiprintf_r+0x1ec>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f04f 32ff 	mov.w	r2, #4294967295
 8006c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c98:	f10a 0a01 	add.w	sl, sl, #1
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ca6:	4654      	mov	r4, sl
 8006ca8:	2205      	movs	r2, #5
 8006caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cae:	4853      	ldr	r0, [pc, #332]	@ (8006dfc <_vfiprintf_r+0x21c>)
 8006cb0:	f7f9 fa8e 	bl	80001d0 <memchr>
 8006cb4:	9a04      	ldr	r2, [sp, #16]
 8006cb6:	b9d8      	cbnz	r0, 8006cf0 <_vfiprintf_r+0x110>
 8006cb8:	06d1      	lsls	r1, r2, #27
 8006cba:	bf44      	itt	mi
 8006cbc:	2320      	movmi	r3, #32
 8006cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc2:	0713      	lsls	r3, r2, #28
 8006cc4:	bf44      	itt	mi
 8006cc6:	232b      	movmi	r3, #43	@ 0x2b
 8006cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd2:	d015      	beq.n	8006d00 <_vfiprintf_r+0x120>
 8006cd4:	9a07      	ldr	r2, [sp, #28]
 8006cd6:	4654      	mov	r4, sl
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f04f 0c0a 	mov.w	ip, #10
 8006cde:	4621      	mov	r1, r4
 8006ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce4:	3b30      	subs	r3, #48	@ 0x30
 8006ce6:	2b09      	cmp	r3, #9
 8006ce8:	d94b      	bls.n	8006d82 <_vfiprintf_r+0x1a2>
 8006cea:	b1b0      	cbz	r0, 8006d1a <_vfiprintf_r+0x13a>
 8006cec:	9207      	str	r2, [sp, #28]
 8006cee:	e014      	b.n	8006d1a <_vfiprintf_r+0x13a>
 8006cf0:	eba0 0308 	sub.w	r3, r0, r8
 8006cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	46a2      	mov	sl, r4
 8006cfe:	e7d2      	b.n	8006ca6 <_vfiprintf_r+0xc6>
 8006d00:	9b03      	ldr	r3, [sp, #12]
 8006d02:	1d19      	adds	r1, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	9103      	str	r1, [sp, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bfbb      	ittet	lt
 8006d0c:	425b      	neglt	r3, r3
 8006d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d12:	9307      	strge	r3, [sp, #28]
 8006d14:	9307      	strlt	r3, [sp, #28]
 8006d16:	bfb8      	it	lt
 8006d18:	9204      	strlt	r2, [sp, #16]
 8006d1a:	7823      	ldrb	r3, [r4, #0]
 8006d1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d1e:	d10a      	bne.n	8006d36 <_vfiprintf_r+0x156>
 8006d20:	7863      	ldrb	r3, [r4, #1]
 8006d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d24:	d132      	bne.n	8006d8c <_vfiprintf_r+0x1ac>
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	1d1a      	adds	r2, r3, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	9203      	str	r2, [sp, #12]
 8006d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d32:	3402      	adds	r4, #2
 8006d34:	9305      	str	r3, [sp, #20]
 8006d36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e0c <_vfiprintf_r+0x22c>
 8006d3a:	7821      	ldrb	r1, [r4, #0]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	4650      	mov	r0, sl
 8006d40:	f7f9 fa46 	bl	80001d0 <memchr>
 8006d44:	b138      	cbz	r0, 8006d56 <_vfiprintf_r+0x176>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	eba0 000a 	sub.w	r0, r0, sl
 8006d4c:	2240      	movs	r2, #64	@ 0x40
 8006d4e:	4082      	lsls	r2, r0
 8006d50:	4313      	orrs	r3, r2
 8006d52:	3401      	adds	r4, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5a:	4829      	ldr	r0, [pc, #164]	@ (8006e00 <_vfiprintf_r+0x220>)
 8006d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d60:	2206      	movs	r2, #6
 8006d62:	f7f9 fa35 	bl	80001d0 <memchr>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d03f      	beq.n	8006dea <_vfiprintf_r+0x20a>
 8006d6a:	4b26      	ldr	r3, [pc, #152]	@ (8006e04 <_vfiprintf_r+0x224>)
 8006d6c:	bb1b      	cbnz	r3, 8006db6 <_vfiprintf_r+0x1d6>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	3308      	adds	r3, #8
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7c:	443b      	add	r3, r7
 8006d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d80:	e76a      	b.n	8006c58 <_vfiprintf_r+0x78>
 8006d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d86:	460c      	mov	r4, r1
 8006d88:	2001      	movs	r0, #1
 8006d8a:	e7a8      	b.n	8006cde <_vfiprintf_r+0xfe>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	3401      	adds	r4, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	4619      	mov	r1, r3
 8006d94:	f04f 0c0a 	mov.w	ip, #10
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d9e:	3a30      	subs	r2, #48	@ 0x30
 8006da0:	2a09      	cmp	r2, #9
 8006da2:	d903      	bls.n	8006dac <_vfiprintf_r+0x1cc>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0c6      	beq.n	8006d36 <_vfiprintf_r+0x156>
 8006da8:	9105      	str	r1, [sp, #20]
 8006daa:	e7c4      	b.n	8006d36 <_vfiprintf_r+0x156>
 8006dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db0:	4604      	mov	r4, r0
 8006db2:	2301      	movs	r3, #1
 8006db4:	e7f0      	b.n	8006d98 <_vfiprintf_r+0x1b8>
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	462a      	mov	r2, r5
 8006dbc:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <_vfiprintf_r+0x228>)
 8006dbe:	a904      	add	r1, sp, #16
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7fd fdd1 	bl	8004968 <_printf_float>
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	1c78      	adds	r0, r7, #1
 8006dca:	d1d6      	bne.n	8006d7a <_vfiprintf_r+0x19a>
 8006dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dce:	07d9      	lsls	r1, r3, #31
 8006dd0:	d405      	bmi.n	8006dde <_vfiprintf_r+0x1fe>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	059a      	lsls	r2, r3, #22
 8006dd6:	d402      	bmi.n	8006dde <_vfiprintf_r+0x1fe>
 8006dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dda:	f7fe fc03 	bl	80055e4 <__retarget_lock_release_recursive>
 8006dde:	89ab      	ldrh	r3, [r5, #12]
 8006de0:	065b      	lsls	r3, r3, #25
 8006de2:	f53f af1f 	bmi.w	8006c24 <_vfiprintf_r+0x44>
 8006de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006de8:	e71e      	b.n	8006c28 <_vfiprintf_r+0x48>
 8006dea:	ab03      	add	r3, sp, #12
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	462a      	mov	r2, r5
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <_vfiprintf_r+0x228>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7fe f84f 	bl	8004e98 <_printf_i>
 8006dfa:	e7e4      	b.n	8006dc6 <_vfiprintf_r+0x1e6>
 8006dfc:	08007489 	.word	0x08007489
 8006e00:	08007493 	.word	0x08007493
 8006e04:	08004969 	.word	0x08004969
 8006e08:	08006bbb 	.word	0x08006bbb
 8006e0c:	0800748f 	.word	0x0800748f

08006e10 <__sflush_r>:
 8006e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e18:	0716      	lsls	r6, r2, #28
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	d454      	bmi.n	8006eca <__sflush_r+0xba>
 8006e20:	684b      	ldr	r3, [r1, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dc02      	bgt.n	8006e2c <__sflush_r+0x1c>
 8006e26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dd48      	ble.n	8006ebe <__sflush_r+0xae>
 8006e2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	d045      	beq.n	8006ebe <__sflush_r+0xae>
 8006e32:	2300      	movs	r3, #0
 8006e34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e38:	682f      	ldr	r7, [r5, #0]
 8006e3a:	6a21      	ldr	r1, [r4, #32]
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	d030      	beq.n	8006ea2 <__sflush_r+0x92>
 8006e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	0759      	lsls	r1, r3, #29
 8006e46:	d505      	bpl.n	8006e54 <__sflush_r+0x44>
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e4e:	b10b      	cbz	r3, 8006e54 <__sflush_r+0x44>
 8006e50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	47b0      	blx	r6
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	d106      	bne.n	8006e72 <__sflush_r+0x62>
 8006e64:	6829      	ldr	r1, [r5, #0]
 8006e66:	291d      	cmp	r1, #29
 8006e68:	d82b      	bhi.n	8006ec2 <__sflush_r+0xb2>
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006f14 <__sflush_r+0x104>)
 8006e6c:	40ca      	lsrs	r2, r1
 8006e6e:	07d6      	lsls	r6, r2, #31
 8006e70:	d527      	bpl.n	8006ec2 <__sflush_r+0xb2>
 8006e72:	2200      	movs	r2, #0
 8006e74:	6062      	str	r2, [r4, #4]
 8006e76:	04d9      	lsls	r1, r3, #19
 8006e78:	6922      	ldr	r2, [r4, #16]
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	d504      	bpl.n	8006e88 <__sflush_r+0x78>
 8006e7e:	1c42      	adds	r2, r0, #1
 8006e80:	d101      	bne.n	8006e86 <__sflush_r+0x76>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b903      	cbnz	r3, 8006e88 <__sflush_r+0x78>
 8006e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e8a:	602f      	str	r7, [r5, #0]
 8006e8c:	b1b9      	cbz	r1, 8006ebe <__sflush_r+0xae>
 8006e8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e92:	4299      	cmp	r1, r3
 8006e94:	d002      	beq.n	8006e9c <__sflush_r+0x8c>
 8006e96:	4628      	mov	r0, r5
 8006e98:	f7ff f9fe 	bl	8006298 <_free_r>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ea0:	e00d      	b.n	8006ebe <__sflush_r+0xae>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b0      	blx	r6
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	1c50      	adds	r0, r2, #1
 8006eac:	d1c9      	bne.n	8006e42 <__sflush_r+0x32>
 8006eae:	682b      	ldr	r3, [r5, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0c6      	beq.n	8006e42 <__sflush_r+0x32>
 8006eb4:	2b1d      	cmp	r3, #29
 8006eb6:	d001      	beq.n	8006ebc <__sflush_r+0xac>
 8006eb8:	2b16      	cmp	r3, #22
 8006eba:	d11e      	bne.n	8006efa <__sflush_r+0xea>
 8006ebc:	602f      	str	r7, [r5, #0]
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e022      	b.n	8006f08 <__sflush_r+0xf8>
 8006ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	e01b      	b.n	8006f02 <__sflush_r+0xf2>
 8006eca:	690f      	ldr	r7, [r1, #16]
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	d0f6      	beq.n	8006ebe <__sflush_r+0xae>
 8006ed0:	0793      	lsls	r3, r2, #30
 8006ed2:	680e      	ldr	r6, [r1, #0]
 8006ed4:	bf08      	it	eq
 8006ed6:	694b      	ldreq	r3, [r1, #20]
 8006ed8:	600f      	str	r7, [r1, #0]
 8006eda:	bf18      	it	ne
 8006edc:	2300      	movne	r3, #0
 8006ede:	eba6 0807 	sub.w	r8, r6, r7
 8006ee2:	608b      	str	r3, [r1, #8]
 8006ee4:	f1b8 0f00 	cmp.w	r8, #0
 8006ee8:	dde9      	ble.n	8006ebe <__sflush_r+0xae>
 8006eea:	6a21      	ldr	r1, [r4, #32]
 8006eec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eee:	4643      	mov	r3, r8
 8006ef0:	463a      	mov	r2, r7
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b0      	blx	r6
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	dc08      	bgt.n	8006f0c <__sflush_r+0xfc>
 8006efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f0c:	4407      	add	r7, r0
 8006f0e:	eba8 0800 	sub.w	r8, r8, r0
 8006f12:	e7e7      	b.n	8006ee4 <__sflush_r+0xd4>
 8006f14:	20400001 	.word	0x20400001

08006f18 <_fflush_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	690b      	ldr	r3, [r1, #16]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b913      	cbnz	r3, 8006f28 <_fflush_r+0x10>
 8006f22:	2500      	movs	r5, #0
 8006f24:	4628      	mov	r0, r5
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	b118      	cbz	r0, 8006f32 <_fflush_r+0x1a>
 8006f2a:	6a03      	ldr	r3, [r0, #32]
 8006f2c:	b90b      	cbnz	r3, 8006f32 <_fflush_r+0x1a>
 8006f2e:	f7fe f95d 	bl	80051ec <__sinit>
 8006f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f3      	beq.n	8006f22 <_fflush_r+0xa>
 8006f3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f3c:	07d0      	lsls	r0, r2, #31
 8006f3e:	d404      	bmi.n	8006f4a <_fflush_r+0x32>
 8006f40:	0599      	lsls	r1, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_fflush_r+0x32>
 8006f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f46:	f7fe fb4c 	bl	80055e2 <__retarget_lock_acquire_recursive>
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f7ff ff5f 	bl	8006e10 <__sflush_r>
 8006f52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f54:	07da      	lsls	r2, r3, #31
 8006f56:	4605      	mov	r5, r0
 8006f58:	d4e4      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	059b      	lsls	r3, r3, #22
 8006f5e:	d4e1      	bmi.n	8006f24 <_fflush_r+0xc>
 8006f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f62:	f7fe fb3f 	bl	80055e4 <__retarget_lock_release_recursive>
 8006f66:	e7dd      	b.n	8006f24 <_fflush_r+0xc>

08006f68 <__swhatbuf_r>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	2900      	cmp	r1, #0
 8006f72:	b096      	sub	sp, #88	@ 0x58
 8006f74:	4615      	mov	r5, r2
 8006f76:	461e      	mov	r6, r3
 8006f78:	da0d      	bge.n	8006f96 <__swhatbuf_r+0x2e>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	bf14      	ite	ne
 8006f86:	2340      	movne	r3, #64	@ 0x40
 8006f88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	6031      	str	r1, [r6, #0]
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	b016      	add	sp, #88	@ 0x58
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	466a      	mov	r2, sp
 8006f98:	f000 f848 	bl	800702c <_fstat_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	dbec      	blt.n	8006f7a <__swhatbuf_r+0x12>
 8006fa0:	9901      	ldr	r1, [sp, #4]
 8006fa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006faa:	4259      	negs	r1, r3
 8006fac:	4159      	adcs	r1, r3
 8006fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fb2:	e7eb      	b.n	8006f8c <__swhatbuf_r+0x24>

08006fb4 <__smakebuf_r>:
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb8:	079d      	lsls	r5, r3, #30
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	d507      	bpl.n	8006fd0 <__smakebuf_r+0x1c>
 8006fc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	b003      	add	sp, #12
 8006fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd0:	ab01      	add	r3, sp, #4
 8006fd2:	466a      	mov	r2, sp
 8006fd4:	f7ff ffc8 	bl	8006f68 <__swhatbuf_r>
 8006fd8:	9f00      	ldr	r7, [sp, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4639      	mov	r1, r7
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff f9ce 	bl	8006380 <_malloc_r>
 8006fe4:	b948      	cbnz	r0, 8006ffa <__smakebuf_r+0x46>
 8006fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fea:	059a      	lsls	r2, r3, #22
 8006fec:	d4ee      	bmi.n	8006fcc <__smakebuf_r+0x18>
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	e7e2      	b.n	8006fc0 <__smakebuf_r+0xc>
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	6020      	str	r0, [r4, #0]
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800700a:	b15b      	cbz	r3, 8007024 <__smakebuf_r+0x70>
 800700c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007010:	4630      	mov	r0, r6
 8007012:	f000 f81d 	bl	8007050 <_isatty_r>
 8007016:	b128      	cbz	r0, 8007024 <__smakebuf_r+0x70>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	431d      	orrs	r5, r3
 8007028:	81a5      	strh	r5, [r4, #12]
 800702a:	e7cf      	b.n	8006fcc <__smakebuf_r+0x18>

0800702c <_fstat_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	@ (800704c <_fstat_r+0x20>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	f7fb f973 	bl	8002324 <_fstat>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d102      	bne.n	8007048 <_fstat_r+0x1c>
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	b103      	cbz	r3, 8007048 <_fstat_r+0x1c>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	200003ec 	.word	0x200003ec

08007050 <_isatty_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	@ (800706c <_isatty_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fb f972 	bl	8002344 <_isatty>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_isatty_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_isatty_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	200003ec 	.word	0x200003ec

08007070 <_sbrk_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	@ (800708c <_sbrk_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7fb f97a 	bl	8002374 <_sbrk>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_sbrk_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_sbrk_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	200003ec 	.word	0x200003ec

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <__assert_func>:
 80070ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ae:	4614      	mov	r4, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <__assert_func+0x2c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4605      	mov	r5, r0
 80070b8:	68d8      	ldr	r0, [r3, #12]
 80070ba:	b14c      	cbz	r4, 80070d0 <__assert_func+0x24>
 80070bc:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <__assert_func+0x30>)
 80070be:	9100      	str	r1, [sp, #0]
 80070c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070c4:	4906      	ldr	r1, [pc, #24]	@ (80070e0 <__assert_func+0x34>)
 80070c6:	462b      	mov	r3, r5
 80070c8:	f000 f842 	bl	8007150 <fiprintf>
 80070cc:	f000 f852 	bl	8007174 <abort>
 80070d0:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <__assert_func+0x38>)
 80070d2:	461c      	mov	r4, r3
 80070d4:	e7f3      	b.n	80070be <__assert_func+0x12>
 80070d6:	bf00      	nop
 80070d8:	20000018 	.word	0x20000018
 80070dc:	080074a4 	.word	0x080074a4
 80070e0:	080074b1 	.word	0x080074b1
 80070e4:	080074df 	.word	0x080074df

080070e8 <_calloc_r>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	fba1 5402 	umull	r5, r4, r1, r2
 80070ee:	b934      	cbnz	r4, 80070fe <_calloc_r+0x16>
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7ff f945 	bl	8006380 <_malloc_r>
 80070f6:	4606      	mov	r6, r0
 80070f8:	b928      	cbnz	r0, 8007106 <_calloc_r+0x1e>
 80070fa:	4630      	mov	r0, r6
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	220c      	movs	r2, #12
 8007100:	6002      	str	r2, [r0, #0]
 8007102:	2600      	movs	r6, #0
 8007104:	e7f9      	b.n	80070fa <_calloc_r+0x12>
 8007106:	462a      	mov	r2, r5
 8007108:	4621      	mov	r1, r4
 800710a:	f7fe f9ed 	bl	80054e8 <memset>
 800710e:	e7f4      	b.n	80070fa <_calloc_r+0x12>

08007110 <__ascii_mbtowc>:
 8007110:	b082      	sub	sp, #8
 8007112:	b901      	cbnz	r1, 8007116 <__ascii_mbtowc+0x6>
 8007114:	a901      	add	r1, sp, #4
 8007116:	b142      	cbz	r2, 800712a <__ascii_mbtowc+0x1a>
 8007118:	b14b      	cbz	r3, 800712e <__ascii_mbtowc+0x1e>
 800711a:	7813      	ldrb	r3, [r2, #0]
 800711c:	600b      	str	r3, [r1, #0]
 800711e:	7812      	ldrb	r2, [r2, #0]
 8007120:	1e10      	subs	r0, r2, #0
 8007122:	bf18      	it	ne
 8007124:	2001      	movne	r0, #1
 8007126:	b002      	add	sp, #8
 8007128:	4770      	bx	lr
 800712a:	4610      	mov	r0, r2
 800712c:	e7fb      	b.n	8007126 <__ascii_mbtowc+0x16>
 800712e:	f06f 0001 	mvn.w	r0, #1
 8007132:	e7f8      	b.n	8007126 <__ascii_mbtowc+0x16>

08007134 <__ascii_wctomb>:
 8007134:	4603      	mov	r3, r0
 8007136:	4608      	mov	r0, r1
 8007138:	b141      	cbz	r1, 800714c <__ascii_wctomb+0x18>
 800713a:	2aff      	cmp	r2, #255	@ 0xff
 800713c:	d904      	bls.n	8007148 <__ascii_wctomb+0x14>
 800713e:	228a      	movs	r2, #138	@ 0x8a
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	4770      	bx	lr
 8007148:	700a      	strb	r2, [r1, #0]
 800714a:	2001      	movs	r0, #1
 800714c:	4770      	bx	lr
	...

08007150 <fiprintf>:
 8007150:	b40e      	push	{r1, r2, r3}
 8007152:	b503      	push	{r0, r1, lr}
 8007154:	4601      	mov	r1, r0
 8007156:	ab03      	add	r3, sp, #12
 8007158:	4805      	ldr	r0, [pc, #20]	@ (8007170 <fiprintf+0x20>)
 800715a:	f853 2b04 	ldr.w	r2, [r3], #4
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	f7ff fd3d 	bl	8006be0 <_vfiprintf_r>
 8007166:	b002      	add	sp, #8
 8007168:	f85d eb04 	ldr.w	lr, [sp], #4
 800716c:	b003      	add	sp, #12
 800716e:	4770      	bx	lr
 8007170:	20000018 	.word	0x20000018

08007174 <abort>:
 8007174:	b508      	push	{r3, lr}
 8007176:	2006      	movs	r0, #6
 8007178:	f000 f82c 	bl	80071d4 <raise>
 800717c:	2001      	movs	r0, #1
 800717e:	f7fb f89d 	bl	80022bc <_exit>

08007182 <_raise_r>:
 8007182:	291f      	cmp	r1, #31
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d904      	bls.n	8007196 <_raise_r+0x14>
 800718c:	2316      	movs	r3, #22
 800718e:	6003      	str	r3, [r0, #0]
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007198:	b112      	cbz	r2, 80071a0 <_raise_r+0x1e>
 800719a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800719e:	b94b      	cbnz	r3, 80071b4 <_raise_r+0x32>
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f831 	bl	8007208 <_getpid_r>
 80071a6:	4622      	mov	r2, r4
 80071a8:	4601      	mov	r1, r0
 80071aa:	4628      	mov	r0, r5
 80071ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b0:	f000 b818 	b.w	80071e4 <_kill_r>
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d00a      	beq.n	80071ce <_raise_r+0x4c>
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	d103      	bne.n	80071c4 <_raise_r+0x42>
 80071bc:	2316      	movs	r3, #22
 80071be:	6003      	str	r3, [r0, #0]
 80071c0:	2001      	movs	r0, #1
 80071c2:	e7e7      	b.n	8007194 <_raise_r+0x12>
 80071c4:	2100      	movs	r1, #0
 80071c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071ca:	4620      	mov	r0, r4
 80071cc:	4798      	blx	r3
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7e0      	b.n	8007194 <_raise_r+0x12>
	...

080071d4 <raise>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	@ (80071e0 <raise+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7ff bfd2 	b.w	8007182 <_raise_r>
 80071de:	bf00      	nop
 80071e0:	20000018 	.word	0x20000018

080071e4 <_kill_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	@ (8007204 <_kill_r+0x20>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	f7fb f853 	bl	800229c <_kill>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d102      	bne.n	8007200 <_kill_r+0x1c>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	b103      	cbz	r3, 8007200 <_kill_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd38      	pop	{r3, r4, r5, pc}
 8007202:	bf00      	nop
 8007204:	200003ec 	.word	0x200003ec

08007208 <_getpid_r>:
 8007208:	f7fb b840 	b.w	800228c <_getpid>

0800720c <_init>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr

08007218 <_fini>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr
