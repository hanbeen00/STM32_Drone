
1-3. Debug UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08006298  08006298  00007298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006644  08006644  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800664c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000174  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000348  20000348  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d8c  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4a  00000000  00000000  0000ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  00011de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067d  00000000  00000000  000126d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022236  00000000  00000000  00012d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f2c  00000000  00000000  00034f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c65b9  00000000  00000000  0003eeaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105468  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003314  00000000  00000000  001054ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  001087c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800627c 	.word	0x0800627c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800627c 	.word	0x0800627c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000fda:	2080      	movs	r0, #128	@ 0x80
 8000fdc:	f7ff ffda 	bl	8000f94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000fe0:	2004      	movs	r0, #4
 8000fe2:	f7ff ffd7 	bl	8000f94 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f7ff ffd4 	bl	8000f94 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 8000fec:	2107      	movs	r1, #7
 8000fee:	480b      	ldr	r0, [pc, #44]	@ (800101c <MX_GPIO_Init+0x58>)
 8000ff0:	f7ff ffc0 	bl	8000f74 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <MX_GPIO_Init+0x58>)
 800100e:	f001 fd0c 	bl	8002a2a <LL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020800 	.word	0x40020800

08001020 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a1a      	ldr	r2, [r3, #32]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	621a      	str	r2, [r3, #32]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	621a      	str	r2, [r3, #32]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001086:	b480      	push	{r7}
 8001088:	b089      	sub	sp, #36	@ 0x24
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	330c      	adds	r3, #12
 8001092:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	e853 3f00 	ldrex	r3, [r3]
 800109a:	60bb      	str	r3, [r7, #8]
   return(result);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	330c      	adds	r3, #12
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	61ba      	str	r2, [r7, #24]
 80010ac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010ae:	6979      	ldr	r1, [r7, #20]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	e841 2300 	strex	r3, r2, [r1]
 80010b6:	613b      	str	r3, [r7, #16]
   return(result);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e7      	bne.n	800108e <LL_USART_EnableIT_RXNE+0x8>
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3724      	adds	r7, #36	@ 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80010d8:	78fa      	ldrb	r2, [r7, #3]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4013      	ands	r3, r2
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43d9      	mvns	r1, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	400b      	ands	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_write>:
/* USER CODE BEGIN PTD */

//표준 출력(예: printf)에서 출력된 문자열을 USART6를 통해 UART로 전송하는 역할
//_write 함수는 C 라이브러리의 printf 함수와 연결되어 있으며, 이 함수가 호출될 때마다 USART를 통해 데이터를 전송
int _write(int file, char* p, int len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	//printf내의 문자열 UART로 전송하여 출력
	for(int i=0;i<len;i++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00d      	b.n	800114a <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4808      	ldr	r0, [pc, #32]	@ (800115c <_write+0x40>)
 800113a:	f7ff ffc7 	bl	80010cc <LL_USART_TransmitData8>
		HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fdba 	bl	8001cb8 <HAL_Delay>
	for(int i=0;i<len;i++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbed      	blt.n	800112e <_write+0x12>
	}
}
 8001152:	bf00      	nop
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40011400 	.word	0x40011400

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int count = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	float f = 1.234;
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <main+0x100>)
 800116c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fd31 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f883 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f7ff ff25 	bl	8000fc4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800117a:	f000 fb4f 	bl	800181c <MX_TIM3_Init>

  //UART 초기화
  MX_USART6_UART_Init();
 800117e:	f000 fc9f 	bl	8001ac0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // 타이머로 PWM신호 만들어서 패시브 부저 출력하기
  LL_TIM_EnableCounter(TIM3);
 8001182:	4838      	ldr	r0, [pc, #224]	@ (8001264 <main+0x104>)
 8001184:	f7ff ff4c 	bl	8001020 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4835      	ldr	r0, [pc, #212]	@ (8001264 <main+0x104>)
 800118e:	f7ff ff57 	bl	8001040 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8001192:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <main+0x104>)
 8001194:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001198:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 800119a:	2064      	movs	r0, #100	@ 0x64
 800119c:	f000 fd8c 	bl	8001cb8 <HAL_Delay>
  TIM3->PSC = 1500;
 80011a0:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <main+0x104>)
 80011a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80011a8:	2064      	movs	r0, #100	@ 0x64
 80011aa:	f000 fd85 	bl	8001cb8 <HAL_Delay>
  TIM3->PSC = 1000;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <main+0x104>)
 80011b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80011b6:	2064      	movs	r0, #100	@ 0x64
 80011b8:	f000 fd7e 	bl	8001cb8 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80011bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c0:	4828      	ldr	r0, [pc, #160]	@ (8001264 <main+0x104>)
 80011c2:	f7ff ff4e 	bl	8001062 <LL_TIM_CC_DisableChannel>

  //UART 수신완료 인터럽트 활성화
  LL_USART_EnableIT_RXNE(USART6);
 80011c6:	4828      	ldr	r0, [pc, #160]	@ (8001268 <main+0x108>)
 80011c8:	f7ff ff5d 	bl	8001086 <LL_USART_EnableIT_RXNE>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //UART수신 완료 후 데이터 가져왔으면
	  if(uart6_rx_flag == 1)
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <main+0x10c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d1fb      	bne.n	80011cc <main+0x6c>
	  {
		  //수신 플래그 초기화
		  uart6_rx_flag = 0;
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <main+0x10c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
		  //수신 받은 데이터 UART 통해 전송 (echo)
		  LL_USART_TransmitData8(USART6, uart6_rx_data);
 80011da:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <main+0x110>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4821      	ldr	r0, [pc, #132]	@ (8001268 <main+0x108>)
 80011e2:	f7ff ff73 	bl	80010cc <LL_USART_TransmitData8>

		  switch(uart6_rx_data)
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <main+0x110>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b32      	cmp	r3, #50	@ 0x32
 80011ec:	d02d      	beq.n	800124a <main+0xea>
 80011ee:	2b32      	cmp	r3, #50	@ 0x32
 80011f0:	dcec      	bgt.n	80011cc <main+0x6c>
 80011f2:	2b30      	cmp	r3, #48	@ 0x30
 80011f4:	d002      	beq.n	80011fc <main+0x9c>
 80011f6:	2b31      	cmp	r3, #49	@ 0x31
 80011f8:	d021      	beq.n	800123e <main+0xde>
 80011fa:	e02c      	b.n	8001256 <main+0xf6>
		  {
		  case '0':
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 );
 80011fc:	2107      	movs	r1, #7
 80011fe:	481d      	ldr	r0, [pc, #116]	@ (8001274 <main+0x114>)
 8001200:	f7ff ff73 	bl	80010ea <LL_GPIO_TogglePin>
			  printf("%d %f\n",count++, f+=0.001);
 8001204:	687c      	ldr	r4, [r7, #4]
 8001206:	1c63      	adds	r3, r4, #1
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	a311      	add	r3, pc, #68	@ (adr r3, 8001258 <main+0xf8>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f839 	bl	800028c <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcc1 	bl	8000ba8 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4621      	mov	r1, r4
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <main+0x118>)
 8001238:	f003 f8a4 	bl	8004384 <iprintf>
			  break;
 800123c:	e00b      	b.n	8001256 <main+0xf6>
		  case '1':
			  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800123e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001242:	4808      	ldr	r0, [pc, #32]	@ (8001264 <main+0x104>)
 8001244:	f7ff fefc 	bl	8001040 <LL_TIM_CC_EnableChannel>
			  break;
 8001248:	e005      	b.n	8001256 <main+0xf6>
		  case '2':
			  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800124a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <main+0x104>)
 8001250:	f7ff ff07 	bl	8001062 <LL_TIM_CC_DisableChannel>
			  break;
 8001254:	bf00      	nop
	  if(uart6_rx_flag == 1)
 8001256:	e7b9      	b.n	80011cc <main+0x6c>
 8001258:	d2f1a9fc 	.word	0xd2f1a9fc
 800125c:	3f50624d 	.word	0x3f50624d
 8001260:	3f9df3b6 	.word	0x3f9df3b6
 8001264:	40000400 	.word	0x40000400
 8001268:	40011400 	.word	0x40011400
 800126c:	200001f0 	.word	0x200001f0
 8001270:	200001f1 	.word	0x200001f1
 8001274:	40020800 	.word	0x40020800
 8001278:	08006298 	.word	0x08006298

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	2230      	movs	r2, #48	@ 0x30
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f003 f8cf 	bl	800442e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	4a27      	ldr	r2, [pc, #156]	@ (8001348 <SystemClock_Config+0xcc>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b0:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <SystemClock_Config+0xd0>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f0:	23a8      	movs	r3, #168	@ 0xa8
 80012f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fde3 	bl	8001ecc <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800130c:	f000 f820 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800131c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2105      	movs	r1, #5
 800132e:	4618      	mov	r0, r3
 8001330:	f001 f844 	bl	80023bc <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800133a:	f000 f809 	bl	8001350 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	@ 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <Error_Handler+0x8>

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <HAL_MspInit+0x4c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a08      	ldr	r2, [pc, #32]	@ (80013a8 <HAL_MspInit+0x4c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <LL_USART_IsActiveFlag_RXNE>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b20      	cmp	r3, #32
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_USART_ClearFlag_RXNE>:
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f06f 0220 	mvn.w	r2, #32
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_USART_ReceiveData8>:
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	b2db      	uxtb	r3, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <NMI_Handler+0x4>

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <UsageFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 fc0b 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	//UART6 인터럽트 실행되면 이쪽으로 이동
	//수신완료 인터럽트면 내부 실행
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 800146c:	480a      	ldr	r0, [pc, #40]	@ (8001498 <USART6_IRQHandler+0x30>)
 800146e:	f7ff ff9d 	bl	80013ac <LL_USART_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <USART6_IRQHandler+0x2a>
	{
		//수신완료 플래그 초기화
		LL_USART_ClearFlag_RXNE(USART6);
 8001478:	4807      	ldr	r0, [pc, #28]	@ (8001498 <USART6_IRQHandler+0x30>)
 800147a:	f7ff ffaa 	bl	80013d2 <LL_USART_ClearFlag_RXNE>
		//수신데이터 가져오기
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <USART6_IRQHandler+0x30>)
 8001480:	f7ff ffb5 	bl	80013ee <LL_USART_ReceiveData8>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <USART6_IRQHandler+0x34>)
 800148a:	701a      	strb	r2, [r3, #0]
		//main함수에서 사용할 수신 플래그 변경
		uart6_rx_flag = 1;
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <USART6_IRQHandler+0x38>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40011400 	.word	0x40011400
 800149c:	200001f1 	.word	0x200001f1
 80014a0:	200001f0 	.word	0x200001f0

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014be:	f003 f809 	bl	80044d4 <__errno>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2216      	movs	r2, #22
 80014c6:	601a      	str	r2, [r3, #0]
  return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ffe7 	bl	80014b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e6:	bf00      	nop
 80014e8:	e7fd      	b.n	80014e6 <_exit+0x12>

080014ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e00a      	b.n	8001512 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fc:	f3af 8000 	nop.w
 8001500:	4601      	mov	r1, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf0      	blt.n	80014fc <_read+0x12>
  }

  return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154c:	605a      	str	r2, [r3, #4]
  return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_isatty>:

int _isatty(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f002 ff8a 	bl	80044d4 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20020000 	.word	0x20020000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200001f4 	.word	0x200001f4
 80015f4:	20000348 	.word	0x20000348

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <LL_TIM_EnableARRPreload>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d01c      	beq.n	8001686 <LL_TIM_OC_EnableFast+0x4a>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d017      	beq.n	8001682 <LL_TIM_OC_EnableFast+0x46>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b10      	cmp	r3, #16
 8001656:	d012      	beq.n	800167e <LL_TIM_OC_EnableFast+0x42>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b40      	cmp	r3, #64	@ 0x40
 800165c:	d00d      	beq.n	800167a <LL_TIM_OC_EnableFast+0x3e>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001664:	d007      	beq.n	8001676 <LL_TIM_OC_EnableFast+0x3a>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800166c:	d101      	bne.n	8001672 <LL_TIM_OC_EnableFast+0x36>
 800166e:	2305      	movs	r3, #5
 8001670:	e00a      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 8001672:	2306      	movs	r3, #6
 8001674:	e008      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_TIM_OC_EnableFast+0x4c>
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3318      	adds	r3, #24
 800168e:	4619      	mov	r1, r3
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <LL_TIM_OC_EnableFast+0x80>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	440b      	add	r3, r1
 8001698:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <LL_TIM_OC_EnableFast+0x84>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	4619      	mov	r1, r3
 80016a6:	2304      	movs	r3, #4
 80016a8:	408b      	lsls	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	601a      	str	r2, [r3, #0]

}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	080062b8 	.word	0x080062b8
 80016c0:	080062c0 	.word	0x080062c0

080016c4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d01c      	beq.n	800170e <LL_TIM_OC_EnablePreload+0x4a>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d017      	beq.n	800170a <LL_TIM_OC_EnablePreload+0x46>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d012      	beq.n	8001706 <LL_TIM_OC_EnablePreload+0x42>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b40      	cmp	r3, #64	@ 0x40
 80016e4:	d00d      	beq.n	8001702 <LL_TIM_OC_EnablePreload+0x3e>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ec:	d007      	beq.n	80016fe <LL_TIM_OC_EnablePreload+0x3a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f4:	d101      	bne.n	80016fa <LL_TIM_OC_EnablePreload+0x36>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e00a      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e008      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_TIM_OC_EnablePreload+0x4c>
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3318      	adds	r3, #24
 8001716:	4619      	mov	r1, r3
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LL_TIM_OC_EnablePreload+0x80>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	440b      	add	r3, r1
 8001720:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <LL_TIM_OC_EnablePreload+0x84>)
 800172a:	5ccb      	ldrb	r3, [r1, r3]
 800172c:	4619      	mov	r1, r3
 800172e:	2308      	movs	r3, #8
 8001730:	408b      	lsls	r3, r1
 8001732:	431a      	orrs	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	080062b8 	.word	0x080062b8
 8001748:	080062c0 	.word	0x080062c0

0800174c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800175e:	f023 0307 	bic.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	609a      	str	r2, [r3, #8]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_AHB1_GRP1_EnableClock>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017c8:	4907      	ldr	r1, [pc, #28]	@ (80017e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4013      	ands	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40023800 	.word	0x40023800

080017ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017f8:	4907      	ldr	r1, [pc, #28]	@ (8001818 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4013      	ands	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40023800 	.word	0x40023800

0800181c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001822:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2220      	movs	r2, #32
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fdf7 	bl	800442e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001850:	2002      	movs	r0, #2
 8001852:	f7ff ffcb 	bl	80017ec <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001856:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800185a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8001860:	2314      	movs	r3, #20
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001868:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800186c:	4619      	mov	r1, r3
 800186e:	4822      	ldr	r0, [pc, #136]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 8001870:	f001 fb08 	bl	8002e84 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001874:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 8001876:	f7ff fed1 	bl	800161c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800187a:	2100      	movs	r1, #0
 800187c:	481e      	ldr	r0, [pc, #120]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 800187e:	f7ff ff65 	bl	800174c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001886:	481c      	ldr	r0, [pc, #112]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 8001888:	f7ff ff1c 	bl	80016c4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800188c:	2360      	movs	r3, #96	@ 0x60
 800188e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8001898:	230a      	movs	r3, #10
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	461a      	mov	r2, r3
 80018a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018aa:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 80018ac:	f001 fb84 	bl	8002fb8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80018b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b4:	4810      	ldr	r0, [pc, #64]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 80018b6:	f7ff fec1 	bl	800163c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80018ba:	2100      	movs	r1, #0
 80018bc:	480e      	ldr	r0, [pc, #56]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 80018be:	f7ff ff5a 	bl	8001776 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80018c2:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <MX_TIM3_Init+0xdc>)
 80018c4:	f7ff ff6a 	bl	800179c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018c8:	2002      	movs	r0, #2
 80018ca:	f7ff ff77 	bl	80017bc <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80018ce:	2302      	movs	r3, #2
 80018d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018d2:	2302      	movs	r3, #2
 80018d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_TIM3_Init+0xe0>)
 80018ec:	f001 f89d 	bl	8002a2a <LL_GPIO_Init>

}
 80018f0:	bf00      	nop
 80018f2:	3750      	adds	r7, #80	@ 0x50
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40020400 	.word	0x40020400

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_USART_Enable>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	60da      	str	r2, [r3, #12]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_USART_ConfigAsyncMode>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	615a      	str	r2, [r3, #20]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_AHB1_GRP1_EnableClock>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40023800 	.word	0x40023800

08001a90 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a9c:	4907      	ldr	r1, [pc, #28]	@ (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40023800 	.word	0x40023800

08001ac0 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	@ 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001aea:	2020      	movs	r0, #32
 8001aec:	f7ff ffd0 	bl	8001a90 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001af0:	2004      	movs	r0, #4
 8001af2:	f7ff ffb5 	bl	8001a60 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	@ 0xc0
 8001af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001afa:	2302      	movs	r3, #2
 8001afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4819      	ldr	r0, [pc, #100]	@ (8001b78 <MX_USART6_UART_Init+0xb8>)
 8001b14:	f000 ff89 	bl	8002a2a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b18:	f7ff fef2 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff42 	bl	80019ac <NVIC_EncodePriority>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2047      	movs	r0, #71	@ 0x47
 8001b2e:	f7ff ff13 	bl	8001958 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001b32:	2047      	movs	r0, #71	@ 0x47
 8001b34:	f7ff fef2 	bl	800191c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001b38:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8001b3c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <MX_USART6_UART_Init+0xbc>)
 8001b5e:	f001 fe79 	bl	8003854 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001b62:	4806      	ldr	r0, [pc, #24]	@ (8001b7c <MX_USART6_UART_Init+0xbc>)
 8001b64:	f7ff ff65 	bl	8001a32 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8001b68:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <MX_USART6_UART_Init+0xbc>)
 8001b6a:	f7ff ff52 	bl	8001a12 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	@ 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40011400 	.word	0x40011400

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b84:	f7ff fd38 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f002 fc97 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7ff fad5 	bl	8001160 <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bc4:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8001bc8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bcc:	20000348 	.word	0x20000348

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_Init+0x40>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_Init+0x40>)
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <HAL_Init+0x40>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f931 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	200f      	movs	r0, #15
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fba8 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f93b 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f911 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	200001f8 	.word	0x200001f8

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	200001f8 	.word	0x200001f8

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000008 	.word	0x20000008

08001d00 <__NVIC_SetPriorityGrouping>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_SetPriority>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	@ (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	@ (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	@ 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff47 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff5c 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff8e 	bl	8001db8 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffb0 	bl	8001e20 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e267      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d075      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eea:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b85      	ldr	r3, [pc, #532]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d112      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b82      	ldr	r3, [pc, #520]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4b7e      	ldr	r3, [pc, #504]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d05b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x108>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d157      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e242      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0x74>
 8001f32:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a75      	ldr	r2, [pc, #468]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xb0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x98>
 8001f4a:	4b70      	ldr	r3, [pc, #448]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6f      	ldr	r2, [pc, #444]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b6d      	ldr	r3, [pc, #436]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6c      	ldr	r2, [pc, #432]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xb0>
 8001f64:	4b69      	ldr	r3, [pc, #420]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a68      	ldr	r2, [pc, #416]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a65      	ldr	r2, [pc, #404]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fe8c 	bl	8001ca0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff fe88 	bl	8001ca0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e207      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xc0>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fe78 	bl	8001ca0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fe74 	bl	8001ca0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1f3      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b51      	ldr	r3, [pc, #324]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xe8>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b47      	ldr	r3, [pc, #284]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b44      	ldr	r3, [pc, #272]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b41      	ldr	r3, [pc, #260]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x152>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1c7      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4937      	ldr	r1, [pc, #220]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b34      	ldr	r3, [pc, #208]	@ (8002110 <HAL_RCC_OscConfig+0x244>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff fe2d 	bl	8001ca0 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff fe29 	bl	8001ca0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1a8      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4925      	ldr	r1, [pc, #148]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <HAL_RCC_OscConfig+0x244>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fe0c 	bl	8001ca0 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7ff fe08 	bl	8001ca0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e187      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d036      	beq.n	8002124 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_RCC_OscConfig+0x248>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff fdec 	bl	8001ca0 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fde8 	bl	8001ca0 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e167      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCC_OscConfig+0x240>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x200>
 80020ea:	e01b      	b.n	8002124 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_OscConfig+0x248>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fdd5 	bl	8001ca0 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	e00e      	b.n	8002118 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff fdd1 	bl	8001ca0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d907      	bls.n	8002118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e150      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
 800210c:	40023800 	.word	0x40023800
 8002110:	42470000 	.word	0x42470000
 8002114:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	4b88      	ldr	r3, [pc, #544]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 800211a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ea      	bne.n	80020fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 8097 	beq.w	8002260 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b81      	ldr	r3, [pc, #516]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10f      	bne.n	8002162 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b7d      	ldr	r3, [pc, #500]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	4a7c      	ldr	r2, [pc, #496]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	@ 0x40
 8002152:	4b7a      	ldr	r3, [pc, #488]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b77      	ldr	r3, [pc, #476]	@ (8002340 <HAL_RCC_OscConfig+0x474>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b74      	ldr	r3, [pc, #464]	@ (8002340 <HAL_RCC_OscConfig+0x474>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a73      	ldr	r2, [pc, #460]	@ (8002340 <HAL_RCC_OscConfig+0x474>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7ff fd91 	bl	8001ca0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7ff fd8d 	bl	8001ca0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e10c      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	4b6a      	ldr	r3, [pc, #424]	@ (8002340 <HAL_RCC_OscConfig+0x474>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2ea>
 80021a8:	4b64      	ldr	r3, [pc, #400]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	4a63      	ldr	r2, [pc, #396]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x324>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x30c>
 80021be:	4b5f      	ldr	r3, [pc, #380]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a5e      	ldr	r2, [pc, #376]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a5b      	ldr	r2, [pc, #364]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x324>
 80021d8:	4b58      	ldr	r3, [pc, #352]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a57      	ldr	r2, [pc, #348]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 0301 	bic.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e4:	4b55      	ldr	r3, [pc, #340]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a54      	ldr	r2, [pc, #336]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff fd52 	bl	8001ca0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7ff fd4e 	bl	8001ca0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0cb      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0ee      	beq.n	8002200 <HAL_RCC_OscConfig+0x334>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fd3c 	bl	8001ca0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff fd38 	bl	8001ca0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0b5      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	4b3e      	ldr	r3, [pc, #248]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ee      	bne.n	800222c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	4b39      	ldr	r3, [pc, #228]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	4a38      	ldr	r2, [pc, #224]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a1 	beq.w	80023ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226a:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b08      	cmp	r3, #8
 8002274:	d05c      	beq.n	8002330 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d141      	bne.n	8002302 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b31      	ldr	r3, [pc, #196]	@ (8002344 <HAL_RCC_OscConfig+0x478>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fd0c 	bl	8001ca0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff fd08 	bl	8001ca0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e087      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69da      	ldr	r2, [r3, #28]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	491b      	ldr	r1, [pc, #108]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_OscConfig+0x478>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff fce1 	bl	8001ca0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff fcdd 	bl	8001ca0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e05c      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x416>
 8002300:	e054      	b.n	80023ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_RCC_OscConfig+0x478>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fcca 	bl	8001ca0 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fcc6 	bl	8001ca0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e045      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_OscConfig+0x470>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x444>
 800232e:	e03d      	b.n	80023ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e038      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000
 8002344:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4ec>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d028      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d121      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d11a      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800237e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002380:	4293      	cmp	r3, r2
 8002382:	d111      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0cc      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b68      	ldr	r3, [pc, #416]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d90c      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b65      	ldr	r3, [pc, #404]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800241a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d044      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d119      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d003      	beq.n	800247a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	2b03      	cmp	r3, #3
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b3f      	ldr	r3, [pc, #252]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e06f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3b      	ldr	r3, [pc, #236]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e067      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4934      	ldr	r1, [pc, #208]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7ff fbf8 	bl	8001ca0 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7ff fbf4 	bl	8001ca0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e04f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d20c      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb58 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00
 8002578:	40023800 	.word	0x40023800
 800257c:	080062a0 	.word	0x080062a0
 8002580:	20000000 	.word	0x20000000
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b094      	sub	sp, #80	@ 0x50
 800258e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a0:	4b79      	ldr	r3, [pc, #484]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d00d      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x40>
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	f200 80e1 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x34>
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ba:	e0db      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b73      	ldr	r3, [pc, #460]	@ (800278c <HAL_RCC_GetSysClockFreq+0x204>)
 80025be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c0:	e0db      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c2:	4b73      	ldr	r3, [pc, #460]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x208>)
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c6:	e0d8      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b6a      	ldr	r3, [pc, #424]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	2200      	movs	r2, #0
 80025e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025fa:	4622      	mov	r2, r4
 80025fc:	462b      	mov	r3, r5
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4621      	mov	r1, r4
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	6139      	str	r1, [r7, #16]
 8002618:	4629      	mov	r1, r5
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800262c:	4659      	mov	r1, fp
 800262e:	018b      	lsls	r3, r1, #6
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002636:	4651      	mov	r1, sl
 8002638:	018a      	lsls	r2, r1, #6
 800263a:	4651      	mov	r1, sl
 800263c:	ebb2 0801 	subs.w	r8, r2, r1
 8002640:	4659      	mov	r1, fp
 8002642:	eb63 0901 	sbc.w	r9, r3, r1
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265a:	4690      	mov	r8, r2
 800265c:	4699      	mov	r9, r3
 800265e:	4623      	mov	r3, r4
 8002660:	eb18 0303 	adds.w	r3, r8, r3
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	462b      	mov	r3, r5
 8002668:	eb49 0303 	adc.w	r3, r9, r3
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800267a:	4629      	mov	r1, r5
 800267c:	024b      	lsls	r3, r1, #9
 800267e:	4621      	mov	r1, r4
 8002680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002684:	4621      	mov	r1, r4
 8002686:	024a      	lsls	r2, r1, #9
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800268e:	2200      	movs	r2, #0
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002698:	f7fe fad6 	bl	8000c48 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4613      	mov	r3, r2
 80026a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026a4:	e058      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a6:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	2200      	movs	r2, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	4611      	mov	r1, r2
 80026b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026c0:	4642      	mov	r2, r8
 80026c2:	464b      	mov	r3, r9
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	0159      	lsls	r1, r3, #5
 80026ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d2:	0150      	lsls	r0, r2, #5
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4641      	mov	r1, r8
 80026da:	ebb2 0a01 	subs.w	sl, r2, r1
 80026de:	4649      	mov	r1, r9
 80026e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026f8:	ebb2 040a 	subs.w	r4, r2, sl
 80026fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	464b      	mov	r3, r9
 800271c:	eb45 0303 	adc.w	r3, r5, r3
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002742:	2200      	movs	r2, #0
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	61fa      	str	r2, [r7, #28]
 8002748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274c:	f7fe fa7c 	bl	8000c48 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x200>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800276a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetSysClockFreq+0x204>)
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800277c:	4618      	mov	r0, r3
 800277e:	3750      	adds	r7, #80	@ 0x50
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	00f42400 	.word	0x00f42400
 8002790:	007a1200 	.word	0x007a1200

08002794 <LL_GPIO_SetPinMode>:
{
 8002794:	b480      	push	{r7}
 8002796:	b08b      	sub	sp, #44	@ 0x2c
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	613b      	str	r3, [r7, #16]
  return result;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2103      	movs	r1, #3
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	61fb      	str	r3, [r7, #28]
  return result;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e003      	b.n	80027f4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	372c      	adds	r7, #44	@ 0x2c
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_GPIO_SetPinOutputType>:
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_GPIO_SetPinSpeed>:
{
 800283e:	b480      	push	{r7}
 8002840:	b08b      	sub	sp, #44	@ 0x2c
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	613b      	str	r3, [r7, #16]
  return result;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2103      	movs	r1, #3
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	61fb      	str	r3, [r7, #28]
  return result;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	431a      	orrs	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	372c      	adds	r7, #44	@ 0x2c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_GPIO_SetPinPull>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b08b      	sub	sp, #44	@ 0x2c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
  return result;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e003      	b.n	80028ea <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2103      	movs	r1, #3
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	61fb      	str	r3, [r7, #28]
  return result;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e003      	b.n	8002918 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	60da      	str	r2, [r3, #12]
}
 8002926:	bf00      	nop
 8002928:	372c      	adds	r7, #44	@ 0x2c
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_GPIO_SetAFPin_0_7>:
{
 8002932:	b480      	push	{r7}
 8002934:	b08b      	sub	sp, #44	@ 0x2c
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	613b      	str	r3, [r7, #16]
  return result;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e003      	b.n	8002964 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	210f      	movs	r1, #15
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
  return result;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]
}
 80029a0:	bf00      	nop
 80029a2:	372c      	adds	r7, #44	@ 0x2c
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_GPIO_SetAFPin_8_15>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	613b      	str	r3, [r7, #16]
  return result;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	210f      	movs	r1, #15
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	61fb      	str	r3, [r7, #28]
  return result;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002a04:	2320      	movs	r3, #32
 8002a06:	e003      	b.n	8002a10 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002a1e:	bf00      	nop
 8002a20:	372c      	adds	r7, #44	@ 0x2c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	@ 0x28
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	617b      	str	r3, [r7, #20]
  return result;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <LL_GPIO_Init+0x2e>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a62:	e057      	b.n	8002b14 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	4013      	ands	r3, r2
 8002a72:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d049      	beq.n	8002b0e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d003      	beq.n	8002a8a <LL_GPIO_Init+0x60>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d10d      	bne.n	8002aa6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fed3 	bl	800283e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a39      	ldr	r1, [r7, #32]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff feb4 	bl	800280e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff02 	bl	80028b8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d121      	bne.n	8002b00 <LL_GPIO_Init+0xd6>
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	60bb      	str	r3, [r7, #8]
  return result;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <LL_GPIO_Init+0xac>
    return 32U;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e003      	b.n	8002ade <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ade:	2b07      	cmp	r3, #7
 8002ae0:	d807      	bhi.n	8002af2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6a39      	ldr	r1, [r7, #32]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff21 	bl	8002932 <LL_GPIO_SetAFPin_0_7>
 8002af0:	e006      	b.n	8002b00 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	461a      	mov	r2, r3
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff56 	bl	80029ac <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	461a      	mov	r2, r3
 8002b06:	6a39      	ldr	r1, [r7, #32]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fe43 	bl	8002794 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	3301      	adds	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1a0      	bne.n	8002a64 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3728      	adds	r7, #40	@ 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <LL_RCC_GetSysClkSource+0x18>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <LL_RCC_GetAHBPrescaler+0x18>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <LL_RCC_GetAPB1Prescaler+0x18>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bbc:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <LL_RCC_PLL_GetN+0x18>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <LL_RCC_PLL_GetP+0x18>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800

08002bf0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <LL_RCC_PLL_GetDivider+0x18>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002c14:	f000 f820 	bl	8002c58 <RCC_GetSystemClockFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f840 	bl	8002ca8 <RCC_GetHCLKClockFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f84e 	bl	8002cd4 <RCC_GetPCLK1ClockFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f85a 	bl	8002cfc <RCC_GetPCLK2ClockFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60da      	str	r2, [r3, #12]
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c62:	f7ff ff63 	bl	8002b2c <LL_RCC_GetSysClkSource>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d00c      	beq.n	8002c86 <RCC_GetSystemClockFreq+0x2e>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d80f      	bhi.n	8002c90 <RCC_GetSystemClockFreq+0x38>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <RCC_GetSystemClockFreq+0x22>
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d003      	beq.n	8002c80 <RCC_GetSystemClockFreq+0x28>
 8002c78:	e00a      	b.n	8002c90 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <RCC_GetSystemClockFreq+0x48>)
 8002c7c:	607b      	str	r3, [r7, #4]
      break;
 8002c7e:	e00a      	b.n	8002c96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <RCC_GetSystemClockFreq+0x4c>)
 8002c82:	607b      	str	r3, [r7, #4]
      break;
 8002c84:	e007      	b.n	8002c96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002c86:	2008      	movs	r0, #8
 8002c88:	f000 f84c 	bl	8002d24 <RCC_PLL_GetFreqDomain_SYS>
 8002c8c:	6078      	str	r0, [r7, #4]
      break;
 8002c8e:	e002      	b.n	8002c96 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <RCC_GetSystemClockFreq+0x48>)
 8002c92:	607b      	str	r3, [r7, #4]
      break;
 8002c94:	bf00      	nop
  }

  return frequency;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200

08002ca8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002cb0:	f7ff ff4a 	bl	8002b48 <LL_RCC_GetAHBPrescaler>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <RCC_GetHCLKClockFreq+0x28>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	40d3      	lsrs	r3, r2
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	080062a0 	.word	0x080062a0

08002cd4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002cdc:	f7ff ff42 	bl	8002b64 <LL_RCC_GetAPB1Prescaler>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	40d3      	lsrs	r3, r2
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	080062b0 	.word	0x080062b0

08002cfc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d04:	f7ff ff3c 	bl	8002b80 <LL_RCC_GetAPB2Prescaler>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	0b5b      	lsrs	r3, r3, #13
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	40d3      	lsrs	r3, r2
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	080062b0 	.word	0x080062b0

08002d24 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d38:	f7ff ff30 	bl	8002b9c <LL_RCC_PLL_GetMainSource>
 8002d3c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4a:	d003      	beq.n	8002d54 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002d4c:	e005      	b.n	8002d5a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d50:	617b      	str	r3, [r7, #20]
      break;
 8002d52:	e005      	b.n	8002d60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002d56:	617b      	str	r3, [r7, #20]
      break;
 8002d58:	e002      	b.n	8002d60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d113      	bne.n	8002d8e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d66:	f7ff ff43 	bl	8002bf0 <LL_RCC_PLL_GetDivider>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002d72:	f7ff ff21 	bl	8002bb8 <LL_RCC_PLL_GetN>
 8002d76:	4603      	mov	r3, r0
 8002d78:	fb03 f404 	mul.w	r4, r3, r4
 8002d7c:	f7ff ff2a 	bl	8002bd4 <LL_RCC_PLL_GetP>
 8002d80:	4603      	mov	r3, r0
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	3301      	adds	r3, #1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d8c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002d8e:	693b      	ldr	r3, [r7, #16]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <LL_TIM_SetPrescaler>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_TIM_SetAutoReload>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_TIM_SetRepetitionCounter>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_TIM_OC_SetCompareCH1>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_TIM_OC_SetCompareCH2>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_TIM_OC_SetCompareCH3>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_TIM_OC_SetCompareCH4>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	615a      	str	r2, [r3, #20]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	@ (8002f8c <LL_TIM_Init+0x108>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <LL_TIM_Init+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea2:	d00f      	beq.n	8002ec4 <LL_TIM_Init+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8002f90 <LL_TIM_Init+0x10c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <LL_TIM_Init+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a39      	ldr	r2, [pc, #228]	@ (8002f94 <LL_TIM_Init+0x110>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <LL_TIM_Init+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a38      	ldr	r2, [pc, #224]	@ (8002f98 <LL_TIM_Init+0x114>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <LL_TIM_Init+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a37      	ldr	r2, [pc, #220]	@ (8002f9c <LL_TIM_Init+0x118>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d106      	bne.n	8002ed2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <LL_TIM_Init+0x108>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d02b      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee0:	d027      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f90 <LL_TIM_Init+0x10c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d023      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <LL_TIM_Init+0x110>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <LL_TIM_Init+0x114>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01b      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <LL_TIM_Init+0x118>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d017      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <LL_TIM_Init+0x11c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a25      	ldr	r2, [pc, #148]	@ (8002fa4 <LL_TIM_Init+0x120>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00f      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a24      	ldr	r2, [pc, #144]	@ (8002fa8 <LL_TIM_Init+0x124>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <LL_TIM_Init+0x128>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <LL_TIM_Init+0x12c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <LL_TIM_Init+0xae>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	@ (8002fb4 <LL_TIM_Init+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d106      	bne.n	8002f40 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff35 	bl	8002dbc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff21 	bl	8002da0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <LL_TIM_Init+0x108>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <LL_TIM_Init+0xea>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <LL_TIM_Init+0x118>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d105      	bne.n	8002f7a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff2f 	bl	8002dd8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff72 	bl	8002e64 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800
 8002fac:	40001800 	.word	0x40001800
 8002fb0:	40001c00 	.word	0x40001c00
 8002fb4:	40002000 	.word	0x40002000

08002fb8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d027      	beq.n	8003020 <LL_TIM_OC_Init+0x68>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd6:	d82a      	bhi.n	800302e <LL_TIM_OC_Init+0x76>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fde:	d018      	beq.n	8003012 <LL_TIM_OC_Init+0x5a>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe6:	d822      	bhi.n	800302e <LL_TIM_OC_Init+0x76>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d003      	beq.n	8002ff6 <LL_TIM_OC_Init+0x3e>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d007      	beq.n	8003004 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002ff4:	e01b      	b.n	800302e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f81f 	bl	800303c <OC1Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]
      break;
 8003002:	e015      	b.n	8003030 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f884 	bl	8003114 <OC2Config>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
      break;
 8003010:	e00e      	b.n	8003030 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f8ed 	bl	80031f4 <OC3Config>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
      break;
 800301e:	e007      	b.n	8003030 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f956 	bl	80032d4 <OC4Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e000      	b.n	8003030 <LL_TIM_OC_Init+0x78>
      break;
 800302e:	bf00      	nop
  }

  return result;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 0202 	bic.w	r2, r3, #2
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <OC1Config+0xd0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <OC1Config+0x6a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <OC1Config+0xd4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d11e      	bne.n	80030e4 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0208 	bic.w	r2, r3, #8
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 0204 	bic.w	r2, r3, #4
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fe7c 	bl	8002df4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400

08003114 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0220 	bic.w	r2, r3, #32
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0210 	bic.w	r2, r3, #16
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <OC2Config+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <OC2Config+0x70>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <OC2Config+0xdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d11f      	bne.n	80031c4 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	019b      	lsls	r3, r3, #6
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fe1a 	bl	8002e10 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400

080031f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <OC3Config+0xd8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <OC3Config+0x6e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <OC3Config+0xdc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d11f      	bne.n	80032a2 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	029b      	lsls	r3, r3, #10
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	015b      	lsls	r3, r3, #5
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fdb9 	bl	8002e2c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	031b      	lsls	r3, r3, #12
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a11      	ldr	r2, [pc, #68]	@ (800337c <OC4Config+0xa8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <OC4Config+0x70>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a10      	ldr	r2, [pc, #64]	@ (8003380 <OC4Config+0xac>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d107      	bne.n	8003354 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	019b      	lsls	r3, r3, #6
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fd6e 	bl	8002e48 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010000 	.word	0x40010000
 8003380:	40010400 	.word	0x40010400

08003384 <LL_USART_IsEnabled>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <LL_USART_SetStopBitsLength>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_USART_SetHWFlowCtrl>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	615a      	str	r2, [r3, #20]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <LL_USART_SetBaudRate>:
{
 80033f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033fc:	b0c0      	sub	sp, #256	@ 0x100
 80033fe:	af00      	add	r7, sp, #0
 8003400:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003404:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003408:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800340c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003418:	f040 810c 	bne.w	8003634 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800341c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003426:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800342a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	1891      	adds	r1, r2, r2
 8003434:	6639      	str	r1, [r7, #96]	@ 0x60
 8003436:	415b      	adcs	r3, r3
 8003438:	667b      	str	r3, [r7, #100]	@ 0x64
 800343a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800343e:	4621      	mov	r1, r4
 8003440:	eb12 0801 	adds.w	r8, r2, r1
 8003444:	4629      	mov	r1, r5
 8003446:	eb43 0901 	adc.w	r9, r3, r1
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800345a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345e:	4690      	mov	r8, r2
 8003460:	4699      	mov	r9, r3
 8003462:	4623      	mov	r3, r4
 8003464:	eb18 0303 	adds.w	r3, r8, r3
 8003468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800346c:	462b      	mov	r3, r5
 800346e:	eb49 0303 	adc.w	r3, r9, r3
 8003472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003476:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800347a:	2200      	movs	r2, #0
 800347c:	469a      	mov	sl, r3
 800347e:	4693      	mov	fp, r2
 8003480:	eb1a 030a 	adds.w	r3, sl, sl
 8003484:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003486:	eb4b 030b 	adc.w	r3, fp, fp
 800348a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800348c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003494:	f7fd fbd8 	bl	8000c48 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b64      	ldr	r3, [pc, #400]	@ (8003630 <LL_USART_SetBaudRate+0x238>)
 800349e:	fba3 2302 	umull	r2, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	b29c      	uxth	r4, r3
 80034aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034b4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034b8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	6539      	str	r1, [r7, #80]	@ 0x50
 80034c4:	415b      	adcs	r3, r3
 80034c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034cc:	4641      	mov	r1, r8
 80034ce:	1851      	adds	r1, r2, r1
 80034d0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034d2:	4649      	mov	r1, r9
 80034d4:	414b      	adcs	r3, r1
 80034d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80034e4:	4659      	mov	r1, fp
 80034e6:	00cb      	lsls	r3, r1, #3
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ee:	4651      	mov	r1, sl
 80034f0:	00ca      	lsls	r2, r1, #3
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	4642      	mov	r2, r8
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003500:	464b      	mov	r3, r9
 8003502:	460a      	mov	r2, r1
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800350c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003516:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800351a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800351e:	460b      	mov	r3, r1
 8003520:	18db      	adds	r3, r3, r3
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40
 8003524:	4613      	mov	r3, r2
 8003526:	eb42 0303 	adc.w	r3, r2, r3
 800352a:	647b      	str	r3, [r7, #68]	@ 0x44
 800352c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003530:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003534:	f7fd fb88 	bl	8000c48 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4611      	mov	r1, r2
 800353e:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <LL_USART_SetBaudRate+0x238>)
 8003540:	fba3 2301 	umull	r2, r3, r3, r1
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2264      	movs	r2, #100	@ 0x64
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	1acb      	subs	r3, r1, r3
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003554:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <LL_USART_SetBaudRate+0x238>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	b29b      	uxth	r3, r3
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	b29b      	uxth	r3, r3
 8003562:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003566:	b29b      	uxth	r3, r3
 8003568:	4423      	add	r3, r4
 800356a:	b29c      	uxth	r4, r3
 800356c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003570:	2200      	movs	r2, #0
 8003572:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003576:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800357a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800357e:	4642      	mov	r2, r8
 8003580:	464b      	mov	r3, r9
 8003582:	1891      	adds	r1, r2, r2
 8003584:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003586:	415b      	adcs	r3, r3
 8003588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800358e:	4641      	mov	r1, r8
 8003590:	1851      	adds	r1, r2, r1
 8003592:	6339      	str	r1, [r7, #48]	@ 0x30
 8003594:	4649      	mov	r1, r9
 8003596:	414b      	adcs	r3, r1
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035a6:	4659      	mov	r1, fp
 80035a8:	00cb      	lsls	r3, r1, #3
 80035aa:	4651      	mov	r1, sl
 80035ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b0:	4651      	mov	r1, sl
 80035b2:	00ca      	lsls	r2, r1, #3
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	4603      	mov	r3, r0
 80035ba:	4642      	mov	r2, r8
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035c2:	464b      	mov	r3, r9
 80035c4:	460a      	mov	r2, r1
 80035c6:	eb42 0303 	adc.w	r3, r2, r3
 80035ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035d8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80035dc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035f2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80035f6:	f7fd fb27 	bl	8000c48 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <LL_USART_SetBaudRate+0x238>)
 8003600:	fba3 1302 	umull	r1, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	2164      	movs	r1, #100	@ 0x64
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3332      	adds	r3, #50	@ 0x32
 8003612:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <LL_USART_SetBaudRate+0x238>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	b29b      	uxth	r3, r3
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	b29b      	uxth	r3, r3
 8003622:	4423      	add	r3, r4
 8003624:	b29b      	uxth	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362c:	609a      	str	r2, [r3, #8]
}
 800362e:	e108      	b.n	8003842 <LL_USART_SetBaudRate+0x44a>
 8003630:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003638:	2200      	movs	r2, #0
 800363a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800363e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003642:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003646:	4642      	mov	r2, r8
 8003648:	464b      	mov	r3, r9
 800364a:	1891      	adds	r1, r2, r2
 800364c:	6239      	str	r1, [r7, #32]
 800364e:	415b      	adcs	r3, r3
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
 8003652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003656:	4641      	mov	r1, r8
 8003658:	1854      	adds	r4, r2, r1
 800365a:	4649      	mov	r1, r9
 800365c:	eb43 0501 	adc.w	r5, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	00eb      	lsls	r3, r5, #3
 800366a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366e:	00e2      	lsls	r2, r4, #3
 8003670:	4614      	mov	r4, r2
 8003672:	461d      	mov	r5, r3
 8003674:	4643      	mov	r3, r8
 8003676:	18e3      	adds	r3, r4, r3
 8003678:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800367c:	464b      	mov	r3, r9
 800367e:	eb45 0303 	adc.w	r3, r5, r3
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003690:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80036a0:	4629      	mov	r1, r5
 80036a2:	008b      	lsls	r3, r1, #2
 80036a4:	4621      	mov	r1, r4
 80036a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036aa:	4621      	mov	r1, r4
 80036ac:	008a      	lsls	r2, r1, #2
 80036ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80036b2:	f7fd fac9 	bl	8000c48 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b65      	ldr	r3, [pc, #404]	@ (8003850 <LL_USART_SetBaudRate+0x458>)
 80036bc:	fba3 2302 	umull	r2, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	b29c      	uxth	r4, r3
 80036c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036d6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80036da:	4642      	mov	r2, r8
 80036dc:	464b      	mov	r3, r9
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ea:	4641      	mov	r1, r8
 80036ec:	1851      	adds	r1, r2, r1
 80036ee:	6139      	str	r1, [r7, #16]
 80036f0:	4649      	mov	r1, r9
 80036f2:	414b      	adcs	r3, r1
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003702:	4659      	mov	r1, fp
 8003704:	00cb      	lsls	r3, r1, #3
 8003706:	4651      	mov	r1, sl
 8003708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370c:	4651      	mov	r1, sl
 800370e:	00ca      	lsls	r2, r1, #3
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	4603      	mov	r3, r0
 8003716:	4642      	mov	r2, r8
 8003718:	189b      	adds	r3, r3, r2
 800371a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800371e:	464b      	mov	r3, r9
 8003720:	460a      	mov	r2, r1
 8003722:	eb42 0303 	adc.w	r3, r2, r3
 8003726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800372a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800372e:	2200      	movs	r2, #0
 8003730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003734:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003744:	4649      	mov	r1, r9
 8003746:	008b      	lsls	r3, r1, #2
 8003748:	4641      	mov	r1, r8
 800374a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374e:	4641      	mov	r1, r8
 8003750:	008a      	lsls	r2, r1, #2
 8003752:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003756:	f7fd fa77 	bl	8000c48 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4611      	mov	r1, r2
 8003760:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <LL_USART_SetBaudRate+0x458>)
 8003762:	fba3 2301 	umull	r2, r3, r3, r1
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2264      	movs	r2, #100	@ 0x64
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	1acb      	subs	r3, r1, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	@ 0x32
 8003774:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <LL_USART_SetBaudRate+0x458>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	b29b      	uxth	r3, r3
 800377e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003782:	b29b      	uxth	r3, r3
 8003784:	4423      	add	r3, r4
 8003786:	b29c      	uxth	r4, r3
 8003788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800378c:	2200      	movs	r2, #0
 800378e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003790:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003792:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003796:	4642      	mov	r2, r8
 8003798:	464b      	mov	r3, r9
 800379a:	1891      	adds	r1, r2, r2
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	415b      	adcs	r3, r3
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a6:	4641      	mov	r1, r8
 80037a8:	1851      	adds	r1, r2, r1
 80037aa:	6039      	str	r1, [r7, #0]
 80037ac:	4649      	mov	r1, r9
 80037ae:	414b      	adcs	r3, r1
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037be:	4659      	mov	r1, fp
 80037c0:	00cb      	lsls	r3, r1, #3
 80037c2:	4651      	mov	r1, sl
 80037c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c8:	4651      	mov	r1, sl
 80037ca:	00ca      	lsls	r2, r1, #3
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	4603      	mov	r3, r0
 80037d2:	4642      	mov	r2, r8
 80037d4:	189b      	adds	r3, r3, r2
 80037d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80037d8:	464b      	mov	r3, r9
 80037da:	460a      	mov	r2, r1
 80037dc:	eb42 0303 	adc.w	r3, r2, r3
 80037e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80037e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80037e6:	2200      	movs	r2, #0
 80037e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80037f8:	4649      	mov	r1, r9
 80037fa:	008b      	lsls	r3, r1, #2
 80037fc:	4641      	mov	r1, r8
 80037fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003802:	4641      	mov	r1, r8
 8003804:	008a      	lsls	r2, r1, #2
 8003806:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800380a:	f7fd fa1d 	bl	8000c48 <__aeabi_uldivmod>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <LL_USART_SetBaudRate+0x458>)
 8003814:	fba3 1302 	umull	r1, r3, r3, r2
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	2164      	movs	r1, #100	@ 0x64
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	3332      	adds	r3, #50	@ 0x32
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <LL_USART_SetBaudRate+0x458>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	b29b      	uxth	r3, r3
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	b29b      	uxth	r3, r3
 8003836:	4423      	add	r3, r4
 8003838:	b29b      	uxth	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003840:	609a      	str	r2, [r3, #8]
}
 8003842:	bf00      	nop
 8003844:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003848:	46bd      	mov	sp, r7
 800384a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384e:	bf00      	nop
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fd8c 	bl	8003384 <LL_USART_IsEnabled>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d15e      	bne.n	8003930 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800387a:	f023 030c 	bic.w	r3, r3, #12
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6851      	ldr	r1, [r2, #4]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	6912      	ldr	r2, [r2, #16]
 800388c:	4311      	orrs	r1, r2
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6992      	ldr	r2, [r2, #24]
 8003892:	430a      	orrs	r2, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fd83 	bl	80033ac <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fd90 	bl	80033d2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff f9a8 	bl	8002c0c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <LL_USART_Init+0xe8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e021      	b.n	800390e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <LL_USART_Init+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d102      	bne.n	80038d8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	e01a      	b.n	800390e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <LL_USART_Init+0xf0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d102      	bne.n	80038e6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e013      	b.n	800390e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <LL_USART_Init+0xf4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d102      	bne.n	80038f4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e00c      	b.n	800390e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <LL_USART_Init+0xf8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d102      	bne.n	8003902 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	e005      	b.n	800390e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <LL_USART_Init+0xfc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fd64 	bl	80033f8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003930:	7ffb      	ldrb	r3, [r7, #31]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40011000 	.word	0x40011000
 8003940:	40004400 	.word	0x40004400
 8003944:	40004800 	.word	0x40004800
 8003948:	40011400 	.word	0x40011400
 800394c:	40004c00 	.word	0x40004c00
 8003950:	40005000 	.word	0x40005000

08003954 <__cvt>:
 8003954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003958:	ec57 6b10 	vmov	r6, r7, d0
 800395c:	2f00      	cmp	r7, #0
 800395e:	460c      	mov	r4, r1
 8003960:	4619      	mov	r1, r3
 8003962:	463b      	mov	r3, r7
 8003964:	bfbb      	ittet	lt
 8003966:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800396a:	461f      	movlt	r7, r3
 800396c:	2300      	movge	r3, #0
 800396e:	232d      	movlt	r3, #45	@ 0x2d
 8003970:	700b      	strb	r3, [r1, #0]
 8003972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003974:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003978:	4691      	mov	r9, r2
 800397a:	f023 0820 	bic.w	r8, r3, #32
 800397e:	bfbc      	itt	lt
 8003980:	4632      	movlt	r2, r6
 8003982:	4616      	movlt	r6, r2
 8003984:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003988:	d005      	beq.n	8003996 <__cvt+0x42>
 800398a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800398e:	d100      	bne.n	8003992 <__cvt+0x3e>
 8003990:	3401      	adds	r4, #1
 8003992:	2102      	movs	r1, #2
 8003994:	e000      	b.n	8003998 <__cvt+0x44>
 8003996:	2103      	movs	r1, #3
 8003998:	ab03      	add	r3, sp, #12
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	ab02      	add	r3, sp, #8
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	ec47 6b10 	vmov	d0, r6, r7
 80039a4:	4653      	mov	r3, sl
 80039a6:	4622      	mov	r2, r4
 80039a8:	f000 fe4a 	bl	8004640 <_dtoa_r>
 80039ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80039b0:	4605      	mov	r5, r0
 80039b2:	d119      	bne.n	80039e8 <__cvt+0x94>
 80039b4:	f019 0f01 	tst.w	r9, #1
 80039b8:	d00e      	beq.n	80039d8 <__cvt+0x84>
 80039ba:	eb00 0904 	add.w	r9, r0, r4
 80039be:	2200      	movs	r2, #0
 80039c0:	2300      	movs	r3, #0
 80039c2:	4630      	mov	r0, r6
 80039c4:	4639      	mov	r1, r7
 80039c6:	f7fd f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ca:	b108      	cbz	r0, 80039d0 <__cvt+0x7c>
 80039cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80039d0:	2230      	movs	r2, #48	@ 0x30
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	454b      	cmp	r3, r9
 80039d6:	d31e      	bcc.n	8003a16 <__cvt+0xc2>
 80039d8:	9b03      	ldr	r3, [sp, #12]
 80039da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039dc:	1b5b      	subs	r3, r3, r5
 80039de:	4628      	mov	r0, r5
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	b004      	add	sp, #16
 80039e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039ec:	eb00 0904 	add.w	r9, r0, r4
 80039f0:	d1e5      	bne.n	80039be <__cvt+0x6a>
 80039f2:	7803      	ldrb	r3, [r0, #0]
 80039f4:	2b30      	cmp	r3, #48	@ 0x30
 80039f6:	d10a      	bne.n	8003a0e <__cvt+0xba>
 80039f8:	2200      	movs	r2, #0
 80039fa:	2300      	movs	r3, #0
 80039fc:	4630      	mov	r0, r6
 80039fe:	4639      	mov	r1, r7
 8003a00:	f7fd f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a04:	b918      	cbnz	r0, 8003a0e <__cvt+0xba>
 8003a06:	f1c4 0401 	rsb	r4, r4, #1
 8003a0a:	f8ca 4000 	str.w	r4, [sl]
 8003a0e:	f8da 3000 	ldr.w	r3, [sl]
 8003a12:	4499      	add	r9, r3
 8003a14:	e7d3      	b.n	80039be <__cvt+0x6a>
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e7d9      	b.n	80039d2 <__cvt+0x7e>

08003a1e <__exponent>:
 8003a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a20:	2900      	cmp	r1, #0
 8003a22:	bfba      	itte	lt
 8003a24:	4249      	neglt	r1, r1
 8003a26:	232d      	movlt	r3, #45	@ 0x2d
 8003a28:	232b      	movge	r3, #43	@ 0x2b
 8003a2a:	2909      	cmp	r1, #9
 8003a2c:	7002      	strb	r2, [r0, #0]
 8003a2e:	7043      	strb	r3, [r0, #1]
 8003a30:	dd29      	ble.n	8003a86 <__exponent+0x68>
 8003a32:	f10d 0307 	add.w	r3, sp, #7
 8003a36:	461d      	mov	r5, r3
 8003a38:	270a      	movs	r7, #10
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a40:	fb07 1416 	mls	r4, r7, r6, r1
 8003a44:	3430      	adds	r4, #48	@ 0x30
 8003a46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	2c63      	cmp	r4, #99	@ 0x63
 8003a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a52:	4631      	mov	r1, r6
 8003a54:	dcf1      	bgt.n	8003a3a <__exponent+0x1c>
 8003a56:	3130      	adds	r1, #48	@ 0x30
 8003a58:	1e94      	subs	r4, r2, #2
 8003a5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a5e:	1c41      	adds	r1, r0, #1
 8003a60:	4623      	mov	r3, r4
 8003a62:	42ab      	cmp	r3, r5
 8003a64:	d30a      	bcc.n	8003a7c <__exponent+0x5e>
 8003a66:	f10d 0309 	add.w	r3, sp, #9
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	42ac      	cmp	r4, r5
 8003a6e:	bf88      	it	hi
 8003a70:	2300      	movhi	r3, #0
 8003a72:	3302      	adds	r3, #2
 8003a74:	4403      	add	r3, r0
 8003a76:	1a18      	subs	r0, r3, r0
 8003a78:	b003      	add	sp, #12
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a84:	e7ed      	b.n	8003a62 <__exponent+0x44>
 8003a86:	2330      	movs	r3, #48	@ 0x30
 8003a88:	3130      	adds	r1, #48	@ 0x30
 8003a8a:	7083      	strb	r3, [r0, #2]
 8003a8c:	70c1      	strb	r1, [r0, #3]
 8003a8e:	1d03      	adds	r3, r0, #4
 8003a90:	e7f1      	b.n	8003a76 <__exponent+0x58>
	...

08003a94 <_printf_float>:
 8003a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a98:	b08d      	sub	sp, #52	@ 0x34
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	461f      	mov	r7, r3
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	f000 fccb 	bl	8004440 <_localeconv_r>
 8003aaa:	6803      	ldr	r3, [r0, #0]
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fbde 	bl	8000270 <strlen>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8003abc:	9005      	str	r0, [sp, #20]
 8003abe:	3307      	adds	r3, #7
 8003ac0:	f023 0307 	bic.w	r3, r3, #7
 8003ac4:	f103 0208 	add.w	r2, r3, #8
 8003ac8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003acc:	f8d4 b000 	ldr.w	fp, [r4]
 8003ad0:	f8c8 2000 	str.w	r2, [r8]
 8003ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ad8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003adc:	9307      	str	r3, [sp, #28]
 8003ade:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ae2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003ae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aea:	4b9c      	ldr	r3, [pc, #624]	@ (8003d5c <_printf_float+0x2c8>)
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	f7fd f81c 	bl	8000b2c <__aeabi_dcmpun>
 8003af4:	bb70      	cbnz	r0, 8003b54 <_printf_float+0xc0>
 8003af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003afa:	4b98      	ldr	r3, [pc, #608]	@ (8003d5c <_printf_float+0x2c8>)
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	f7fc fff6 	bl	8000af0 <__aeabi_dcmple>
 8003b04:	bb30      	cbnz	r0, 8003b54 <_printf_float+0xc0>
 8003b06:	2200      	movs	r2, #0
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	f7fc ffe5 	bl	8000adc <__aeabi_dcmplt>
 8003b12:	b110      	cbz	r0, 8003b1a <_printf_float+0x86>
 8003b14:	232d      	movs	r3, #45	@ 0x2d
 8003b16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b1a:	4a91      	ldr	r2, [pc, #580]	@ (8003d60 <_printf_float+0x2cc>)
 8003b1c:	4b91      	ldr	r3, [pc, #580]	@ (8003d64 <_printf_float+0x2d0>)
 8003b1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b22:	bf8c      	ite	hi
 8003b24:	4690      	movhi	r8, r2
 8003b26:	4698      	movls	r8, r3
 8003b28:	2303      	movs	r3, #3
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	f02b 0304 	bic.w	r3, fp, #4
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	f04f 0900 	mov.w	r9, #0
 8003b36:	9700      	str	r7, [sp, #0]
 8003b38:	4633      	mov	r3, r6
 8003b3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 f9d2 	bl	8003ee8 <_printf_common>
 8003b44:	3001      	adds	r0, #1
 8003b46:	f040 808d 	bne.w	8003c64 <_printf_float+0x1d0>
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	b00d      	add	sp, #52	@ 0x34
 8003b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8003b60:	b140      	cbz	r0, 8003b74 <_printf_float+0xe0>
 8003b62:	464b      	mov	r3, r9
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfbc      	itt	lt
 8003b68:	232d      	movlt	r3, #45	@ 0x2d
 8003b6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d68 <_printf_float+0x2d4>)
 8003b70:	4b7e      	ldr	r3, [pc, #504]	@ (8003d6c <_printf_float+0x2d8>)
 8003b72:	e7d4      	b.n	8003b1e <_printf_float+0x8a>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003b7a:	9206      	str	r2, [sp, #24]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	d13b      	bne.n	8003bf8 <_printf_float+0x164>
 8003b80:	2306      	movs	r3, #6
 8003b82:	6063      	str	r3, [r4, #4]
 8003b84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6022      	str	r2, [r4, #0]
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003b90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003b94:	ab09      	add	r3, sp, #36	@ 0x24
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	6861      	ldr	r1, [r4, #4]
 8003b9a:	ec49 8b10 	vmov	d0, r8, r9
 8003b9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f7ff fed6 	bl	8003954 <__cvt>
 8003ba8:	9b06      	ldr	r3, [sp, #24]
 8003baa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003bac:	2b47      	cmp	r3, #71	@ 0x47
 8003bae:	4680      	mov	r8, r0
 8003bb0:	d129      	bne.n	8003c06 <_printf_float+0x172>
 8003bb2:	1cc8      	adds	r0, r1, #3
 8003bb4:	db02      	blt.n	8003bbc <_printf_float+0x128>
 8003bb6:	6863      	ldr	r3, [r4, #4]
 8003bb8:	4299      	cmp	r1, r3
 8003bba:	dd41      	ble.n	8003c40 <_printf_float+0x1ac>
 8003bbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003bc0:	fa5f fa8a 	uxtb.w	sl, sl
 8003bc4:	3901      	subs	r1, #1
 8003bc6:	4652      	mov	r2, sl
 8003bc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003bcc:	9109      	str	r1, [sp, #36]	@ 0x24
 8003bce:	f7ff ff26 	bl	8003a1e <__exponent>
 8003bd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003bd4:	1813      	adds	r3, r2, r0
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	4681      	mov	r9, r0
 8003bda:	6123      	str	r3, [r4, #16]
 8003bdc:	dc02      	bgt.n	8003be4 <_printf_float+0x150>
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	07d2      	lsls	r2, r2, #31
 8003be2:	d501      	bpl.n	8003be8 <_printf_float+0x154>
 8003be4:	3301      	adds	r3, #1
 8003be6:	6123      	str	r3, [r4, #16]
 8003be8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0a2      	beq.n	8003b36 <_printf_float+0xa2>
 8003bf0:	232d      	movs	r3, #45	@ 0x2d
 8003bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bf6:	e79e      	b.n	8003b36 <_printf_float+0xa2>
 8003bf8:	9a06      	ldr	r2, [sp, #24]
 8003bfa:	2a47      	cmp	r2, #71	@ 0x47
 8003bfc:	d1c2      	bne.n	8003b84 <_printf_float+0xf0>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1c0      	bne.n	8003b84 <_printf_float+0xf0>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e7bd      	b.n	8003b82 <_printf_float+0xee>
 8003c06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c0a:	d9db      	bls.n	8003bc4 <_printf_float+0x130>
 8003c0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c10:	d118      	bne.n	8003c44 <_printf_float+0x1b0>
 8003c12:	2900      	cmp	r1, #0
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	dd0b      	ble.n	8003c30 <_printf_float+0x19c>
 8003c18:	6121      	str	r1, [r4, #16]
 8003c1a:	b913      	cbnz	r3, 8003c22 <_printf_float+0x18e>
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	07d0      	lsls	r0, r2, #31
 8003c20:	d502      	bpl.n	8003c28 <_printf_float+0x194>
 8003c22:	3301      	adds	r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	6123      	str	r3, [r4, #16]
 8003c28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c2a:	f04f 0900 	mov.w	r9, #0
 8003c2e:	e7db      	b.n	8003be8 <_printf_float+0x154>
 8003c30:	b913      	cbnz	r3, 8003c38 <_printf_float+0x1a4>
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	07d2      	lsls	r2, r2, #31
 8003c36:	d501      	bpl.n	8003c3c <_printf_float+0x1a8>
 8003c38:	3302      	adds	r3, #2
 8003c3a:	e7f4      	b.n	8003c26 <_printf_float+0x192>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e7f2      	b.n	8003c26 <_printf_float+0x192>
 8003c40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c46:	4299      	cmp	r1, r3
 8003c48:	db05      	blt.n	8003c56 <_printf_float+0x1c2>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	6121      	str	r1, [r4, #16]
 8003c4e:	07d8      	lsls	r0, r3, #31
 8003c50:	d5ea      	bpl.n	8003c28 <_printf_float+0x194>
 8003c52:	1c4b      	adds	r3, r1, #1
 8003c54:	e7e7      	b.n	8003c26 <_printf_float+0x192>
 8003c56:	2900      	cmp	r1, #0
 8003c58:	bfd4      	ite	le
 8003c5a:	f1c1 0202 	rsble	r2, r1, #2
 8003c5e:	2201      	movgt	r2, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	e7e0      	b.n	8003c26 <_printf_float+0x192>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	055a      	lsls	r2, r3, #21
 8003c68:	d407      	bmi.n	8003c7a <_printf_float+0x1e6>
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	4631      	mov	r1, r6
 8003c70:	4628      	mov	r0, r5
 8003c72:	47b8      	blx	r7
 8003c74:	3001      	adds	r0, #1
 8003c76:	d12b      	bne.n	8003cd0 <_printf_float+0x23c>
 8003c78:	e767      	b.n	8003b4a <_printf_float+0xb6>
 8003c7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c7e:	f240 80dd 	bls.w	8003e3c <_printf_float+0x3a8>
 8003c82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c86:	2200      	movs	r2, #0
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f7fc ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d033      	beq.n	8003cfa <_printf_float+0x266>
 8003c92:	4a37      	ldr	r2, [pc, #220]	@ (8003d70 <_printf_float+0x2dc>)
 8003c94:	2301      	movs	r3, #1
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f af54 	beq.w	8003b4a <_printf_float+0xb6>
 8003ca2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ca6:	4543      	cmp	r3, r8
 8003ca8:	db02      	blt.n	8003cb0 <_printf_float+0x21c>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	07d8      	lsls	r0, r3, #31
 8003cae:	d50f      	bpl.n	8003cd0 <_printf_float+0x23c>
 8003cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f af45 	beq.w	8003b4a <_printf_float+0xb6>
 8003cc0:	f04f 0900 	mov.w	r9, #0
 8003cc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cc8:	f104 0a1a 	add.w	sl, r4, #26
 8003ccc:	45c8      	cmp	r8, r9
 8003cce:	dc09      	bgt.n	8003ce4 <_printf_float+0x250>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	079b      	lsls	r3, r3, #30
 8003cd4:	f100 8103 	bmi.w	8003ede <_printf_float+0x44a>
 8003cd8:	68e0      	ldr	r0, [r4, #12]
 8003cda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003cdc:	4298      	cmp	r0, r3
 8003cde:	bfb8      	it	lt
 8003ce0:	4618      	movlt	r0, r3
 8003ce2:	e734      	b.n	8003b4e <_printf_float+0xba>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4652      	mov	r2, sl
 8003ce8:	4631      	mov	r1, r6
 8003cea:	4628      	mov	r0, r5
 8003cec:	47b8      	blx	r7
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f43f af2b 	beq.w	8003b4a <_printf_float+0xb6>
 8003cf4:	f109 0901 	add.w	r9, r9, #1
 8003cf8:	e7e8      	b.n	8003ccc <_printf_float+0x238>
 8003cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	dc39      	bgt.n	8003d74 <_printf_float+0x2e0>
 8003d00:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <_printf_float+0x2dc>)
 8003d02:	2301      	movs	r3, #1
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f af1d 	beq.w	8003b4a <_printf_float+0xb6>
 8003d10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003d14:	ea59 0303 	orrs.w	r3, r9, r3
 8003d18:	d102      	bne.n	8003d20 <_printf_float+0x28c>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	07d9      	lsls	r1, r3, #31
 8003d1e:	d5d7      	bpl.n	8003cd0 <_printf_float+0x23c>
 8003d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d24:	4631      	mov	r1, r6
 8003d26:	4628      	mov	r0, r5
 8003d28:	47b8      	blx	r7
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	f43f af0d 	beq.w	8003b4a <_printf_float+0xb6>
 8003d30:	f04f 0a00 	mov.w	sl, #0
 8003d34:	f104 0b1a 	add.w	fp, r4, #26
 8003d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d3a:	425b      	negs	r3, r3
 8003d3c:	4553      	cmp	r3, sl
 8003d3e:	dc01      	bgt.n	8003d44 <_printf_float+0x2b0>
 8003d40:	464b      	mov	r3, r9
 8003d42:	e793      	b.n	8003c6c <_printf_float+0x1d8>
 8003d44:	2301      	movs	r3, #1
 8003d46:	465a      	mov	r2, fp
 8003d48:	4631      	mov	r1, r6
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	47b8      	blx	r7
 8003d4e:	3001      	adds	r0, #1
 8003d50:	f43f aefb 	beq.w	8003b4a <_printf_float+0xb6>
 8003d54:	f10a 0a01 	add.w	sl, sl, #1
 8003d58:	e7ee      	b.n	8003d38 <_printf_float+0x2a4>
 8003d5a:	bf00      	nop
 8003d5c:	7fefffff 	.word	0x7fefffff
 8003d60:	080062cb 	.word	0x080062cb
 8003d64:	080062c7 	.word	0x080062c7
 8003d68:	080062d3 	.word	0x080062d3
 8003d6c:	080062cf 	.word	0x080062cf
 8003d70:	080062d7 	.word	0x080062d7
 8003d74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d7a:	4553      	cmp	r3, sl
 8003d7c:	bfa8      	it	ge
 8003d7e:	4653      	movge	r3, sl
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	4699      	mov	r9, r3
 8003d84:	dc36      	bgt.n	8003df4 <_printf_float+0x360>
 8003d86:	f04f 0b00 	mov.w	fp, #0
 8003d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d8e:	f104 021a 	add.w	r2, r4, #26
 8003d92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d94:	9306      	str	r3, [sp, #24]
 8003d96:	eba3 0309 	sub.w	r3, r3, r9
 8003d9a:	455b      	cmp	r3, fp
 8003d9c:	dc31      	bgt.n	8003e02 <_printf_float+0x36e>
 8003d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003da0:	459a      	cmp	sl, r3
 8003da2:	dc3a      	bgt.n	8003e1a <_printf_float+0x386>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	07da      	lsls	r2, r3, #31
 8003da8:	d437      	bmi.n	8003e1a <_printf_float+0x386>
 8003daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dac:	ebaa 0903 	sub.w	r9, sl, r3
 8003db0:	9b06      	ldr	r3, [sp, #24]
 8003db2:	ebaa 0303 	sub.w	r3, sl, r3
 8003db6:	4599      	cmp	r9, r3
 8003db8:	bfa8      	it	ge
 8003dba:	4699      	movge	r9, r3
 8003dbc:	f1b9 0f00 	cmp.w	r9, #0
 8003dc0:	dc33      	bgt.n	8003e2a <_printf_float+0x396>
 8003dc2:	f04f 0800 	mov.w	r8, #0
 8003dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dca:	f104 0b1a 	add.w	fp, r4, #26
 8003dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dd0:	ebaa 0303 	sub.w	r3, sl, r3
 8003dd4:	eba3 0309 	sub.w	r3, r3, r9
 8003dd8:	4543      	cmp	r3, r8
 8003dda:	f77f af79 	ble.w	8003cd0 <_printf_float+0x23c>
 8003dde:	2301      	movs	r3, #1
 8003de0:	465a      	mov	r2, fp
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	f43f aeae 	beq.w	8003b4a <_printf_float+0xb6>
 8003dee:	f108 0801 	add.w	r8, r8, #1
 8003df2:	e7ec      	b.n	8003dce <_printf_float+0x33a>
 8003df4:	4642      	mov	r2, r8
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b8      	blx	r7
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d1c2      	bne.n	8003d86 <_printf_float+0x2f2>
 8003e00:	e6a3      	b.n	8003b4a <_printf_float+0xb6>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	9206      	str	r2, [sp, #24]
 8003e0a:	47b8      	blx	r7
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	f43f ae9c 	beq.w	8003b4a <_printf_float+0xb6>
 8003e12:	9a06      	ldr	r2, [sp, #24]
 8003e14:	f10b 0b01 	add.w	fp, fp, #1
 8003e18:	e7bb      	b.n	8003d92 <_printf_float+0x2fe>
 8003e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	d1c0      	bne.n	8003daa <_printf_float+0x316>
 8003e28:	e68f      	b.n	8003b4a <_printf_float+0xb6>
 8003e2a:	9a06      	ldr	r2, [sp, #24]
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	4442      	add	r2, r8
 8003e30:	4631      	mov	r1, r6
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b8      	blx	r7
 8003e36:	3001      	adds	r0, #1
 8003e38:	d1c3      	bne.n	8003dc2 <_printf_float+0x32e>
 8003e3a:	e686      	b.n	8003b4a <_printf_float+0xb6>
 8003e3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e40:	f1ba 0f01 	cmp.w	sl, #1
 8003e44:	dc01      	bgt.n	8003e4a <_printf_float+0x3b6>
 8003e46:	07db      	lsls	r3, r3, #31
 8003e48:	d536      	bpl.n	8003eb8 <_printf_float+0x424>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	4631      	mov	r1, r6
 8003e50:	4628      	mov	r0, r5
 8003e52:	47b8      	blx	r7
 8003e54:	3001      	adds	r0, #1
 8003e56:	f43f ae78 	beq.w	8003b4a <_printf_float+0xb6>
 8003e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b8      	blx	r7
 8003e64:	3001      	adds	r0, #1
 8003e66:	f43f ae70 	beq.w	8003b4a <_printf_float+0xb6>
 8003e6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2300      	movs	r3, #0
 8003e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e76:	f7fc fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e7a:	b9c0      	cbnz	r0, 8003eae <_printf_float+0x41a>
 8003e7c:	4653      	mov	r3, sl
 8003e7e:	f108 0201 	add.w	r2, r8, #1
 8003e82:	4631      	mov	r1, r6
 8003e84:	4628      	mov	r0, r5
 8003e86:	47b8      	blx	r7
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d10c      	bne.n	8003ea6 <_printf_float+0x412>
 8003e8c:	e65d      	b.n	8003b4a <_printf_float+0xb6>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	465a      	mov	r2, fp
 8003e92:	4631      	mov	r1, r6
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b8      	blx	r7
 8003e98:	3001      	adds	r0, #1
 8003e9a:	f43f ae56 	beq.w	8003b4a <_printf_float+0xb6>
 8003e9e:	f108 0801 	add.w	r8, r8, #1
 8003ea2:	45d0      	cmp	r8, sl
 8003ea4:	dbf3      	blt.n	8003e8e <_printf_float+0x3fa>
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003eac:	e6df      	b.n	8003c6e <_printf_float+0x1da>
 8003eae:	f04f 0800 	mov.w	r8, #0
 8003eb2:	f104 0b1a 	add.w	fp, r4, #26
 8003eb6:	e7f4      	b.n	8003ea2 <_printf_float+0x40e>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4642      	mov	r2, r8
 8003ebc:	e7e1      	b.n	8003e82 <_printf_float+0x3ee>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	464a      	mov	r2, r9
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	47b8      	blx	r7
 8003ec8:	3001      	adds	r0, #1
 8003eca:	f43f ae3e 	beq.w	8003b4a <_printf_float+0xb6>
 8003ece:	f108 0801 	add.w	r8, r8, #1
 8003ed2:	68e3      	ldr	r3, [r4, #12]
 8003ed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ed6:	1a5b      	subs	r3, r3, r1
 8003ed8:	4543      	cmp	r3, r8
 8003eda:	dcf0      	bgt.n	8003ebe <_printf_float+0x42a>
 8003edc:	e6fc      	b.n	8003cd8 <_printf_float+0x244>
 8003ede:	f04f 0800 	mov.w	r8, #0
 8003ee2:	f104 0919 	add.w	r9, r4, #25
 8003ee6:	e7f4      	b.n	8003ed2 <_printf_float+0x43e>

08003ee8 <_printf_common>:
 8003ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	4616      	mov	r6, r2
 8003eee:	4698      	mov	r8, r3
 8003ef0:	688a      	ldr	r2, [r1, #8]
 8003ef2:	690b      	ldr	r3, [r1, #16]
 8003ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfb8      	it	lt
 8003efc:	4613      	movlt	r3, r2
 8003efe:	6033      	str	r3, [r6, #0]
 8003f00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f04:	4607      	mov	r7, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	b10a      	cbz	r2, 8003f0e <_printf_common+0x26>
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	0699      	lsls	r1, r3, #26
 8003f12:	bf42      	ittt	mi
 8003f14:	6833      	ldrmi	r3, [r6, #0]
 8003f16:	3302      	addmi	r3, #2
 8003f18:	6033      	strmi	r3, [r6, #0]
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	f015 0506 	ands.w	r5, r5, #6
 8003f20:	d106      	bne.n	8003f30 <_printf_common+0x48>
 8003f22:	f104 0a19 	add.w	sl, r4, #25
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dc26      	bgt.n	8003f7e <_printf_common+0x96>
 8003f30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	3b00      	subs	r3, #0
 8003f38:	bf18      	it	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	0692      	lsls	r2, r2, #26
 8003f3e:	d42b      	bmi.n	8003f98 <_printf_common+0xb0>
 8003f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f44:	4641      	mov	r1, r8
 8003f46:	4638      	mov	r0, r7
 8003f48:	47c8      	blx	r9
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d01e      	beq.n	8003f8c <_printf_common+0xa4>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	f003 0306 	and.w	r3, r3, #6
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf02      	ittt	eq
 8003f5a:	68e5      	ldreq	r5, [r4, #12]
 8003f5c:	6833      	ldreq	r3, [r6, #0]
 8003f5e:	1aed      	subeq	r5, r5, r3
 8003f60:	68a3      	ldr	r3, [r4, #8]
 8003f62:	bf0c      	ite	eq
 8003f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f68:	2500      	movne	r5, #0
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	bfc4      	itt	gt
 8003f6e:	1a9b      	subgt	r3, r3, r2
 8003f70:	18ed      	addgt	r5, r5, r3
 8003f72:	2600      	movs	r6, #0
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xc8>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xa8>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4641      	mov	r1, r8
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c8      	blx	r9
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xac>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c6      	b.n	8003f26 <_printf_common+0x3e>
 8003f98:	18e1      	adds	r1, r4, r3
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	2030      	movs	r0, #48	@ 0x30
 8003f9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fa2:	4422      	add	r2, r4
 8003fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fac:	3302      	adds	r3, #2
 8003fae:	e7c7      	b.n	8003f40 <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c8      	blx	r9
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa4>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x8e>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fcc:	2f78      	cmp	r7, #120	@ 0x78
 8003fce:	4691      	mov	r9, r2
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	469a      	mov	sl, r3
 8003fd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	@ 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d1 	beq.w	8004188 <_printf_i+0x1c4>
 8003fe6:	2f58      	cmp	r7, #88	@ 0x58
 8003fe8:	f000 80b8 	beq.w	800415c <_printf_i+0x198>
 8003fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	@ (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	0800416f 	.word	0x0800416f
 8004034:	0800409b 	.word	0x0800409b
 8004038:	08004129 	.word	0x08004129
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	08004191 	.word	0x08004191
 8004048:	08003fed 	.word	0x08003fed
 800404c:	0800409b 	.word	0x0800409b
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004131 	.word	0x08004131
 800405c:	6833      	ldr	r3, [r6, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6032      	str	r2, [r6, #0]
 8004064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e09c      	b.n	80041aa <_printf_i+0x1e6>
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	6820      	ldr	r0, [r4, #0]
 8004074:	1d19      	adds	r1, r3, #4
 8004076:	6031      	str	r1, [r6, #0]
 8004078:	0606      	lsls	r6, r0, #24
 800407a:	d501      	bpl.n	8004080 <_printf_i+0xbc>
 800407c:	681d      	ldr	r5, [r3, #0]
 800407e:	e003      	b.n	8004088 <_printf_i+0xc4>
 8004080:	0645      	lsls	r5, r0, #25
 8004082:	d5fb      	bpl.n	800407c <_printf_i+0xb8>
 8004084:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004088:	2d00      	cmp	r5, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xd0>
 800408c:	232d      	movs	r3, #45	@ 0x2d
 800408e:	426d      	negs	r5, r5
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004094:	4858      	ldr	r0, [pc, #352]	@ (80041f8 <_printf_i+0x234>)
 8004096:	230a      	movs	r3, #10
 8004098:	e011      	b.n	80040be <_printf_i+0xfa>
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	6833      	ldr	r3, [r6, #0]
 800409e:	0608      	lsls	r0, r1, #24
 80040a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a4:	d402      	bmi.n	80040ac <_printf_i+0xe8>
 80040a6:	0649      	lsls	r1, r1, #25
 80040a8:	bf48      	it	mi
 80040aa:	b2ad      	uxthmi	r5, r5
 80040ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80040ae:	4852      	ldr	r0, [pc, #328]	@ (80041f8 <_printf_i+0x234>)
 80040b0:	6033      	str	r3, [r6, #0]
 80040b2:	bf14      	ite	ne
 80040b4:	230a      	movne	r3, #10
 80040b6:	2308      	moveq	r3, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040be:	6866      	ldr	r6, [r4, #4]
 80040c0:	60a6      	str	r6, [r4, #8]
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	db05      	blt.n	80040d2 <_printf_i+0x10e>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	432e      	orrs	r6, r5
 80040ca:	f021 0104 	bic.w	r1, r1, #4
 80040ce:	6021      	str	r1, [r4, #0]
 80040d0:	d04b      	beq.n	800416a <_printf_i+0x1a6>
 80040d2:	4616      	mov	r6, r2
 80040d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80040d8:	fb03 5711 	mls	r7, r3, r1, r5
 80040dc:	5dc7      	ldrb	r7, [r0, r7]
 80040de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e2:	462f      	mov	r7, r5
 80040e4:	42bb      	cmp	r3, r7
 80040e6:	460d      	mov	r5, r1
 80040e8:	d9f4      	bls.n	80040d4 <_printf_i+0x110>
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d10b      	bne.n	8004106 <_printf_i+0x142>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	07df      	lsls	r7, r3, #31
 80040f2:	d508      	bpl.n	8004106 <_printf_i+0x142>
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	6861      	ldr	r1, [r4, #4]
 80040f8:	4299      	cmp	r1, r3
 80040fa:	bfde      	ittt	le
 80040fc:	2330      	movle	r3, #48	@ 0x30
 80040fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004102:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004106:	1b92      	subs	r2, r2, r6
 8004108:	6122      	str	r2, [r4, #16]
 800410a:	f8cd a000 	str.w	sl, [sp]
 800410e:	464b      	mov	r3, r9
 8004110:	aa03      	add	r2, sp, #12
 8004112:	4621      	mov	r1, r4
 8004114:	4640      	mov	r0, r8
 8004116:	f7ff fee7 	bl	8003ee8 <_printf_common>
 800411a:	3001      	adds	r0, #1
 800411c:	d14a      	bne.n	80041b4 <_printf_i+0x1f0>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295
 8004122:	b004      	add	sp, #16
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f043 0320 	orr.w	r3, r3, #32
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	4832      	ldr	r0, [pc, #200]	@ (80041fc <_printf_i+0x238>)
 8004132:	2778      	movs	r7, #120	@ 0x78
 8004134:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	6831      	ldr	r1, [r6, #0]
 800413c:	061f      	lsls	r7, r3, #24
 800413e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004142:	d402      	bmi.n	800414a <_printf_i+0x186>
 8004144:	065f      	lsls	r7, r3, #25
 8004146:	bf48      	it	mi
 8004148:	b2ad      	uxthmi	r5, r5
 800414a:	6031      	str	r1, [r6, #0]
 800414c:	07d9      	lsls	r1, r3, #31
 800414e:	bf44      	itt	mi
 8004150:	f043 0320 	orrmi.w	r3, r3, #32
 8004154:	6023      	strmi	r3, [r4, #0]
 8004156:	b11d      	cbz	r5, 8004160 <_printf_i+0x19c>
 8004158:	2310      	movs	r3, #16
 800415a:	e7ad      	b.n	80040b8 <_printf_i+0xf4>
 800415c:	4826      	ldr	r0, [pc, #152]	@ (80041f8 <_printf_i+0x234>)
 800415e:	e7e9      	b.n	8004134 <_printf_i+0x170>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	e7f6      	b.n	8004158 <_printf_i+0x194>
 800416a:	4616      	mov	r6, r2
 800416c:	e7bd      	b.n	80040ea <_printf_i+0x126>
 800416e:	6833      	ldr	r3, [r6, #0]
 8004170:	6825      	ldr	r5, [r4, #0]
 8004172:	6961      	ldr	r1, [r4, #20]
 8004174:	1d18      	adds	r0, r3, #4
 8004176:	6030      	str	r0, [r6, #0]
 8004178:	062e      	lsls	r6, r5, #24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	d501      	bpl.n	8004182 <_printf_i+0x1be>
 800417e:	6019      	str	r1, [r3, #0]
 8004180:	e002      	b.n	8004188 <_printf_i+0x1c4>
 8004182:	0668      	lsls	r0, r5, #25
 8004184:	d5fb      	bpl.n	800417e <_printf_i+0x1ba>
 8004186:	8019      	strh	r1, [r3, #0]
 8004188:	2300      	movs	r3, #0
 800418a:	6123      	str	r3, [r4, #16]
 800418c:	4616      	mov	r6, r2
 800418e:	e7bc      	b.n	800410a <_printf_i+0x146>
 8004190:	6833      	ldr	r3, [r6, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	6032      	str	r2, [r6, #0]
 8004196:	681e      	ldr	r6, [r3, #0]
 8004198:	6862      	ldr	r2, [r4, #4]
 800419a:	2100      	movs	r1, #0
 800419c:	4630      	mov	r0, r6
 800419e:	f7fc f817 	bl	80001d0 <memchr>
 80041a2:	b108      	cbz	r0, 80041a8 <_printf_i+0x1e4>
 80041a4:	1b80      	subs	r0, r0, r6
 80041a6:	6060      	str	r0, [r4, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	2300      	movs	r3, #0
 80041ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b2:	e7aa      	b.n	800410a <_printf_i+0x146>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	4632      	mov	r2, r6
 80041b8:	4649      	mov	r1, r9
 80041ba:	4640      	mov	r0, r8
 80041bc:	47d0      	blx	sl
 80041be:	3001      	adds	r0, #1
 80041c0:	d0ad      	beq.n	800411e <_printf_i+0x15a>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	079b      	lsls	r3, r3, #30
 80041c6:	d413      	bmi.n	80041f0 <_printf_i+0x22c>
 80041c8:	68e0      	ldr	r0, [r4, #12]
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	4298      	cmp	r0, r3
 80041ce:	bfb8      	it	lt
 80041d0:	4618      	movlt	r0, r3
 80041d2:	e7a6      	b.n	8004122 <_printf_i+0x15e>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4632      	mov	r2, r6
 80041d8:	4649      	mov	r1, r9
 80041da:	4640      	mov	r0, r8
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d09d      	beq.n	800411e <_printf_i+0x15a>
 80041e2:	3501      	adds	r5, #1
 80041e4:	68e3      	ldr	r3, [r4, #12]
 80041e6:	9903      	ldr	r1, [sp, #12]
 80041e8:	1a5b      	subs	r3, r3, r1
 80041ea:	42ab      	cmp	r3, r5
 80041ec:	dcf2      	bgt.n	80041d4 <_printf_i+0x210>
 80041ee:	e7eb      	b.n	80041c8 <_printf_i+0x204>
 80041f0:	2500      	movs	r5, #0
 80041f2:	f104 0619 	add.w	r6, r4, #25
 80041f6:	e7f5      	b.n	80041e4 <_printf_i+0x220>
 80041f8:	080062d9 	.word	0x080062d9
 80041fc:	080062ea 	.word	0x080062ea

08004200 <std>:
 8004200:	2300      	movs	r3, #0
 8004202:	b510      	push	{r4, lr}
 8004204:	4604      	mov	r4, r0
 8004206:	e9c0 3300 	strd	r3, r3, [r0]
 800420a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800420e:	6083      	str	r3, [r0, #8]
 8004210:	8181      	strh	r1, [r0, #12]
 8004212:	6643      	str	r3, [r0, #100]	@ 0x64
 8004214:	81c2      	strh	r2, [r0, #14]
 8004216:	6183      	str	r3, [r0, #24]
 8004218:	4619      	mov	r1, r3
 800421a:	2208      	movs	r2, #8
 800421c:	305c      	adds	r0, #92	@ 0x5c
 800421e:	f000 f906 	bl	800442e <memset>
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <std+0x58>)
 8004224:	6263      	str	r3, [r4, #36]	@ 0x24
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <std+0x5c>)
 8004228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800422a:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <std+0x60>)
 800422c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <std+0x64>)
 8004230:	6323      	str	r3, [r4, #48]	@ 0x30
 8004232:	4b0d      	ldr	r3, [pc, #52]	@ (8004268 <std+0x68>)
 8004234:	6224      	str	r4, [r4, #32]
 8004236:	429c      	cmp	r4, r3
 8004238:	d006      	beq.n	8004248 <std+0x48>
 800423a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800423e:	4294      	cmp	r4, r2
 8004240:	d002      	beq.n	8004248 <std+0x48>
 8004242:	33d0      	adds	r3, #208	@ 0xd0
 8004244:	429c      	cmp	r4, r3
 8004246:	d105      	bne.n	8004254 <std+0x54>
 8004248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800424c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004250:	f000 b96a 	b.w	8004528 <__retarget_lock_init_recursive>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	bf00      	nop
 8004258:	080043a9 	.word	0x080043a9
 800425c:	080043cb 	.word	0x080043cb
 8004260:	08004403 	.word	0x08004403
 8004264:	08004427 	.word	0x08004427
 8004268:	200001fc 	.word	0x200001fc

0800426c <stdio_exit_handler>:
 800426c:	4a02      	ldr	r2, [pc, #8]	@ (8004278 <stdio_exit_handler+0xc>)
 800426e:	4903      	ldr	r1, [pc, #12]	@ (800427c <stdio_exit_handler+0x10>)
 8004270:	4803      	ldr	r0, [pc, #12]	@ (8004280 <stdio_exit_handler+0x14>)
 8004272:	f000 b869 	b.w	8004348 <_fwalk_sglue>
 8004276:	bf00      	nop
 8004278:	2000000c 	.word	0x2000000c
 800427c:	08005e61 	.word	0x08005e61
 8004280:	2000001c 	.word	0x2000001c

08004284 <cleanup_stdio>:
 8004284:	6841      	ldr	r1, [r0, #4]
 8004286:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <cleanup_stdio+0x34>)
 8004288:	4299      	cmp	r1, r3
 800428a:	b510      	push	{r4, lr}
 800428c:	4604      	mov	r4, r0
 800428e:	d001      	beq.n	8004294 <cleanup_stdio+0x10>
 8004290:	f001 fde6 	bl	8005e60 <_fflush_r>
 8004294:	68a1      	ldr	r1, [r4, #8]
 8004296:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <cleanup_stdio+0x38>)
 8004298:	4299      	cmp	r1, r3
 800429a:	d002      	beq.n	80042a2 <cleanup_stdio+0x1e>
 800429c:	4620      	mov	r0, r4
 800429e:	f001 fddf 	bl	8005e60 <_fflush_r>
 80042a2:	68e1      	ldr	r1, [r4, #12]
 80042a4:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <cleanup_stdio+0x3c>)
 80042a6:	4299      	cmp	r1, r3
 80042a8:	d004      	beq.n	80042b4 <cleanup_stdio+0x30>
 80042aa:	4620      	mov	r0, r4
 80042ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b0:	f001 bdd6 	b.w	8005e60 <_fflush_r>
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	200001fc 	.word	0x200001fc
 80042bc:	20000264 	.word	0x20000264
 80042c0:	200002cc 	.word	0x200002cc

080042c4 <global_stdio_init.part.0>:
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <global_stdio_init.part.0+0x30>)
 80042c8:	4c0b      	ldr	r4, [pc, #44]	@ (80042f8 <global_stdio_init.part.0+0x34>)
 80042ca:	4a0c      	ldr	r2, [pc, #48]	@ (80042fc <global_stdio_init.part.0+0x38>)
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	4620      	mov	r0, r4
 80042d0:	2200      	movs	r2, #0
 80042d2:	2104      	movs	r1, #4
 80042d4:	f7ff ff94 	bl	8004200 <std>
 80042d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042dc:	2201      	movs	r2, #1
 80042de:	2109      	movs	r1, #9
 80042e0:	f7ff ff8e 	bl	8004200 <std>
 80042e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042e8:	2202      	movs	r2, #2
 80042ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ee:	2112      	movs	r1, #18
 80042f0:	f7ff bf86 	b.w	8004200 <std>
 80042f4:	20000334 	.word	0x20000334
 80042f8:	200001fc 	.word	0x200001fc
 80042fc:	0800426d 	.word	0x0800426d

08004300 <__sfp_lock_acquire>:
 8004300:	4801      	ldr	r0, [pc, #4]	@ (8004308 <__sfp_lock_acquire+0x8>)
 8004302:	f000 b912 	b.w	800452a <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	2000033d 	.word	0x2000033d

0800430c <__sfp_lock_release>:
 800430c:	4801      	ldr	r0, [pc, #4]	@ (8004314 <__sfp_lock_release+0x8>)
 800430e:	f000 b90d 	b.w	800452c <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	2000033d 	.word	0x2000033d

08004318 <__sinit>:
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	f7ff fff0 	bl	8004300 <__sfp_lock_acquire>
 8004320:	6a23      	ldr	r3, [r4, #32]
 8004322:	b11b      	cbz	r3, 800432c <__sinit+0x14>
 8004324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004328:	f7ff bff0 	b.w	800430c <__sfp_lock_release>
 800432c:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <__sinit+0x28>)
 800432e:	6223      	str	r3, [r4, #32]
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <__sinit+0x2c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f5      	bne.n	8004324 <__sinit+0xc>
 8004338:	f7ff ffc4 	bl	80042c4 <global_stdio_init.part.0>
 800433c:	e7f2      	b.n	8004324 <__sinit+0xc>
 800433e:	bf00      	nop
 8004340:	08004285 	.word	0x08004285
 8004344:	20000334 	.word	0x20000334

08004348 <_fwalk_sglue>:
 8004348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800434c:	4607      	mov	r7, r0
 800434e:	4688      	mov	r8, r1
 8004350:	4614      	mov	r4, r2
 8004352:	2600      	movs	r6, #0
 8004354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004358:	f1b9 0901 	subs.w	r9, r9, #1
 800435c:	d505      	bpl.n	800436a <_fwalk_sglue+0x22>
 800435e:	6824      	ldr	r4, [r4, #0]
 8004360:	2c00      	cmp	r4, #0
 8004362:	d1f7      	bne.n	8004354 <_fwalk_sglue+0xc>
 8004364:	4630      	mov	r0, r6
 8004366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800436a:	89ab      	ldrh	r3, [r5, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d907      	bls.n	8004380 <_fwalk_sglue+0x38>
 8004370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004374:	3301      	adds	r3, #1
 8004376:	d003      	beq.n	8004380 <_fwalk_sglue+0x38>
 8004378:	4629      	mov	r1, r5
 800437a:	4638      	mov	r0, r7
 800437c:	47c0      	blx	r8
 800437e:	4306      	orrs	r6, r0
 8004380:	3568      	adds	r5, #104	@ 0x68
 8004382:	e7e9      	b.n	8004358 <_fwalk_sglue+0x10>

08004384 <iprintf>:
 8004384:	b40f      	push	{r0, r1, r2, r3}
 8004386:	b507      	push	{r0, r1, r2, lr}
 8004388:	4906      	ldr	r1, [pc, #24]	@ (80043a4 <iprintf+0x20>)
 800438a:	ab04      	add	r3, sp, #16
 800438c:	6808      	ldr	r0, [r1, #0]
 800438e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004392:	6881      	ldr	r1, [r0, #8]
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	f001 fbc7 	bl	8005b28 <_vfiprintf_r>
 800439a:	b003      	add	sp, #12
 800439c:	f85d eb04 	ldr.w	lr, [sp], #4
 80043a0:	b004      	add	sp, #16
 80043a2:	4770      	bx	lr
 80043a4:	20000018 	.word	0x20000018

080043a8 <__sread>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	460c      	mov	r4, r1
 80043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b0:	f000 f86c 	bl	800448c <_read_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	bfab      	itete	ge
 80043b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ba:	89a3      	ldrhlt	r3, [r4, #12]
 80043bc:	181b      	addge	r3, r3, r0
 80043be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043c2:	bfac      	ite	ge
 80043c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043c6:	81a3      	strhlt	r3, [r4, #12]
 80043c8:	bd10      	pop	{r4, pc}

080043ca <__swrite>:
 80043ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	461f      	mov	r7, r3
 80043d0:	898b      	ldrh	r3, [r1, #12]
 80043d2:	05db      	lsls	r3, r3, #23
 80043d4:	4605      	mov	r5, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4616      	mov	r6, r2
 80043da:	d505      	bpl.n	80043e8 <__swrite+0x1e>
 80043dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e0:	2302      	movs	r3, #2
 80043e2:	2200      	movs	r2, #0
 80043e4:	f000 f840 	bl	8004468 <_lseek_r>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	4632      	mov	r2, r6
 80043f6:	463b      	mov	r3, r7
 80043f8:	4628      	mov	r0, r5
 80043fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043fe:	f000 b857 	b.w	80044b0 <_write_r>

08004402 <__sseek>:
 8004402:	b510      	push	{r4, lr}
 8004404:	460c      	mov	r4, r1
 8004406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440a:	f000 f82d 	bl	8004468 <_lseek_r>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	bf15      	itete	ne
 8004414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800441a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800441e:	81a3      	strheq	r3, [r4, #12]
 8004420:	bf18      	it	ne
 8004422:	81a3      	strhne	r3, [r4, #12]
 8004424:	bd10      	pop	{r4, pc}

08004426 <__sclose>:
 8004426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442a:	f000 b80d 	b.w	8004448 <_close_r>

0800442e <memset>:
 800442e:	4402      	add	r2, r0
 8004430:	4603      	mov	r3, r0
 8004432:	4293      	cmp	r3, r2
 8004434:	d100      	bne.n	8004438 <memset+0xa>
 8004436:	4770      	bx	lr
 8004438:	f803 1b01 	strb.w	r1, [r3], #1
 800443c:	e7f9      	b.n	8004432 <memset+0x4>
	...

08004440 <_localeconv_r>:
 8004440:	4800      	ldr	r0, [pc, #0]	@ (8004444 <_localeconv_r+0x4>)
 8004442:	4770      	bx	lr
 8004444:	20000158 	.word	0x20000158

08004448 <_close_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d06      	ldr	r5, [pc, #24]	@ (8004464 <_close_r+0x1c>)
 800444c:	2300      	movs	r3, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fd f866 	bl	8001524 <_close>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_close_r+0x1a>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	b103      	cbz	r3, 8004462 <_close_r+0x1a>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	20000338 	.word	0x20000338

08004468 <_lseek_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	@ (8004488 <_lseek_r+0x20>)
 800446c:	4604      	mov	r4, r0
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	2200      	movs	r2, #0
 8004474:	602a      	str	r2, [r5, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f7fd f87b 	bl	8001572 <_lseek>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_lseek_r+0x1e>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_lseek_r+0x1e>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20000338 	.word	0x20000338

0800448c <_read_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d07      	ldr	r5, [pc, #28]	@ (80044ac <_read_r+0x20>)
 8004490:	4604      	mov	r4, r0
 8004492:	4608      	mov	r0, r1
 8004494:	4611      	mov	r1, r2
 8004496:	2200      	movs	r2, #0
 8004498:	602a      	str	r2, [r5, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f7fd f825 	bl	80014ea <_read>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_read_r+0x1e>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_read_r+0x1e>
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20000338 	.word	0x20000338

080044b0 <_write_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d07      	ldr	r5, [pc, #28]	@ (80044d0 <_write_r+0x20>)
 80044b4:	4604      	mov	r4, r0
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	2200      	movs	r2, #0
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f7fc fe2c 	bl	800111c <_write>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_write_r+0x1e>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_write_r+0x1e>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000338 	.word	0x20000338

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	@ (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000018 	.word	0x20000018

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004518 <__libc_init_array+0x38>)
 80044e4:	4c0d      	ldr	r4, [pc, #52]	@ (800451c <__libc_init_array+0x3c>)
 80044e6:	1b64      	subs	r4, r4, r5
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	2600      	movs	r6, #0
 80044ec:	42a6      	cmp	r6, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004520 <__libc_init_array+0x40>)
 80044f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004524 <__libc_init_array+0x44>)
 80044f4:	f001 fec2 	bl	800627c <_init>
 80044f8:	1b64      	subs	r4, r4, r5
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	2600      	movs	r6, #0
 80044fe:	42a6      	cmp	r6, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f855 3b04 	ldr.w	r3, [r5], #4
 8004508:	4798      	blx	r3
 800450a:	3601      	adds	r6, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004512:	4798      	blx	r3
 8004514:	3601      	adds	r6, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	08006644 	.word	0x08006644
 800451c:	08006644 	.word	0x08006644
 8004520:	08006644 	.word	0x08006644
 8004524:	08006648 	.word	0x08006648

08004528 <__retarget_lock_init_recursive>:
 8004528:	4770      	bx	lr

0800452a <__retarget_lock_acquire_recursive>:
 800452a:	4770      	bx	lr

0800452c <__retarget_lock_release_recursive>:
 800452c:	4770      	bx	lr

0800452e <quorem>:
 800452e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004532:	6903      	ldr	r3, [r0, #16]
 8004534:	690c      	ldr	r4, [r1, #16]
 8004536:	42a3      	cmp	r3, r4
 8004538:	4607      	mov	r7, r0
 800453a:	db7e      	blt.n	800463a <quorem+0x10c>
 800453c:	3c01      	subs	r4, #1
 800453e:	f101 0814 	add.w	r8, r1, #20
 8004542:	00a3      	lsls	r3, r4, #2
 8004544:	f100 0514 	add.w	r5, r0, #20
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004558:	3301      	adds	r3, #1
 800455a:	429a      	cmp	r2, r3
 800455c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004560:	fbb2 f6f3 	udiv	r6, r2, r3
 8004564:	d32e      	bcc.n	80045c4 <quorem+0x96>
 8004566:	f04f 0a00 	mov.w	sl, #0
 800456a:	46c4      	mov	ip, r8
 800456c:	46ae      	mov	lr, r5
 800456e:	46d3      	mov	fp, sl
 8004570:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004574:	b298      	uxth	r0, r3
 8004576:	fb06 a000 	mla	r0, r6, r0, sl
 800457a:	0c02      	lsrs	r2, r0, #16
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	fb06 2303 	mla	r3, r6, r3, r2
 8004582:	f8de 2000 	ldr.w	r2, [lr]
 8004586:	b280      	uxth	r0, r0
 8004588:	b292      	uxth	r2, r2
 800458a:	1a12      	subs	r2, r2, r0
 800458c:	445a      	add	r2, fp
 800458e:	f8de 0000 	ldr.w	r0, [lr]
 8004592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004596:	b29b      	uxth	r3, r3
 8004598:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800459c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80045a0:	b292      	uxth	r2, r2
 80045a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80045a6:	45e1      	cmp	r9, ip
 80045a8:	f84e 2b04 	str.w	r2, [lr], #4
 80045ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80045b0:	d2de      	bcs.n	8004570 <quorem+0x42>
 80045b2:	9b00      	ldr	r3, [sp, #0]
 80045b4:	58eb      	ldr	r3, [r5, r3]
 80045b6:	b92b      	cbnz	r3, 80045c4 <quorem+0x96>
 80045b8:	9b01      	ldr	r3, [sp, #4]
 80045ba:	3b04      	subs	r3, #4
 80045bc:	429d      	cmp	r5, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	d32f      	bcc.n	8004622 <quorem+0xf4>
 80045c2:	613c      	str	r4, [r7, #16]
 80045c4:	4638      	mov	r0, r7
 80045c6:	f001 f97d 	bl	80058c4 <__mcmp>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	db25      	blt.n	800461a <quorem+0xec>
 80045ce:	4629      	mov	r1, r5
 80045d0:	2000      	movs	r0, #0
 80045d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80045d6:	f8d1 c000 	ldr.w	ip, [r1]
 80045da:	fa1f fe82 	uxth.w	lr, r2
 80045de:	fa1f f38c 	uxth.w	r3, ip
 80045e2:	eba3 030e 	sub.w	r3, r3, lr
 80045e6:	4403      	add	r3, r0
 80045e8:	0c12      	lsrs	r2, r2, #16
 80045ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045f8:	45c1      	cmp	r9, r8
 80045fa:	f841 3b04 	str.w	r3, [r1], #4
 80045fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004602:	d2e6      	bcs.n	80045d2 <quorem+0xa4>
 8004604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800460c:	b922      	cbnz	r2, 8004618 <quorem+0xea>
 800460e:	3b04      	subs	r3, #4
 8004610:	429d      	cmp	r5, r3
 8004612:	461a      	mov	r2, r3
 8004614:	d30b      	bcc.n	800462e <quorem+0x100>
 8004616:	613c      	str	r4, [r7, #16]
 8004618:	3601      	adds	r6, #1
 800461a:	4630      	mov	r0, r6
 800461c:	b003      	add	sp, #12
 800461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	3b04      	subs	r3, #4
 8004626:	2a00      	cmp	r2, #0
 8004628:	d1cb      	bne.n	80045c2 <quorem+0x94>
 800462a:	3c01      	subs	r4, #1
 800462c:	e7c6      	b.n	80045bc <quorem+0x8e>
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	3b04      	subs	r3, #4
 8004632:	2a00      	cmp	r2, #0
 8004634:	d1ef      	bne.n	8004616 <quorem+0xe8>
 8004636:	3c01      	subs	r4, #1
 8004638:	e7ea      	b.n	8004610 <quorem+0xe2>
 800463a:	2000      	movs	r0, #0
 800463c:	e7ee      	b.n	800461c <quorem+0xee>
	...

08004640 <_dtoa_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	69c7      	ldr	r7, [r0, #28]
 8004646:	b097      	sub	sp, #92	@ 0x5c
 8004648:	ed8d 0b04 	vstr	d0, [sp, #16]
 800464c:	ec55 4b10 	vmov	r4, r5, d0
 8004650:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004652:	9107      	str	r1, [sp, #28]
 8004654:	4681      	mov	r9, r0
 8004656:	920c      	str	r2, [sp, #48]	@ 0x30
 8004658:	9311      	str	r3, [sp, #68]	@ 0x44
 800465a:	b97f      	cbnz	r7, 800467c <_dtoa_r+0x3c>
 800465c:	2010      	movs	r0, #16
 800465e:	f000 fe09 	bl	8005274 <malloc>
 8004662:	4602      	mov	r2, r0
 8004664:	f8c9 001c 	str.w	r0, [r9, #28]
 8004668:	b920      	cbnz	r0, 8004674 <_dtoa_r+0x34>
 800466a:	4ba9      	ldr	r3, [pc, #676]	@ (8004910 <_dtoa_r+0x2d0>)
 800466c:	21ef      	movs	r1, #239	@ 0xef
 800466e:	48a9      	ldr	r0, [pc, #676]	@ (8004914 <_dtoa_r+0x2d4>)
 8004670:	f001 fcd0 	bl	8006014 <__assert_func>
 8004674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004678:	6007      	str	r7, [r0, #0]
 800467a:	60c7      	str	r7, [r0, #12]
 800467c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004680:	6819      	ldr	r1, [r3, #0]
 8004682:	b159      	cbz	r1, 800469c <_dtoa_r+0x5c>
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	604a      	str	r2, [r1, #4]
 8004688:	2301      	movs	r3, #1
 800468a:	4093      	lsls	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
 800468e:	4648      	mov	r0, r9
 8004690:	f000 fee6 	bl	8005460 <_Bfree>
 8004694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	1e2b      	subs	r3, r5, #0
 800469e:	bfb9      	ittee	lt
 80046a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80046a4:	9305      	strlt	r3, [sp, #20]
 80046a6:	2300      	movge	r3, #0
 80046a8:	6033      	strge	r3, [r6, #0]
 80046aa:	9f05      	ldr	r7, [sp, #20]
 80046ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004918 <_dtoa_r+0x2d8>)
 80046ae:	bfbc      	itt	lt
 80046b0:	2201      	movlt	r2, #1
 80046b2:	6032      	strlt	r2, [r6, #0]
 80046b4:	43bb      	bics	r3, r7
 80046b6:	d112      	bne.n	80046de <_dtoa_r+0x9e>
 80046b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80046ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80046c4:	4323      	orrs	r3, r4
 80046c6:	f000 855a 	beq.w	800517e <_dtoa_r+0xb3e>
 80046ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800492c <_dtoa_r+0x2ec>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 855c 	beq.w	800518e <_dtoa_r+0xb4e>
 80046d6:	f10a 0303 	add.w	r3, sl, #3
 80046da:	f000 bd56 	b.w	800518a <_dtoa_r+0xb4a>
 80046de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80046e2:	2200      	movs	r2, #0
 80046e4:	ec51 0b17 	vmov	r0, r1, d7
 80046e8:	2300      	movs	r3, #0
 80046ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80046ee:	f7fc f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80046f2:	4680      	mov	r8, r0
 80046f4:	b158      	cbz	r0, 800470e <_dtoa_r+0xce>
 80046f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80046f8:	2301      	movs	r3, #1
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046fe:	b113      	cbz	r3, 8004706 <_dtoa_r+0xc6>
 8004700:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004702:	4b86      	ldr	r3, [pc, #536]	@ (800491c <_dtoa_r+0x2dc>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004930 <_dtoa_r+0x2f0>
 800470a:	f000 bd40 	b.w	800518e <_dtoa_r+0xb4e>
 800470e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004712:	aa14      	add	r2, sp, #80	@ 0x50
 8004714:	a915      	add	r1, sp, #84	@ 0x54
 8004716:	4648      	mov	r0, r9
 8004718:	f001 f984 	bl	8005a24 <__d2b>
 800471c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004720:	9002      	str	r0, [sp, #8]
 8004722:	2e00      	cmp	r6, #0
 8004724:	d078      	beq.n	8004818 <_dtoa_r+0x1d8>
 8004726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004728:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800472c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800473c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004740:	4619      	mov	r1, r3
 8004742:	2200      	movs	r2, #0
 8004744:	4b76      	ldr	r3, [pc, #472]	@ (8004920 <_dtoa_r+0x2e0>)
 8004746:	f7fb fd9f 	bl	8000288 <__aeabi_dsub>
 800474a:	a36b      	add	r3, pc, #428	@ (adr r3, 80048f8 <_dtoa_r+0x2b8>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb ff52 	bl	80005f8 <__aeabi_dmul>
 8004754:	a36a      	add	r3, pc, #424	@ (adr r3, 8004900 <_dtoa_r+0x2c0>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb fd97 	bl	800028c <__adddf3>
 800475e:	4604      	mov	r4, r0
 8004760:	4630      	mov	r0, r6
 8004762:	460d      	mov	r5, r1
 8004764:	f7fb fede 	bl	8000524 <__aeabi_i2d>
 8004768:	a367      	add	r3, pc, #412	@ (adr r3, 8004908 <_dtoa_r+0x2c8>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fb ff43 	bl	80005f8 <__aeabi_dmul>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f7fb fd87 	bl	800028c <__adddf3>
 800477e:	4604      	mov	r4, r0
 8004780:	460d      	mov	r5, r1
 8004782:	f7fc f9e9 	bl	8000b58 <__aeabi_d2iz>
 8004786:	2200      	movs	r2, #0
 8004788:	4607      	mov	r7, r0
 800478a:	2300      	movs	r3, #0
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fc f9a4 	bl	8000adc <__aeabi_dcmplt>
 8004794:	b140      	cbz	r0, 80047a8 <_dtoa_r+0x168>
 8004796:	4638      	mov	r0, r7
 8004798:	f7fb fec4 	bl	8000524 <__aeabi_i2d>
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	f7fc f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80047a4:	b900      	cbnz	r0, 80047a8 <_dtoa_r+0x168>
 80047a6:	3f01      	subs	r7, #1
 80047a8:	2f16      	cmp	r7, #22
 80047aa:	d852      	bhi.n	8004852 <_dtoa_r+0x212>
 80047ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004924 <_dtoa_r+0x2e4>)
 80047ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047ba:	f7fc f98f 	bl	8000adc <__aeabi_dcmplt>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d049      	beq.n	8004856 <_dtoa_r+0x216>
 80047c2:	3f01      	subs	r7, #1
 80047c4:	2300      	movs	r3, #0
 80047c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80047c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047ca:	1b9b      	subs	r3, r3, r6
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	bf45      	ittet	mi
 80047d0:	f1c3 0301 	rsbmi	r3, r3, #1
 80047d4:	9300      	strmi	r3, [sp, #0]
 80047d6:	2300      	movpl	r3, #0
 80047d8:	2300      	movmi	r3, #0
 80047da:	9206      	str	r2, [sp, #24]
 80047dc:	bf54      	ite	pl
 80047de:	9300      	strpl	r3, [sp, #0]
 80047e0:	9306      	strmi	r3, [sp, #24]
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	db39      	blt.n	800485a <_dtoa_r+0x21a>
 80047e6:	9b06      	ldr	r3, [sp, #24]
 80047e8:	970d      	str	r7, [sp, #52]	@ 0x34
 80047ea:	443b      	add	r3, r7
 80047ec:	9306      	str	r3, [sp, #24]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9308      	str	r3, [sp, #32]
 80047f2:	9b07      	ldr	r3, [sp, #28]
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d863      	bhi.n	80048c0 <_dtoa_r+0x280>
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	bfc4      	itt	gt
 80047fc:	3b04      	subgt	r3, #4
 80047fe:	9307      	strgt	r3, [sp, #28]
 8004800:	9b07      	ldr	r3, [sp, #28]
 8004802:	f1a3 0302 	sub.w	r3, r3, #2
 8004806:	bfcc      	ite	gt
 8004808:	2400      	movgt	r4, #0
 800480a:	2401      	movle	r4, #1
 800480c:	2b03      	cmp	r3, #3
 800480e:	d863      	bhi.n	80048d8 <_dtoa_r+0x298>
 8004810:	e8df f003 	tbb	[pc, r3]
 8004814:	2b375452 	.word	0x2b375452
 8004818:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800481c:	441e      	add	r6, r3
 800481e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004822:	2b20      	cmp	r3, #32
 8004824:	bfc1      	itttt	gt
 8004826:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800482a:	409f      	lslgt	r7, r3
 800482c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004830:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004834:	bfd6      	itet	le
 8004836:	f1c3 0320 	rsble	r3, r3, #32
 800483a:	ea47 0003 	orrgt.w	r0, r7, r3
 800483e:	fa04 f003 	lslle.w	r0, r4, r3
 8004842:	f7fb fe5f 	bl	8000504 <__aeabi_ui2d>
 8004846:	2201      	movs	r2, #1
 8004848:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800484c:	3e01      	subs	r6, #1
 800484e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004850:	e776      	b.n	8004740 <_dtoa_r+0x100>
 8004852:	2301      	movs	r3, #1
 8004854:	e7b7      	b.n	80047c6 <_dtoa_r+0x186>
 8004856:	9010      	str	r0, [sp, #64]	@ 0x40
 8004858:	e7b6      	b.n	80047c8 <_dtoa_r+0x188>
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	1bdb      	subs	r3, r3, r7
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	427b      	negs	r3, r7
 8004862:	9308      	str	r3, [sp, #32]
 8004864:	2300      	movs	r3, #0
 8004866:	930d      	str	r3, [sp, #52]	@ 0x34
 8004868:	e7c3      	b.n	80047f2 <_dtoa_r+0x1b2>
 800486a:	2301      	movs	r3, #1
 800486c:	9309      	str	r3, [sp, #36]	@ 0x24
 800486e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004870:	eb07 0b03 	add.w	fp, r7, r3
 8004874:	f10b 0301 	add.w	r3, fp, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	bfb8      	it	lt
 800487e:	2301      	movlt	r3, #1
 8004880:	e006      	b.n	8004890 <_dtoa_r+0x250>
 8004882:	2301      	movs	r3, #1
 8004884:	9309      	str	r3, [sp, #36]	@ 0x24
 8004886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004888:	2b00      	cmp	r3, #0
 800488a:	dd28      	ble.n	80048de <_dtoa_r+0x29e>
 800488c:	469b      	mov	fp, r3
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004894:	2100      	movs	r1, #0
 8004896:	2204      	movs	r2, #4
 8004898:	f102 0514 	add.w	r5, r2, #20
 800489c:	429d      	cmp	r5, r3
 800489e:	d926      	bls.n	80048ee <_dtoa_r+0x2ae>
 80048a0:	6041      	str	r1, [r0, #4]
 80048a2:	4648      	mov	r0, r9
 80048a4:	f000 fd9c 	bl	80053e0 <_Balloc>
 80048a8:	4682      	mov	sl, r0
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d142      	bne.n	8004934 <_dtoa_r+0x2f4>
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <_dtoa_r+0x2e8>)
 80048b0:	4602      	mov	r2, r0
 80048b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80048b6:	e6da      	b.n	800466e <_dtoa_r+0x2e>
 80048b8:	2300      	movs	r3, #0
 80048ba:	e7e3      	b.n	8004884 <_dtoa_r+0x244>
 80048bc:	2300      	movs	r3, #0
 80048be:	e7d5      	b.n	800486c <_dtoa_r+0x22c>
 80048c0:	2401      	movs	r4, #1
 80048c2:	2300      	movs	r3, #0
 80048c4:	9307      	str	r3, [sp, #28]
 80048c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80048c8:	f04f 3bff 	mov.w	fp, #4294967295
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80048d2:	2312      	movs	r3, #18
 80048d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80048d6:	e7db      	b.n	8004890 <_dtoa_r+0x250>
 80048d8:	2301      	movs	r3, #1
 80048da:	9309      	str	r3, [sp, #36]	@ 0x24
 80048dc:	e7f4      	b.n	80048c8 <_dtoa_r+0x288>
 80048de:	f04f 0b01 	mov.w	fp, #1
 80048e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80048e6:	465b      	mov	r3, fp
 80048e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80048ec:	e7d0      	b.n	8004890 <_dtoa_r+0x250>
 80048ee:	3101      	adds	r1, #1
 80048f0:	0052      	lsls	r2, r2, #1
 80048f2:	e7d1      	b.n	8004898 <_dtoa_r+0x258>
 80048f4:	f3af 8000 	nop.w
 80048f8:	636f4361 	.word	0x636f4361
 80048fc:	3fd287a7 	.word	0x3fd287a7
 8004900:	8b60c8b3 	.word	0x8b60c8b3
 8004904:	3fc68a28 	.word	0x3fc68a28
 8004908:	509f79fb 	.word	0x509f79fb
 800490c:	3fd34413 	.word	0x3fd34413
 8004910:	08006308 	.word	0x08006308
 8004914:	0800631f 	.word	0x0800631f
 8004918:	7ff00000 	.word	0x7ff00000
 800491c:	080062d8 	.word	0x080062d8
 8004920:	3ff80000 	.word	0x3ff80000
 8004924:	08006470 	.word	0x08006470
 8004928:	08006377 	.word	0x08006377
 800492c:	08006304 	.word	0x08006304
 8004930:	080062d7 	.word	0x080062d7
 8004934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004938:	6018      	str	r0, [r3, #0]
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	2b0e      	cmp	r3, #14
 800493e:	f200 80a1 	bhi.w	8004a84 <_dtoa_r+0x444>
 8004942:	2c00      	cmp	r4, #0
 8004944:	f000 809e 	beq.w	8004a84 <_dtoa_r+0x444>
 8004948:	2f00      	cmp	r7, #0
 800494a:	dd33      	ble.n	80049b4 <_dtoa_r+0x374>
 800494c:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc0 <_dtoa_r+0x580>)
 800494e:	f007 020f 	and.w	r2, r7, #15
 8004952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004956:	ed93 7b00 	vldr	d7, [r3]
 800495a:	05f8      	lsls	r0, r7, #23
 800495c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004960:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004964:	d516      	bpl.n	8004994 <_dtoa_r+0x354>
 8004966:	4b97      	ldr	r3, [pc, #604]	@ (8004bc4 <_dtoa_r+0x584>)
 8004968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800496c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004970:	f7fb ff6c 	bl	800084c <__aeabi_ddiv>
 8004974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004978:	f004 040f 	and.w	r4, r4, #15
 800497c:	2603      	movs	r6, #3
 800497e:	4d91      	ldr	r5, [pc, #580]	@ (8004bc4 <_dtoa_r+0x584>)
 8004980:	b954      	cbnz	r4, 8004998 <_dtoa_r+0x358>
 8004982:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800498a:	f7fb ff5f 	bl	800084c <__aeabi_ddiv>
 800498e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004992:	e028      	b.n	80049e6 <_dtoa_r+0x3a6>
 8004994:	2602      	movs	r6, #2
 8004996:	e7f2      	b.n	800497e <_dtoa_r+0x33e>
 8004998:	07e1      	lsls	r1, r4, #31
 800499a:	d508      	bpl.n	80049ae <_dtoa_r+0x36e>
 800499c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80049a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049a4:	f7fb fe28 	bl	80005f8 <__aeabi_dmul>
 80049a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80049ac:	3601      	adds	r6, #1
 80049ae:	1064      	asrs	r4, r4, #1
 80049b0:	3508      	adds	r5, #8
 80049b2:	e7e5      	b.n	8004980 <_dtoa_r+0x340>
 80049b4:	f000 80af 	beq.w	8004b16 <_dtoa_r+0x4d6>
 80049b8:	427c      	negs	r4, r7
 80049ba:	4b81      	ldr	r3, [pc, #516]	@ (8004bc0 <_dtoa_r+0x580>)
 80049bc:	4d81      	ldr	r5, [pc, #516]	@ (8004bc4 <_dtoa_r+0x584>)
 80049be:	f004 020f 	and.w	r2, r4, #15
 80049c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049ce:	f7fb fe13 	bl	80005f8 <__aeabi_dmul>
 80049d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049d6:	1124      	asrs	r4, r4, #4
 80049d8:	2300      	movs	r3, #0
 80049da:	2602      	movs	r6, #2
 80049dc:	2c00      	cmp	r4, #0
 80049de:	f040 808f 	bne.w	8004b00 <_dtoa_r+0x4c0>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d3      	bne.n	800498e <_dtoa_r+0x34e>
 80049e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80049e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8094 	beq.w	8004b1a <_dtoa_r+0x4da>
 80049f2:	4b75      	ldr	r3, [pc, #468]	@ (8004bc8 <_dtoa_r+0x588>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7fc f86f 	bl	8000adc <__aeabi_dcmplt>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f000 808b 	beq.w	8004b1a <_dtoa_r+0x4da>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8087 	beq.w	8004b1a <_dtoa_r+0x4da>
 8004a0c:	f1bb 0f00 	cmp.w	fp, #0
 8004a10:	dd34      	ble.n	8004a7c <_dtoa_r+0x43c>
 8004a12:	4620      	mov	r0, r4
 8004a14:	4b6d      	ldr	r3, [pc, #436]	@ (8004bcc <_dtoa_r+0x58c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fb fded 	bl	80005f8 <__aeabi_dmul>
 8004a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a22:	f107 38ff 	add.w	r8, r7, #4294967295
 8004a26:	3601      	adds	r6, #1
 8004a28:	465c      	mov	r4, fp
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7fb fd7a 	bl	8000524 <__aeabi_i2d>
 8004a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a34:	f7fb fde0 	bl	80005f8 <__aeabi_dmul>
 8004a38:	4b65      	ldr	r3, [pc, #404]	@ (8004bd0 <_dtoa_r+0x590>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f7fb fc26 	bl	800028c <__adddf3>
 8004a40:	4605      	mov	r5, r0
 8004a42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a46:	2c00      	cmp	r4, #0
 8004a48:	d16a      	bne.n	8004b20 <_dtoa_r+0x4e0>
 8004a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a4e:	4b61      	ldr	r3, [pc, #388]	@ (8004bd4 <_dtoa_r+0x594>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	f7fb fc19 	bl	8000288 <__aeabi_dsub>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a5e:	462a      	mov	r2, r5
 8004a60:	4633      	mov	r3, r6
 8004a62:	f7fc f859 	bl	8000b18 <__aeabi_dcmpgt>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f040 8298 	bne.w	8004f9c <_dtoa_r+0x95c>
 8004a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a70:	462a      	mov	r2, r5
 8004a72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a76:	f7fc f831 	bl	8000adc <__aeabi_dcmplt>
 8004a7a:	bb38      	cbnz	r0, 8004acc <_dtoa_r+0x48c>
 8004a7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004a80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f2c0 8157 	blt.w	8004d3a <_dtoa_r+0x6fa>
 8004a8c:	2f0e      	cmp	r7, #14
 8004a8e:	f300 8154 	bgt.w	8004d3a <_dtoa_r+0x6fa>
 8004a92:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc0 <_dtoa_r+0x580>)
 8004a94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a98:	ed93 7b00 	vldr	d7, [r3]
 8004a9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	ed8d 7b00 	vstr	d7, [sp]
 8004aa4:	f280 80e5 	bge.w	8004c72 <_dtoa_r+0x632>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f300 80e1 	bgt.w	8004c72 <_dtoa_r+0x632>
 8004ab0:	d10c      	bne.n	8004acc <_dtoa_r+0x48c>
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <_dtoa_r+0x594>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	ec51 0b17 	vmov	r0, r1, d7
 8004aba:	f7fb fd9d 	bl	80005f8 <__aeabi_dmul>
 8004abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac2:	f7fc f81f 	bl	8000b04 <__aeabi_dcmpge>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	f000 8266 	beq.w	8004f98 <_dtoa_r+0x958>
 8004acc:	2400      	movs	r4, #0
 8004ace:	4625      	mov	r5, r4
 8004ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ad2:	4656      	mov	r6, sl
 8004ad4:	ea6f 0803 	mvn.w	r8, r3
 8004ad8:	2700      	movs	r7, #0
 8004ada:	4621      	mov	r1, r4
 8004adc:	4648      	mov	r0, r9
 8004ade:	f000 fcbf 	bl	8005460 <_Bfree>
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	f000 80bd 	beq.w	8004c62 <_dtoa_r+0x622>
 8004ae8:	b12f      	cbz	r7, 8004af6 <_dtoa_r+0x4b6>
 8004aea:	42af      	cmp	r7, r5
 8004aec:	d003      	beq.n	8004af6 <_dtoa_r+0x4b6>
 8004aee:	4639      	mov	r1, r7
 8004af0:	4648      	mov	r0, r9
 8004af2:	f000 fcb5 	bl	8005460 <_Bfree>
 8004af6:	4629      	mov	r1, r5
 8004af8:	4648      	mov	r0, r9
 8004afa:	f000 fcb1 	bl	8005460 <_Bfree>
 8004afe:	e0b0      	b.n	8004c62 <_dtoa_r+0x622>
 8004b00:	07e2      	lsls	r2, r4, #31
 8004b02:	d505      	bpl.n	8004b10 <_dtoa_r+0x4d0>
 8004b04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b08:	f7fb fd76 	bl	80005f8 <__aeabi_dmul>
 8004b0c:	3601      	adds	r6, #1
 8004b0e:	2301      	movs	r3, #1
 8004b10:	1064      	asrs	r4, r4, #1
 8004b12:	3508      	adds	r5, #8
 8004b14:	e762      	b.n	80049dc <_dtoa_r+0x39c>
 8004b16:	2602      	movs	r6, #2
 8004b18:	e765      	b.n	80049e6 <_dtoa_r+0x3a6>
 8004b1a:	9c03      	ldr	r4, [sp, #12]
 8004b1c:	46b8      	mov	r8, r7
 8004b1e:	e784      	b.n	8004a2a <_dtoa_r+0x3ea>
 8004b20:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <_dtoa_r+0x580>)
 8004b22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b2c:	4454      	add	r4, sl
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	d054      	beq.n	8004bdc <_dtoa_r+0x59c>
 8004b32:	4929      	ldr	r1, [pc, #164]	@ (8004bd8 <_dtoa_r+0x598>)
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7fb fe89 	bl	800084c <__aeabi_ddiv>
 8004b3a:	4633      	mov	r3, r6
 8004b3c:	462a      	mov	r2, r5
 8004b3e:	f7fb fba3 	bl	8000288 <__aeabi_dsub>
 8004b42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004b46:	4656      	mov	r6, sl
 8004b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b4c:	f7fc f804 	bl	8000b58 <__aeabi_d2iz>
 8004b50:	4605      	mov	r5, r0
 8004b52:	f7fb fce7 	bl	8000524 <__aeabi_i2d>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b5e:	f7fb fb93 	bl	8000288 <__aeabi_dsub>
 8004b62:	3530      	adds	r5, #48	@ 0x30
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b6c:	f806 5b01 	strb.w	r5, [r6], #1
 8004b70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b74:	f7fb ffb2 	bl	8000adc <__aeabi_dcmplt>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d172      	bne.n	8004c62 <_dtoa_r+0x622>
 8004b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b80:	4911      	ldr	r1, [pc, #68]	@ (8004bc8 <_dtoa_r+0x588>)
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fb fb80 	bl	8000288 <__aeabi_dsub>
 8004b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b8c:	f7fb ffa6 	bl	8000adc <__aeabi_dcmplt>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f040 80b4 	bne.w	8004cfe <_dtoa_r+0x6be>
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	f43f af70 	beq.w	8004a7c <_dtoa_r+0x43c>
 8004b9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <_dtoa_r+0x58c>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f7fb fd28 	bl	80005f8 <__aeabi_dmul>
 8004ba8:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <_dtoa_r+0x58c>)
 8004baa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004bae:	2200      	movs	r2, #0
 8004bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bbc:	e7c4      	b.n	8004b48 <_dtoa_r+0x508>
 8004bbe:	bf00      	nop
 8004bc0:	08006470 	.word	0x08006470
 8004bc4:	08006448 	.word	0x08006448
 8004bc8:	3ff00000 	.word	0x3ff00000
 8004bcc:	40240000 	.word	0x40240000
 8004bd0:	401c0000 	.word	0x401c0000
 8004bd4:	40140000 	.word	0x40140000
 8004bd8:	3fe00000 	.word	0x3fe00000
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7fb fd0a 	bl	80005f8 <__aeabi_dmul>
 8004be4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004be8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004bea:	4656      	mov	r6, sl
 8004bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bf0:	f7fb ffb2 	bl	8000b58 <__aeabi_d2iz>
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	f7fb fc95 	bl	8000524 <__aeabi_i2d>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c02:	f7fb fb41 	bl	8000288 <__aeabi_dsub>
 8004c06:	3530      	adds	r5, #48	@ 0x30
 8004c08:	f806 5b01 	strb.w	r5, [r6], #1
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	42a6      	cmp	r6, r4
 8004c12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	d124      	bne.n	8004c66 <_dtoa_r+0x626>
 8004c1c:	4baf      	ldr	r3, [pc, #700]	@ (8004edc <_dtoa_r+0x89c>)
 8004c1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004c22:	f7fb fb33 	bl	800028c <__adddf3>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c2e:	f7fb ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d163      	bne.n	8004cfe <_dtoa_r+0x6be>
 8004c36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c3a:	49a8      	ldr	r1, [pc, #672]	@ (8004edc <_dtoa_r+0x89c>)
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fb fb23 	bl	8000288 <__aeabi_dsub>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c4a:	f7fb ff47 	bl	8000adc <__aeabi_dcmplt>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f43f af14 	beq.w	8004a7c <_dtoa_r+0x43c>
 8004c54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c56:	1e73      	subs	r3, r6, #1
 8004c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c5e:	2b30      	cmp	r3, #48	@ 0x30
 8004c60:	d0f8      	beq.n	8004c54 <_dtoa_r+0x614>
 8004c62:	4647      	mov	r7, r8
 8004c64:	e03b      	b.n	8004cde <_dtoa_r+0x69e>
 8004c66:	4b9e      	ldr	r3, [pc, #632]	@ (8004ee0 <_dtoa_r+0x8a0>)
 8004c68:	f7fb fcc6 	bl	80005f8 <__aeabi_dmul>
 8004c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c70:	e7bc      	b.n	8004bec <_dtoa_r+0x5ac>
 8004c72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004c76:	4656      	mov	r6, sl
 8004c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fde4 	bl	800084c <__aeabi_ddiv>
 8004c84:	f7fb ff68 	bl	8000b58 <__aeabi_d2iz>
 8004c88:	4680      	mov	r8, r0
 8004c8a:	f7fb fc4b 	bl	8000524 <__aeabi_i2d>
 8004c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c92:	f7fb fcb1 	bl	80005f8 <__aeabi_dmul>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ca2:	f7fb faf1 	bl	8000288 <__aeabi_dsub>
 8004ca6:	f806 4b01 	strb.w	r4, [r6], #1
 8004caa:	9d03      	ldr	r5, [sp, #12]
 8004cac:	eba6 040a 	sub.w	r4, r6, sl
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	d133      	bne.n	8004d20 <_dtoa_r+0x6e0>
 8004cb8:	f7fb fae8 	bl	800028c <__adddf3>
 8004cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	f7fb ff28 	bl	8000b18 <__aeabi_dcmpgt>
 8004cc8:	b9c0      	cbnz	r0, 8004cfc <_dtoa_r+0x6bc>
 8004cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd6:	b110      	cbz	r0, 8004cde <_dtoa_r+0x69e>
 8004cd8:	f018 0f01 	tst.w	r8, #1
 8004cdc:	d10e      	bne.n	8004cfc <_dtoa_r+0x6bc>
 8004cde:	9902      	ldr	r1, [sp, #8]
 8004ce0:	4648      	mov	r0, r9
 8004ce2:	f000 fbbd 	bl	8005460 <_Bfree>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	7033      	strb	r3, [r6, #0]
 8004cea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004cec:	3701      	adds	r7, #1
 8004cee:	601f      	str	r7, [r3, #0]
 8004cf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 824b 	beq.w	800518e <_dtoa_r+0xb4e>
 8004cf8:	601e      	str	r6, [r3, #0]
 8004cfa:	e248      	b.n	800518e <_dtoa_r+0xb4e>
 8004cfc:	46b8      	mov	r8, r7
 8004cfe:	4633      	mov	r3, r6
 8004d00:	461e      	mov	r6, r3
 8004d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d06:	2a39      	cmp	r2, #57	@ 0x39
 8004d08:	d106      	bne.n	8004d18 <_dtoa_r+0x6d8>
 8004d0a:	459a      	cmp	sl, r3
 8004d0c:	d1f8      	bne.n	8004d00 <_dtoa_r+0x6c0>
 8004d0e:	2230      	movs	r2, #48	@ 0x30
 8004d10:	f108 0801 	add.w	r8, r8, #1
 8004d14:	f88a 2000 	strb.w	r2, [sl]
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	3201      	adds	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e7a0      	b.n	8004c62 <_dtoa_r+0x622>
 8004d20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee0 <_dtoa_r+0x8a0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	f7fb fc68 	bl	80005f8 <__aeabi_dmul>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	460d      	mov	r5, r1
 8004d30:	f7fb feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d09f      	beq.n	8004c78 <_dtoa_r+0x638>
 8004d38:	e7d1      	b.n	8004cde <_dtoa_r+0x69e>
 8004d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	f000 80ea 	beq.w	8004f16 <_dtoa_r+0x8d6>
 8004d42:	9a07      	ldr	r2, [sp, #28]
 8004d44:	2a01      	cmp	r2, #1
 8004d46:	f300 80cd 	bgt.w	8004ee4 <_dtoa_r+0x8a4>
 8004d4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	f000 80c1 	beq.w	8004ed4 <_dtoa_r+0x894>
 8004d52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d56:	9c08      	ldr	r4, [sp, #32]
 8004d58:	9e00      	ldr	r6, [sp, #0]
 8004d5a:	9a00      	ldr	r2, [sp, #0]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	9200      	str	r2, [sp, #0]
 8004d60:	9a06      	ldr	r2, [sp, #24]
 8004d62:	2101      	movs	r1, #1
 8004d64:	441a      	add	r2, r3
 8004d66:	4648      	mov	r0, r9
 8004d68:	9206      	str	r2, [sp, #24]
 8004d6a:	f000 fc2d 	bl	80055c8 <__i2b>
 8004d6e:	4605      	mov	r5, r0
 8004d70:	b166      	cbz	r6, 8004d8c <_dtoa_r+0x74c>
 8004d72:	9b06      	ldr	r3, [sp, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dd09      	ble.n	8004d8c <_dtoa_r+0x74c>
 8004d78:	42b3      	cmp	r3, r6
 8004d7a:	9a00      	ldr	r2, [sp, #0]
 8004d7c:	bfa8      	it	ge
 8004d7e:	4633      	movge	r3, r6
 8004d80:	1ad2      	subs	r2, r2, r3
 8004d82:	9200      	str	r2, [sp, #0]
 8004d84:	9a06      	ldr	r2, [sp, #24]
 8004d86:	1af6      	subs	r6, r6, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	9306      	str	r3, [sp, #24]
 8004d8c:	9b08      	ldr	r3, [sp, #32]
 8004d8e:	b30b      	cbz	r3, 8004dd4 <_dtoa_r+0x794>
 8004d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 80c6 	beq.w	8004f24 <_dtoa_r+0x8e4>
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	f000 80c0 	beq.w	8004f1e <_dtoa_r+0x8de>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4622      	mov	r2, r4
 8004da2:	4648      	mov	r0, r9
 8004da4:	f000 fcc8 	bl	8005738 <__pow5mult>
 8004da8:	9a02      	ldr	r2, [sp, #8]
 8004daa:	4601      	mov	r1, r0
 8004dac:	4605      	mov	r5, r0
 8004dae:	4648      	mov	r0, r9
 8004db0:	f000 fc20 	bl	80055f4 <__multiply>
 8004db4:	9902      	ldr	r1, [sp, #8]
 8004db6:	4680      	mov	r8, r0
 8004db8:	4648      	mov	r0, r9
 8004dba:	f000 fb51 	bl	8005460 <_Bfree>
 8004dbe:	9b08      	ldr	r3, [sp, #32]
 8004dc0:	1b1b      	subs	r3, r3, r4
 8004dc2:	9308      	str	r3, [sp, #32]
 8004dc4:	f000 80b1 	beq.w	8004f2a <_dtoa_r+0x8ea>
 8004dc8:	9a08      	ldr	r2, [sp, #32]
 8004dca:	4641      	mov	r1, r8
 8004dcc:	4648      	mov	r0, r9
 8004dce:	f000 fcb3 	bl	8005738 <__pow5mult>
 8004dd2:	9002      	str	r0, [sp, #8]
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4648      	mov	r0, r9
 8004dd8:	f000 fbf6 	bl	80055c8 <__i2b>
 8004ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dde:	4604      	mov	r4, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 81d8 	beq.w	8005196 <_dtoa_r+0xb56>
 8004de6:	461a      	mov	r2, r3
 8004de8:	4601      	mov	r1, r0
 8004dea:	4648      	mov	r0, r9
 8004dec:	f000 fca4 	bl	8005738 <__pow5mult>
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	4604      	mov	r4, r0
 8004df6:	f300 809f 	bgt.w	8004f38 <_dtoa_r+0x8f8>
 8004dfa:	9b04      	ldr	r3, [sp, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8097 	bne.w	8004f30 <_dtoa_r+0x8f0>
 8004e02:	9b05      	ldr	r3, [sp, #20]
 8004e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f040 8093 	bne.w	8004f34 <_dtoa_r+0x8f4>
 8004e0e:	9b05      	ldr	r3, [sp, #20]
 8004e10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e14:	0d1b      	lsrs	r3, r3, #20
 8004e16:	051b      	lsls	r3, r3, #20
 8004e18:	b133      	cbz	r3, 8004e28 <_dtoa_r+0x7e8>
 8004e1a:	9b00      	ldr	r3, [sp, #0]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	9b06      	ldr	r3, [sp, #24]
 8004e22:	3301      	adds	r3, #1
 8004e24:	9306      	str	r3, [sp, #24]
 8004e26:	2301      	movs	r3, #1
 8004e28:	9308      	str	r3, [sp, #32]
 8004e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 81b8 	beq.w	80051a2 <_dtoa_r+0xb62>
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e38:	6918      	ldr	r0, [r3, #16]
 8004e3a:	f000 fb79 	bl	8005530 <__hi0bits>
 8004e3e:	f1c0 0020 	rsb	r0, r0, #32
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	4418      	add	r0, r3
 8004e46:	f010 001f 	ands.w	r0, r0, #31
 8004e4a:	f000 8082 	beq.w	8004f52 <_dtoa_r+0x912>
 8004e4e:	f1c0 0320 	rsb	r3, r0, #32
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	dd73      	ble.n	8004f3e <_dtoa_r+0x8fe>
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	f1c0 001c 	rsb	r0, r0, #28
 8004e5c:	4403      	add	r3, r0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	4403      	add	r3, r0
 8004e64:	4406      	add	r6, r0
 8004e66:	9306      	str	r3, [sp, #24]
 8004e68:	9b00      	ldr	r3, [sp, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd05      	ble.n	8004e7a <_dtoa_r+0x83a>
 8004e6e:	9902      	ldr	r1, [sp, #8]
 8004e70:	461a      	mov	r2, r3
 8004e72:	4648      	mov	r0, r9
 8004e74:	f000 fcba 	bl	80057ec <__lshift>
 8004e78:	9002      	str	r0, [sp, #8]
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd05      	ble.n	8004e8c <_dtoa_r+0x84c>
 8004e80:	4621      	mov	r1, r4
 8004e82:	461a      	mov	r2, r3
 8004e84:	4648      	mov	r0, r9
 8004e86:	f000 fcb1 	bl	80057ec <__lshift>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d061      	beq.n	8004f56 <_dtoa_r+0x916>
 8004e92:	9802      	ldr	r0, [sp, #8]
 8004e94:	4621      	mov	r1, r4
 8004e96:	f000 fd15 	bl	80058c4 <__mcmp>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	da5b      	bge.n	8004f56 <_dtoa_r+0x916>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9902      	ldr	r1, [sp, #8]
 8004ea2:	220a      	movs	r2, #10
 8004ea4:	4648      	mov	r0, r9
 8004ea6:	f000 fafd 	bl	80054a4 <__multadd>
 8004eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eac:	9002      	str	r0, [sp, #8]
 8004eae:	f107 38ff 	add.w	r8, r7, #4294967295
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8177 	beq.w	80051a6 <_dtoa_r+0xb66>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	2300      	movs	r3, #0
 8004ebc:	220a      	movs	r2, #10
 8004ebe:	4648      	mov	r0, r9
 8004ec0:	f000 faf0 	bl	80054a4 <__multadd>
 8004ec4:	f1bb 0f00 	cmp.w	fp, #0
 8004ec8:	4605      	mov	r5, r0
 8004eca:	dc6f      	bgt.n	8004fac <_dtoa_r+0x96c>
 8004ecc:	9b07      	ldr	r3, [sp, #28]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	dc49      	bgt.n	8004f66 <_dtoa_r+0x926>
 8004ed2:	e06b      	b.n	8004fac <_dtoa_r+0x96c>
 8004ed4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ed6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004eda:	e73c      	b.n	8004d56 <_dtoa_r+0x716>
 8004edc:	3fe00000 	.word	0x3fe00000
 8004ee0:	40240000 	.word	0x40240000
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	1e5c      	subs	r4, r3, #1
 8004ee8:	9b08      	ldr	r3, [sp, #32]
 8004eea:	42a3      	cmp	r3, r4
 8004eec:	db09      	blt.n	8004f02 <_dtoa_r+0x8c2>
 8004eee:	1b1c      	subs	r4, r3, r4
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f6bf af30 	bge.w	8004d58 <_dtoa_r+0x718>
 8004ef8:	9b00      	ldr	r3, [sp, #0]
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1a9e      	subs	r6, r3, r2
 8004efe:	2300      	movs	r3, #0
 8004f00:	e72b      	b.n	8004d5a <_dtoa_r+0x71a>
 8004f02:	9b08      	ldr	r3, [sp, #32]
 8004f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f06:	9408      	str	r4, [sp, #32]
 8004f08:	1ae3      	subs	r3, r4, r3
 8004f0a:	441a      	add	r2, r3
 8004f0c:	9e00      	ldr	r6, [sp, #0]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	920d      	str	r2, [sp, #52]	@ 0x34
 8004f12:	2400      	movs	r4, #0
 8004f14:	e721      	b.n	8004d5a <_dtoa_r+0x71a>
 8004f16:	9c08      	ldr	r4, [sp, #32]
 8004f18:	9e00      	ldr	r6, [sp, #0]
 8004f1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004f1c:	e728      	b.n	8004d70 <_dtoa_r+0x730>
 8004f1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004f22:	e751      	b.n	8004dc8 <_dtoa_r+0x788>
 8004f24:	9a08      	ldr	r2, [sp, #32]
 8004f26:	9902      	ldr	r1, [sp, #8]
 8004f28:	e750      	b.n	8004dcc <_dtoa_r+0x78c>
 8004f2a:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f2e:	e751      	b.n	8004dd4 <_dtoa_r+0x794>
 8004f30:	2300      	movs	r3, #0
 8004f32:	e779      	b.n	8004e28 <_dtoa_r+0x7e8>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	e777      	b.n	8004e28 <_dtoa_r+0x7e8>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9308      	str	r3, [sp, #32]
 8004f3c:	e779      	b.n	8004e32 <_dtoa_r+0x7f2>
 8004f3e:	d093      	beq.n	8004e68 <_dtoa_r+0x828>
 8004f40:	9a00      	ldr	r2, [sp, #0]
 8004f42:	331c      	adds	r3, #28
 8004f44:	441a      	add	r2, r3
 8004f46:	9200      	str	r2, [sp, #0]
 8004f48:	9a06      	ldr	r2, [sp, #24]
 8004f4a:	441a      	add	r2, r3
 8004f4c:	441e      	add	r6, r3
 8004f4e:	9206      	str	r2, [sp, #24]
 8004f50:	e78a      	b.n	8004e68 <_dtoa_r+0x828>
 8004f52:	4603      	mov	r3, r0
 8004f54:	e7f4      	b.n	8004f40 <_dtoa_r+0x900>
 8004f56:	9b03      	ldr	r3, [sp, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	46b8      	mov	r8, r7
 8004f5c:	dc20      	bgt.n	8004fa0 <_dtoa_r+0x960>
 8004f5e:	469b      	mov	fp, r3
 8004f60:	9b07      	ldr	r3, [sp, #28]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	dd1e      	ble.n	8004fa4 <_dtoa_r+0x964>
 8004f66:	f1bb 0f00 	cmp.w	fp, #0
 8004f6a:	f47f adb1 	bne.w	8004ad0 <_dtoa_r+0x490>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	465b      	mov	r3, fp
 8004f72:	2205      	movs	r2, #5
 8004f74:	4648      	mov	r0, r9
 8004f76:	f000 fa95 	bl	80054a4 <__multadd>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	9802      	ldr	r0, [sp, #8]
 8004f80:	f000 fca0 	bl	80058c4 <__mcmp>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f77f ada3 	ble.w	8004ad0 <_dtoa_r+0x490>
 8004f8a:	4656      	mov	r6, sl
 8004f8c:	2331      	movs	r3, #49	@ 0x31
 8004f8e:	f806 3b01 	strb.w	r3, [r6], #1
 8004f92:	f108 0801 	add.w	r8, r8, #1
 8004f96:	e59f      	b.n	8004ad8 <_dtoa_r+0x498>
 8004f98:	9c03      	ldr	r4, [sp, #12]
 8004f9a:	46b8      	mov	r8, r7
 8004f9c:	4625      	mov	r5, r4
 8004f9e:	e7f4      	b.n	8004f8a <_dtoa_r+0x94a>
 8004fa0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8101 	beq.w	80051ae <_dtoa_r+0xb6e>
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	dd05      	ble.n	8004fbc <_dtoa_r+0x97c>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4632      	mov	r2, r6
 8004fb4:	4648      	mov	r0, r9
 8004fb6:	f000 fc19 	bl	80057ec <__lshift>
 8004fba:	4605      	mov	r5, r0
 8004fbc:	9b08      	ldr	r3, [sp, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d05c      	beq.n	800507c <_dtoa_r+0xa3c>
 8004fc2:	6869      	ldr	r1, [r5, #4]
 8004fc4:	4648      	mov	r0, r9
 8004fc6:	f000 fa0b 	bl	80053e0 <_Balloc>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	b928      	cbnz	r0, 8004fda <_dtoa_r+0x99a>
 8004fce:	4b82      	ldr	r3, [pc, #520]	@ (80051d8 <_dtoa_r+0xb98>)
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004fd6:	f7ff bb4a 	b.w	800466e <_dtoa_r+0x2e>
 8004fda:	692a      	ldr	r2, [r5, #16]
 8004fdc:	3202      	adds	r2, #2
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	f105 010c 	add.w	r1, r5, #12
 8004fe4:	300c      	adds	r0, #12
 8004fe6:	f001 f807 	bl	8005ff8 <memcpy>
 8004fea:	2201      	movs	r2, #1
 8004fec:	4631      	mov	r1, r6
 8004fee:	4648      	mov	r0, r9
 8004ff0:	f000 fbfc 	bl	80057ec <__lshift>
 8004ff4:	f10a 0301 	add.w	r3, sl, #1
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	eb0a 030b 	add.w	r3, sl, fp
 8004ffe:	9308      	str	r3, [sp, #32]
 8005000:	9b04      	ldr	r3, [sp, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	462f      	mov	r7, r5
 8005008:	9306      	str	r3, [sp, #24]
 800500a:	4605      	mov	r5, r0
 800500c:	9b00      	ldr	r3, [sp, #0]
 800500e:	9802      	ldr	r0, [sp, #8]
 8005010:	4621      	mov	r1, r4
 8005012:	f103 3bff 	add.w	fp, r3, #4294967295
 8005016:	f7ff fa8a 	bl	800452e <quorem>
 800501a:	4603      	mov	r3, r0
 800501c:	3330      	adds	r3, #48	@ 0x30
 800501e:	9003      	str	r0, [sp, #12]
 8005020:	4639      	mov	r1, r7
 8005022:	9802      	ldr	r0, [sp, #8]
 8005024:	9309      	str	r3, [sp, #36]	@ 0x24
 8005026:	f000 fc4d 	bl	80058c4 <__mcmp>
 800502a:	462a      	mov	r2, r5
 800502c:	9004      	str	r0, [sp, #16]
 800502e:	4621      	mov	r1, r4
 8005030:	4648      	mov	r0, r9
 8005032:	f000 fc63 	bl	80058fc <__mdiff>
 8005036:	68c2      	ldr	r2, [r0, #12]
 8005038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503a:	4606      	mov	r6, r0
 800503c:	bb02      	cbnz	r2, 8005080 <_dtoa_r+0xa40>
 800503e:	4601      	mov	r1, r0
 8005040:	9802      	ldr	r0, [sp, #8]
 8005042:	f000 fc3f 	bl	80058c4 <__mcmp>
 8005046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005048:	4602      	mov	r2, r0
 800504a:	4631      	mov	r1, r6
 800504c:	4648      	mov	r0, r9
 800504e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005050:	9309      	str	r3, [sp, #36]	@ 0x24
 8005052:	f000 fa05 	bl	8005460 <_Bfree>
 8005056:	9b07      	ldr	r3, [sp, #28]
 8005058:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800505a:	9e00      	ldr	r6, [sp, #0]
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	9b06      	ldr	r3, [sp, #24]
 8005062:	4319      	orrs	r1, r3
 8005064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005066:	d10d      	bne.n	8005084 <_dtoa_r+0xa44>
 8005068:	2b39      	cmp	r3, #57	@ 0x39
 800506a:	d027      	beq.n	80050bc <_dtoa_r+0xa7c>
 800506c:	9a04      	ldr	r2, [sp, #16]
 800506e:	2a00      	cmp	r2, #0
 8005070:	dd01      	ble.n	8005076 <_dtoa_r+0xa36>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	3331      	adds	r3, #49	@ 0x31
 8005076:	f88b 3000 	strb.w	r3, [fp]
 800507a:	e52e      	b.n	8004ada <_dtoa_r+0x49a>
 800507c:	4628      	mov	r0, r5
 800507e:	e7b9      	b.n	8004ff4 <_dtoa_r+0x9b4>
 8005080:	2201      	movs	r2, #1
 8005082:	e7e2      	b.n	800504a <_dtoa_r+0xa0a>
 8005084:	9904      	ldr	r1, [sp, #16]
 8005086:	2900      	cmp	r1, #0
 8005088:	db04      	blt.n	8005094 <_dtoa_r+0xa54>
 800508a:	9807      	ldr	r0, [sp, #28]
 800508c:	4301      	orrs	r1, r0
 800508e:	9806      	ldr	r0, [sp, #24]
 8005090:	4301      	orrs	r1, r0
 8005092:	d120      	bne.n	80050d6 <_dtoa_r+0xa96>
 8005094:	2a00      	cmp	r2, #0
 8005096:	ddee      	ble.n	8005076 <_dtoa_r+0xa36>
 8005098:	9902      	ldr	r1, [sp, #8]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	4648      	mov	r0, r9
 80050a0:	f000 fba4 	bl	80057ec <__lshift>
 80050a4:	4621      	mov	r1, r4
 80050a6:	9002      	str	r0, [sp, #8]
 80050a8:	f000 fc0c 	bl	80058c4 <__mcmp>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	9b00      	ldr	r3, [sp, #0]
 80050b0:	dc02      	bgt.n	80050b8 <_dtoa_r+0xa78>
 80050b2:	d1e0      	bne.n	8005076 <_dtoa_r+0xa36>
 80050b4:	07da      	lsls	r2, r3, #31
 80050b6:	d5de      	bpl.n	8005076 <_dtoa_r+0xa36>
 80050b8:	2b39      	cmp	r3, #57	@ 0x39
 80050ba:	d1da      	bne.n	8005072 <_dtoa_r+0xa32>
 80050bc:	2339      	movs	r3, #57	@ 0x39
 80050be:	f88b 3000 	strb.w	r3, [fp]
 80050c2:	4633      	mov	r3, r6
 80050c4:	461e      	mov	r6, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050cc:	2a39      	cmp	r2, #57	@ 0x39
 80050ce:	d04e      	beq.n	800516e <_dtoa_r+0xb2e>
 80050d0:	3201      	adds	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e501      	b.n	8004ada <_dtoa_r+0x49a>
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	dd03      	ble.n	80050e2 <_dtoa_r+0xaa2>
 80050da:	2b39      	cmp	r3, #57	@ 0x39
 80050dc:	d0ee      	beq.n	80050bc <_dtoa_r+0xa7c>
 80050de:	3301      	adds	r3, #1
 80050e0:	e7c9      	b.n	8005076 <_dtoa_r+0xa36>
 80050e2:	9a00      	ldr	r2, [sp, #0]
 80050e4:	9908      	ldr	r1, [sp, #32]
 80050e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80050ea:	428a      	cmp	r2, r1
 80050ec:	d028      	beq.n	8005140 <_dtoa_r+0xb00>
 80050ee:	9902      	ldr	r1, [sp, #8]
 80050f0:	2300      	movs	r3, #0
 80050f2:	220a      	movs	r2, #10
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 f9d5 	bl	80054a4 <__multadd>
 80050fa:	42af      	cmp	r7, r5
 80050fc:	9002      	str	r0, [sp, #8]
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	f04f 020a 	mov.w	r2, #10
 8005106:	4639      	mov	r1, r7
 8005108:	4648      	mov	r0, r9
 800510a:	d107      	bne.n	800511c <_dtoa_r+0xadc>
 800510c:	f000 f9ca 	bl	80054a4 <__multadd>
 8005110:	4607      	mov	r7, r0
 8005112:	4605      	mov	r5, r0
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	e777      	b.n	800500c <_dtoa_r+0x9cc>
 800511c:	f000 f9c2 	bl	80054a4 <__multadd>
 8005120:	4629      	mov	r1, r5
 8005122:	4607      	mov	r7, r0
 8005124:	2300      	movs	r3, #0
 8005126:	220a      	movs	r2, #10
 8005128:	4648      	mov	r0, r9
 800512a:	f000 f9bb 	bl	80054a4 <__multadd>
 800512e:	4605      	mov	r5, r0
 8005130:	e7f0      	b.n	8005114 <_dtoa_r+0xad4>
 8005132:	f1bb 0f00 	cmp.w	fp, #0
 8005136:	bfcc      	ite	gt
 8005138:	465e      	movgt	r6, fp
 800513a:	2601      	movle	r6, #1
 800513c:	4456      	add	r6, sl
 800513e:	2700      	movs	r7, #0
 8005140:	9902      	ldr	r1, [sp, #8]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	4648      	mov	r0, r9
 8005148:	f000 fb50 	bl	80057ec <__lshift>
 800514c:	4621      	mov	r1, r4
 800514e:	9002      	str	r0, [sp, #8]
 8005150:	f000 fbb8 	bl	80058c4 <__mcmp>
 8005154:	2800      	cmp	r0, #0
 8005156:	dcb4      	bgt.n	80050c2 <_dtoa_r+0xa82>
 8005158:	d102      	bne.n	8005160 <_dtoa_r+0xb20>
 800515a:	9b00      	ldr	r3, [sp, #0]
 800515c:	07db      	lsls	r3, r3, #31
 800515e:	d4b0      	bmi.n	80050c2 <_dtoa_r+0xa82>
 8005160:	4633      	mov	r3, r6
 8005162:	461e      	mov	r6, r3
 8005164:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005168:	2a30      	cmp	r2, #48	@ 0x30
 800516a:	d0fa      	beq.n	8005162 <_dtoa_r+0xb22>
 800516c:	e4b5      	b.n	8004ada <_dtoa_r+0x49a>
 800516e:	459a      	cmp	sl, r3
 8005170:	d1a8      	bne.n	80050c4 <_dtoa_r+0xa84>
 8005172:	2331      	movs	r3, #49	@ 0x31
 8005174:	f108 0801 	add.w	r8, r8, #1
 8005178:	f88a 3000 	strb.w	r3, [sl]
 800517c:	e4ad      	b.n	8004ada <_dtoa_r+0x49a>
 800517e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005180:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80051dc <_dtoa_r+0xb9c>
 8005184:	b11b      	cbz	r3, 800518e <_dtoa_r+0xb4e>
 8005186:	f10a 0308 	add.w	r3, sl, #8
 800518a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	4650      	mov	r0, sl
 8005190:	b017      	add	sp, #92	@ 0x5c
 8005192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005196:	9b07      	ldr	r3, [sp, #28]
 8005198:	2b01      	cmp	r3, #1
 800519a:	f77f ae2e 	ble.w	8004dfa <_dtoa_r+0x7ba>
 800519e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051a0:	9308      	str	r3, [sp, #32]
 80051a2:	2001      	movs	r0, #1
 80051a4:	e64d      	b.n	8004e42 <_dtoa_r+0x802>
 80051a6:	f1bb 0f00 	cmp.w	fp, #0
 80051aa:	f77f aed9 	ble.w	8004f60 <_dtoa_r+0x920>
 80051ae:	4656      	mov	r6, sl
 80051b0:	9802      	ldr	r0, [sp, #8]
 80051b2:	4621      	mov	r1, r4
 80051b4:	f7ff f9bb 	bl	800452e <quorem>
 80051b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80051bc:	f806 3b01 	strb.w	r3, [r6], #1
 80051c0:	eba6 020a 	sub.w	r2, r6, sl
 80051c4:	4593      	cmp	fp, r2
 80051c6:	ddb4      	ble.n	8005132 <_dtoa_r+0xaf2>
 80051c8:	9902      	ldr	r1, [sp, #8]
 80051ca:	2300      	movs	r3, #0
 80051cc:	220a      	movs	r2, #10
 80051ce:	4648      	mov	r0, r9
 80051d0:	f000 f968 	bl	80054a4 <__multadd>
 80051d4:	9002      	str	r0, [sp, #8]
 80051d6:	e7eb      	b.n	80051b0 <_dtoa_r+0xb70>
 80051d8:	08006377 	.word	0x08006377
 80051dc:	080062fb 	.word	0x080062fb

080051e0 <_free_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4605      	mov	r5, r0
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d041      	beq.n	800526c <_free_r+0x8c>
 80051e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ec:	1f0c      	subs	r4, r1, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bfb8      	it	lt
 80051f2:	18e4      	addlt	r4, r4, r3
 80051f4:	f000 f8e8 	bl	80053c8 <__malloc_lock>
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <_free_r+0x90>)
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	b933      	cbnz	r3, 800520c <_free_r+0x2c>
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	6014      	str	r4, [r2, #0]
 8005202:	4628      	mov	r0, r5
 8005204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005208:	f000 b8e4 	b.w	80053d4 <__malloc_unlock>
 800520c:	42a3      	cmp	r3, r4
 800520e:	d908      	bls.n	8005222 <_free_r+0x42>
 8005210:	6820      	ldr	r0, [r4, #0]
 8005212:	1821      	adds	r1, r4, r0
 8005214:	428b      	cmp	r3, r1
 8005216:	bf01      	itttt	eq
 8005218:	6819      	ldreq	r1, [r3, #0]
 800521a:	685b      	ldreq	r3, [r3, #4]
 800521c:	1809      	addeq	r1, r1, r0
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	e7ed      	b.n	80051fe <_free_r+0x1e>
 8005222:	461a      	mov	r2, r3
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b10b      	cbz	r3, 800522c <_free_r+0x4c>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d9fa      	bls.n	8005222 <_free_r+0x42>
 800522c:	6811      	ldr	r1, [r2, #0]
 800522e:	1850      	adds	r0, r2, r1
 8005230:	42a0      	cmp	r0, r4
 8005232:	d10b      	bne.n	800524c <_free_r+0x6c>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	4401      	add	r1, r0
 8005238:	1850      	adds	r0, r2, r1
 800523a:	4283      	cmp	r3, r0
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	d1e0      	bne.n	8005202 <_free_r+0x22>
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	6053      	str	r3, [r2, #4]
 8005246:	4408      	add	r0, r1
 8005248:	6010      	str	r0, [r2, #0]
 800524a:	e7da      	b.n	8005202 <_free_r+0x22>
 800524c:	d902      	bls.n	8005254 <_free_r+0x74>
 800524e:	230c      	movs	r3, #12
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	e7d6      	b.n	8005202 <_free_r+0x22>
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	1821      	adds	r1, r4, r0
 8005258:	428b      	cmp	r3, r1
 800525a:	bf04      	itt	eq
 800525c:	6819      	ldreq	r1, [r3, #0]
 800525e:	685b      	ldreq	r3, [r3, #4]
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	bf04      	itt	eq
 8005264:	1809      	addeq	r1, r1, r0
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	6054      	str	r4, [r2, #4]
 800526a:	e7ca      	b.n	8005202 <_free_r+0x22>
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	bf00      	nop
 8005270:	20000344 	.word	0x20000344

08005274 <malloc>:
 8005274:	4b02      	ldr	r3, [pc, #8]	@ (8005280 <malloc+0xc>)
 8005276:	4601      	mov	r1, r0
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	f000 b825 	b.w	80052c8 <_malloc_r>
 800527e:	bf00      	nop
 8005280:	20000018 	.word	0x20000018

08005284 <sbrk_aligned>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4e0f      	ldr	r6, [pc, #60]	@ (80052c4 <sbrk_aligned+0x40>)
 8005288:	460c      	mov	r4, r1
 800528a:	6831      	ldr	r1, [r6, #0]
 800528c:	4605      	mov	r5, r0
 800528e:	b911      	cbnz	r1, 8005296 <sbrk_aligned+0x12>
 8005290:	f000 fea2 	bl	8005fd8 <_sbrk_r>
 8005294:	6030      	str	r0, [r6, #0]
 8005296:	4621      	mov	r1, r4
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fe9d 	bl	8005fd8 <_sbrk_r>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d103      	bne.n	80052aa <sbrk_aligned+0x26>
 80052a2:	f04f 34ff 	mov.w	r4, #4294967295
 80052a6:	4620      	mov	r0, r4
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	1cc4      	adds	r4, r0, #3
 80052ac:	f024 0403 	bic.w	r4, r4, #3
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d0f8      	beq.n	80052a6 <sbrk_aligned+0x22>
 80052b4:	1a21      	subs	r1, r4, r0
 80052b6:	4628      	mov	r0, r5
 80052b8:	f000 fe8e 	bl	8005fd8 <_sbrk_r>
 80052bc:	3001      	adds	r0, #1
 80052be:	d1f2      	bne.n	80052a6 <sbrk_aligned+0x22>
 80052c0:	e7ef      	b.n	80052a2 <sbrk_aligned+0x1e>
 80052c2:	bf00      	nop
 80052c4:	20000340 	.word	0x20000340

080052c8 <_malloc_r>:
 80052c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052cc:	1ccd      	adds	r5, r1, #3
 80052ce:	f025 0503 	bic.w	r5, r5, #3
 80052d2:	3508      	adds	r5, #8
 80052d4:	2d0c      	cmp	r5, #12
 80052d6:	bf38      	it	cc
 80052d8:	250c      	movcc	r5, #12
 80052da:	2d00      	cmp	r5, #0
 80052dc:	4606      	mov	r6, r0
 80052de:	db01      	blt.n	80052e4 <_malloc_r+0x1c>
 80052e0:	42a9      	cmp	r1, r5
 80052e2:	d904      	bls.n	80052ee <_malloc_r+0x26>
 80052e4:	230c      	movs	r3, #12
 80052e6:	6033      	str	r3, [r6, #0]
 80052e8:	2000      	movs	r0, #0
 80052ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053c4 <_malloc_r+0xfc>
 80052f2:	f000 f869 	bl	80053c8 <__malloc_lock>
 80052f6:	f8d8 3000 	ldr.w	r3, [r8]
 80052fa:	461c      	mov	r4, r3
 80052fc:	bb44      	cbnz	r4, 8005350 <_malloc_r+0x88>
 80052fe:	4629      	mov	r1, r5
 8005300:	4630      	mov	r0, r6
 8005302:	f7ff ffbf 	bl	8005284 <sbrk_aligned>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	4604      	mov	r4, r0
 800530a:	d158      	bne.n	80053be <_malloc_r+0xf6>
 800530c:	f8d8 4000 	ldr.w	r4, [r8]
 8005310:	4627      	mov	r7, r4
 8005312:	2f00      	cmp	r7, #0
 8005314:	d143      	bne.n	800539e <_malloc_r+0xd6>
 8005316:	2c00      	cmp	r4, #0
 8005318:	d04b      	beq.n	80053b2 <_malloc_r+0xea>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	4639      	mov	r1, r7
 800531e:	4630      	mov	r0, r6
 8005320:	eb04 0903 	add.w	r9, r4, r3
 8005324:	f000 fe58 	bl	8005fd8 <_sbrk_r>
 8005328:	4581      	cmp	r9, r0
 800532a:	d142      	bne.n	80053b2 <_malloc_r+0xea>
 800532c:	6821      	ldr	r1, [r4, #0]
 800532e:	1a6d      	subs	r5, r5, r1
 8005330:	4629      	mov	r1, r5
 8005332:	4630      	mov	r0, r6
 8005334:	f7ff ffa6 	bl	8005284 <sbrk_aligned>
 8005338:	3001      	adds	r0, #1
 800533a:	d03a      	beq.n	80053b2 <_malloc_r+0xea>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	442b      	add	r3, r5
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	f8d8 3000 	ldr.w	r3, [r8]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	bb62      	cbnz	r2, 80053a4 <_malloc_r+0xdc>
 800534a:	f8c8 7000 	str.w	r7, [r8]
 800534e:	e00f      	b.n	8005370 <_malloc_r+0xa8>
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	1b52      	subs	r2, r2, r5
 8005354:	d420      	bmi.n	8005398 <_malloc_r+0xd0>
 8005356:	2a0b      	cmp	r2, #11
 8005358:	d917      	bls.n	800538a <_malloc_r+0xc2>
 800535a:	1961      	adds	r1, r4, r5
 800535c:	42a3      	cmp	r3, r4
 800535e:	6025      	str	r5, [r4, #0]
 8005360:	bf18      	it	ne
 8005362:	6059      	strne	r1, [r3, #4]
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	bf08      	it	eq
 8005368:	f8c8 1000 	streq.w	r1, [r8]
 800536c:	5162      	str	r2, [r4, r5]
 800536e:	604b      	str	r3, [r1, #4]
 8005370:	4630      	mov	r0, r6
 8005372:	f000 f82f 	bl	80053d4 <__malloc_unlock>
 8005376:	f104 000b 	add.w	r0, r4, #11
 800537a:	1d23      	adds	r3, r4, #4
 800537c:	f020 0007 	bic.w	r0, r0, #7
 8005380:	1ac2      	subs	r2, r0, r3
 8005382:	bf1c      	itt	ne
 8005384:	1a1b      	subne	r3, r3, r0
 8005386:	50a3      	strne	r3, [r4, r2]
 8005388:	e7af      	b.n	80052ea <_malloc_r+0x22>
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	42a3      	cmp	r3, r4
 800538e:	bf0c      	ite	eq
 8005390:	f8c8 2000 	streq.w	r2, [r8]
 8005394:	605a      	strne	r2, [r3, #4]
 8005396:	e7eb      	b.n	8005370 <_malloc_r+0xa8>
 8005398:	4623      	mov	r3, r4
 800539a:	6864      	ldr	r4, [r4, #4]
 800539c:	e7ae      	b.n	80052fc <_malloc_r+0x34>
 800539e:	463c      	mov	r4, r7
 80053a0:	687f      	ldr	r7, [r7, #4]
 80053a2:	e7b6      	b.n	8005312 <_malloc_r+0x4a>
 80053a4:	461a      	mov	r2, r3
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d1fb      	bne.n	80053a4 <_malloc_r+0xdc>
 80053ac:	2300      	movs	r3, #0
 80053ae:	6053      	str	r3, [r2, #4]
 80053b0:	e7de      	b.n	8005370 <_malloc_r+0xa8>
 80053b2:	230c      	movs	r3, #12
 80053b4:	6033      	str	r3, [r6, #0]
 80053b6:	4630      	mov	r0, r6
 80053b8:	f000 f80c 	bl	80053d4 <__malloc_unlock>
 80053bc:	e794      	b.n	80052e8 <_malloc_r+0x20>
 80053be:	6005      	str	r5, [r0, #0]
 80053c0:	e7d6      	b.n	8005370 <_malloc_r+0xa8>
 80053c2:	bf00      	nop
 80053c4:	20000344 	.word	0x20000344

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	@ (80053d0 <__malloc_lock+0x8>)
 80053ca:	f7ff b8ae 	b.w	800452a <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	2000033c 	.word	0x2000033c

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	@ (80053dc <__malloc_unlock+0x8>)
 80053d6:	f7ff b8a9 	b.w	800452c <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	2000033c 	.word	0x2000033c

080053e0 <_Balloc>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	69c6      	ldr	r6, [r0, #28]
 80053e4:	4604      	mov	r4, r0
 80053e6:	460d      	mov	r5, r1
 80053e8:	b976      	cbnz	r6, 8005408 <_Balloc+0x28>
 80053ea:	2010      	movs	r0, #16
 80053ec:	f7ff ff42 	bl	8005274 <malloc>
 80053f0:	4602      	mov	r2, r0
 80053f2:	61e0      	str	r0, [r4, #28]
 80053f4:	b920      	cbnz	r0, 8005400 <_Balloc+0x20>
 80053f6:	4b18      	ldr	r3, [pc, #96]	@ (8005458 <_Balloc+0x78>)
 80053f8:	4818      	ldr	r0, [pc, #96]	@ (800545c <_Balloc+0x7c>)
 80053fa:	216b      	movs	r1, #107	@ 0x6b
 80053fc:	f000 fe0a 	bl	8006014 <__assert_func>
 8005400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005404:	6006      	str	r6, [r0, #0]
 8005406:	60c6      	str	r6, [r0, #12]
 8005408:	69e6      	ldr	r6, [r4, #28]
 800540a:	68f3      	ldr	r3, [r6, #12]
 800540c:	b183      	cbz	r3, 8005430 <_Balloc+0x50>
 800540e:	69e3      	ldr	r3, [r4, #28]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005416:	b9b8      	cbnz	r0, 8005448 <_Balloc+0x68>
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f605 	lsl.w	r6, r1, r5
 800541e:	1d72      	adds	r2, r6, #5
 8005420:	0092      	lsls	r2, r2, #2
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fe14 	bl	8006050 <_calloc_r>
 8005428:	b160      	cbz	r0, 8005444 <_Balloc+0x64>
 800542a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800542e:	e00e      	b.n	800544e <_Balloc+0x6e>
 8005430:	2221      	movs	r2, #33	@ 0x21
 8005432:	2104      	movs	r1, #4
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fe0b 	bl	8006050 <_calloc_r>
 800543a:	69e3      	ldr	r3, [r4, #28]
 800543c:	60f0      	str	r0, [r6, #12]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1e4      	bne.n	800540e <_Balloc+0x2e>
 8005444:	2000      	movs	r0, #0
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	6802      	ldr	r2, [r0, #0]
 800544a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800544e:	2300      	movs	r3, #0
 8005450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005454:	e7f7      	b.n	8005446 <_Balloc+0x66>
 8005456:	bf00      	nop
 8005458:	08006308 	.word	0x08006308
 800545c:	08006388 	.word	0x08006388

08005460 <_Bfree>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	69c6      	ldr	r6, [r0, #28]
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	b976      	cbnz	r6, 8005488 <_Bfree+0x28>
 800546a:	2010      	movs	r0, #16
 800546c:	f7ff ff02 	bl	8005274 <malloc>
 8005470:	4602      	mov	r2, r0
 8005472:	61e8      	str	r0, [r5, #28]
 8005474:	b920      	cbnz	r0, 8005480 <_Bfree+0x20>
 8005476:	4b09      	ldr	r3, [pc, #36]	@ (800549c <_Bfree+0x3c>)
 8005478:	4809      	ldr	r0, [pc, #36]	@ (80054a0 <_Bfree+0x40>)
 800547a:	218f      	movs	r1, #143	@ 0x8f
 800547c:	f000 fdca 	bl	8006014 <__assert_func>
 8005480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005484:	6006      	str	r6, [r0, #0]
 8005486:	60c6      	str	r6, [r0, #12]
 8005488:	b13c      	cbz	r4, 800549a <_Bfree+0x3a>
 800548a:	69eb      	ldr	r3, [r5, #28]
 800548c:	6862      	ldr	r2, [r4, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005494:	6021      	str	r1, [r4, #0]
 8005496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	08006308 	.word	0x08006308
 80054a0:	08006388 	.word	0x08006388

080054a4 <__multadd>:
 80054a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	690d      	ldr	r5, [r1, #16]
 80054aa:	4607      	mov	r7, r0
 80054ac:	460c      	mov	r4, r1
 80054ae:	461e      	mov	r6, r3
 80054b0:	f101 0c14 	add.w	ip, r1, #20
 80054b4:	2000      	movs	r0, #0
 80054b6:	f8dc 3000 	ldr.w	r3, [ip]
 80054ba:	b299      	uxth	r1, r3
 80054bc:	fb02 6101 	mla	r1, r2, r1, r6
 80054c0:	0c1e      	lsrs	r6, r3, #16
 80054c2:	0c0b      	lsrs	r3, r1, #16
 80054c4:	fb02 3306 	mla	r3, r2, r6, r3
 80054c8:	b289      	uxth	r1, r1
 80054ca:	3001      	adds	r0, #1
 80054cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054d0:	4285      	cmp	r5, r0
 80054d2:	f84c 1b04 	str.w	r1, [ip], #4
 80054d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054da:	dcec      	bgt.n	80054b6 <__multadd+0x12>
 80054dc:	b30e      	cbz	r6, 8005522 <__multadd+0x7e>
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	dc19      	bgt.n	8005518 <__multadd+0x74>
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	4638      	mov	r0, r7
 80054e8:	3101      	adds	r1, #1
 80054ea:	f7ff ff79 	bl	80053e0 <_Balloc>
 80054ee:	4680      	mov	r8, r0
 80054f0:	b928      	cbnz	r0, 80054fe <__multadd+0x5a>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005528 <__multadd+0x84>)
 80054f6:	480d      	ldr	r0, [pc, #52]	@ (800552c <__multadd+0x88>)
 80054f8:	21ba      	movs	r1, #186	@ 0xba
 80054fa:	f000 fd8b 	bl	8006014 <__assert_func>
 80054fe:	6922      	ldr	r2, [r4, #16]
 8005500:	3202      	adds	r2, #2
 8005502:	f104 010c 	add.w	r1, r4, #12
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	300c      	adds	r0, #12
 800550a:	f000 fd75 	bl	8005ff8 <memcpy>
 800550e:	4621      	mov	r1, r4
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff ffa5 	bl	8005460 <_Bfree>
 8005516:	4644      	mov	r4, r8
 8005518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800551c:	3501      	adds	r5, #1
 800551e:	615e      	str	r6, [r3, #20]
 8005520:	6125      	str	r5, [r4, #16]
 8005522:	4620      	mov	r0, r4
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	08006377 	.word	0x08006377
 800552c:	08006388 	.word	0x08006388

08005530 <__hi0bits>:
 8005530:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005534:	4603      	mov	r3, r0
 8005536:	bf36      	itet	cc
 8005538:	0403      	lslcc	r3, r0, #16
 800553a:	2000      	movcs	r0, #0
 800553c:	2010      	movcc	r0, #16
 800553e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005542:	bf3c      	itt	cc
 8005544:	021b      	lslcc	r3, r3, #8
 8005546:	3008      	addcc	r0, #8
 8005548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800554c:	bf3c      	itt	cc
 800554e:	011b      	lslcc	r3, r3, #4
 8005550:	3004      	addcc	r0, #4
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005556:	bf3c      	itt	cc
 8005558:	009b      	lslcc	r3, r3, #2
 800555a:	3002      	addcc	r0, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	db05      	blt.n	800556c <__hi0bits+0x3c>
 8005560:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005564:	f100 0001 	add.w	r0, r0, #1
 8005568:	bf08      	it	eq
 800556a:	2020      	moveq	r0, #32
 800556c:	4770      	bx	lr

0800556e <__lo0bits>:
 800556e:	6803      	ldr	r3, [r0, #0]
 8005570:	4602      	mov	r2, r0
 8005572:	f013 0007 	ands.w	r0, r3, #7
 8005576:	d00b      	beq.n	8005590 <__lo0bits+0x22>
 8005578:	07d9      	lsls	r1, r3, #31
 800557a:	d421      	bmi.n	80055c0 <__lo0bits+0x52>
 800557c:	0798      	lsls	r0, r3, #30
 800557e:	bf49      	itett	mi
 8005580:	085b      	lsrmi	r3, r3, #1
 8005582:	089b      	lsrpl	r3, r3, #2
 8005584:	2001      	movmi	r0, #1
 8005586:	6013      	strmi	r3, [r2, #0]
 8005588:	bf5c      	itt	pl
 800558a:	6013      	strpl	r3, [r2, #0]
 800558c:	2002      	movpl	r0, #2
 800558e:	4770      	bx	lr
 8005590:	b299      	uxth	r1, r3
 8005592:	b909      	cbnz	r1, 8005598 <__lo0bits+0x2a>
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	2010      	movs	r0, #16
 8005598:	b2d9      	uxtb	r1, r3
 800559a:	b909      	cbnz	r1, 80055a0 <__lo0bits+0x32>
 800559c:	3008      	adds	r0, #8
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	0719      	lsls	r1, r3, #28
 80055a2:	bf04      	itt	eq
 80055a4:	091b      	lsreq	r3, r3, #4
 80055a6:	3004      	addeq	r0, #4
 80055a8:	0799      	lsls	r1, r3, #30
 80055aa:	bf04      	itt	eq
 80055ac:	089b      	lsreq	r3, r3, #2
 80055ae:	3002      	addeq	r0, #2
 80055b0:	07d9      	lsls	r1, r3, #31
 80055b2:	d403      	bmi.n	80055bc <__lo0bits+0x4e>
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	f100 0001 	add.w	r0, r0, #1
 80055ba:	d003      	beq.n	80055c4 <__lo0bits+0x56>
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4770      	bx	lr
 80055c0:	2000      	movs	r0, #0
 80055c2:	4770      	bx	lr
 80055c4:	2020      	movs	r0, #32
 80055c6:	4770      	bx	lr

080055c8 <__i2b>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	2101      	movs	r1, #1
 80055ce:	f7ff ff07 	bl	80053e0 <_Balloc>
 80055d2:	4602      	mov	r2, r0
 80055d4:	b928      	cbnz	r0, 80055e2 <__i2b+0x1a>
 80055d6:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <__i2b+0x24>)
 80055d8:	4805      	ldr	r0, [pc, #20]	@ (80055f0 <__i2b+0x28>)
 80055da:	f240 1145 	movw	r1, #325	@ 0x145
 80055de:	f000 fd19 	bl	8006014 <__assert_func>
 80055e2:	2301      	movs	r3, #1
 80055e4:	6144      	str	r4, [r0, #20]
 80055e6:	6103      	str	r3, [r0, #16]
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	bf00      	nop
 80055ec:	08006377 	.word	0x08006377
 80055f0:	08006388 	.word	0x08006388

080055f4 <__multiply>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	4617      	mov	r7, r2
 80055fa:	690a      	ldr	r2, [r1, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bfa8      	it	ge
 8005602:	463b      	movge	r3, r7
 8005604:	4689      	mov	r9, r1
 8005606:	bfa4      	itt	ge
 8005608:	460f      	movge	r7, r1
 800560a:	4699      	movge	r9, r3
 800560c:	693d      	ldr	r5, [r7, #16]
 800560e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	eb05 060a 	add.w	r6, r5, sl
 800561a:	42b3      	cmp	r3, r6
 800561c:	b085      	sub	sp, #20
 800561e:	bfb8      	it	lt
 8005620:	3101      	addlt	r1, #1
 8005622:	f7ff fedd 	bl	80053e0 <_Balloc>
 8005626:	b930      	cbnz	r0, 8005636 <__multiply+0x42>
 8005628:	4602      	mov	r2, r0
 800562a:	4b41      	ldr	r3, [pc, #260]	@ (8005730 <__multiply+0x13c>)
 800562c:	4841      	ldr	r0, [pc, #260]	@ (8005734 <__multiply+0x140>)
 800562e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005632:	f000 fcef 	bl	8006014 <__assert_func>
 8005636:	f100 0414 	add.w	r4, r0, #20
 800563a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800563e:	4623      	mov	r3, r4
 8005640:	2200      	movs	r2, #0
 8005642:	4573      	cmp	r3, lr
 8005644:	d320      	bcc.n	8005688 <__multiply+0x94>
 8005646:	f107 0814 	add.w	r8, r7, #20
 800564a:	f109 0114 	add.w	r1, r9, #20
 800564e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005652:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005656:	9302      	str	r3, [sp, #8]
 8005658:	1beb      	subs	r3, r5, r7
 800565a:	3b15      	subs	r3, #21
 800565c:	f023 0303 	bic.w	r3, r3, #3
 8005660:	3304      	adds	r3, #4
 8005662:	3715      	adds	r7, #21
 8005664:	42bd      	cmp	r5, r7
 8005666:	bf38      	it	cc
 8005668:	2304      	movcc	r3, #4
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	9b02      	ldr	r3, [sp, #8]
 800566e:	9103      	str	r1, [sp, #12]
 8005670:	428b      	cmp	r3, r1
 8005672:	d80c      	bhi.n	800568e <__multiply+0x9a>
 8005674:	2e00      	cmp	r6, #0
 8005676:	dd03      	ble.n	8005680 <__multiply+0x8c>
 8005678:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800567c:	2b00      	cmp	r3, #0
 800567e:	d055      	beq.n	800572c <__multiply+0x138>
 8005680:	6106      	str	r6, [r0, #16]
 8005682:	b005      	add	sp, #20
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	f843 2b04 	str.w	r2, [r3], #4
 800568c:	e7d9      	b.n	8005642 <__multiply+0x4e>
 800568e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005692:	f1ba 0f00 	cmp.w	sl, #0
 8005696:	d01f      	beq.n	80056d8 <__multiply+0xe4>
 8005698:	46c4      	mov	ip, r8
 800569a:	46a1      	mov	r9, r4
 800569c:	2700      	movs	r7, #0
 800569e:	f85c 2b04 	ldr.w	r2, [ip], #4
 80056a2:	f8d9 3000 	ldr.w	r3, [r9]
 80056a6:	fa1f fb82 	uxth.w	fp, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80056b0:	443b      	add	r3, r7
 80056b2:	f8d9 7000 	ldr.w	r7, [r9]
 80056b6:	0c12      	lsrs	r2, r2, #16
 80056b8:	0c3f      	lsrs	r7, r7, #16
 80056ba:	fb0a 7202 	mla	r2, sl, r2, r7
 80056be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056c8:	4565      	cmp	r5, ip
 80056ca:	f849 3b04 	str.w	r3, [r9], #4
 80056ce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80056d2:	d8e4      	bhi.n	800569e <__multiply+0xaa>
 80056d4:	9b01      	ldr	r3, [sp, #4]
 80056d6:	50e7      	str	r7, [r4, r3]
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056de:	3104      	adds	r1, #4
 80056e0:	f1b9 0f00 	cmp.w	r9, #0
 80056e4:	d020      	beq.n	8005728 <__multiply+0x134>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	4647      	mov	r7, r8
 80056ea:	46a4      	mov	ip, r4
 80056ec:	f04f 0a00 	mov.w	sl, #0
 80056f0:	f8b7 b000 	ldrh.w	fp, [r7]
 80056f4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80056f8:	fb09 220b 	mla	r2, r9, fp, r2
 80056fc:	4452      	add	r2, sl
 80056fe:	b29b      	uxth	r3, r3
 8005700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005704:	f84c 3b04 	str.w	r3, [ip], #4
 8005708:	f857 3b04 	ldr.w	r3, [r7], #4
 800570c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005710:	f8bc 3000 	ldrh.w	r3, [ip]
 8005714:	fb09 330a 	mla	r3, r9, sl, r3
 8005718:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800571c:	42bd      	cmp	r5, r7
 800571e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005722:	d8e5      	bhi.n	80056f0 <__multiply+0xfc>
 8005724:	9a01      	ldr	r2, [sp, #4]
 8005726:	50a3      	str	r3, [r4, r2]
 8005728:	3404      	adds	r4, #4
 800572a:	e79f      	b.n	800566c <__multiply+0x78>
 800572c:	3e01      	subs	r6, #1
 800572e:	e7a1      	b.n	8005674 <__multiply+0x80>
 8005730:	08006377 	.word	0x08006377
 8005734:	08006388 	.word	0x08006388

08005738 <__pow5mult>:
 8005738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800573c:	4615      	mov	r5, r2
 800573e:	f012 0203 	ands.w	r2, r2, #3
 8005742:	4607      	mov	r7, r0
 8005744:	460e      	mov	r6, r1
 8005746:	d007      	beq.n	8005758 <__pow5mult+0x20>
 8005748:	4c25      	ldr	r4, [pc, #148]	@ (80057e0 <__pow5mult+0xa8>)
 800574a:	3a01      	subs	r2, #1
 800574c:	2300      	movs	r3, #0
 800574e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005752:	f7ff fea7 	bl	80054a4 <__multadd>
 8005756:	4606      	mov	r6, r0
 8005758:	10ad      	asrs	r5, r5, #2
 800575a:	d03d      	beq.n	80057d8 <__pow5mult+0xa0>
 800575c:	69fc      	ldr	r4, [r7, #28]
 800575e:	b97c      	cbnz	r4, 8005780 <__pow5mult+0x48>
 8005760:	2010      	movs	r0, #16
 8005762:	f7ff fd87 	bl	8005274 <malloc>
 8005766:	4602      	mov	r2, r0
 8005768:	61f8      	str	r0, [r7, #28]
 800576a:	b928      	cbnz	r0, 8005778 <__pow5mult+0x40>
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <__pow5mult+0xac>)
 800576e:	481e      	ldr	r0, [pc, #120]	@ (80057e8 <__pow5mult+0xb0>)
 8005770:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005774:	f000 fc4e 	bl	8006014 <__assert_func>
 8005778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800577c:	6004      	str	r4, [r0, #0]
 800577e:	60c4      	str	r4, [r0, #12]
 8005780:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005788:	b94c      	cbnz	r4, 800579e <__pow5mult+0x66>
 800578a:	f240 2171 	movw	r1, #625	@ 0x271
 800578e:	4638      	mov	r0, r7
 8005790:	f7ff ff1a 	bl	80055c8 <__i2b>
 8005794:	2300      	movs	r3, #0
 8005796:	f8c8 0008 	str.w	r0, [r8, #8]
 800579a:	4604      	mov	r4, r0
 800579c:	6003      	str	r3, [r0, #0]
 800579e:	f04f 0900 	mov.w	r9, #0
 80057a2:	07eb      	lsls	r3, r5, #31
 80057a4:	d50a      	bpl.n	80057bc <__pow5mult+0x84>
 80057a6:	4631      	mov	r1, r6
 80057a8:	4622      	mov	r2, r4
 80057aa:	4638      	mov	r0, r7
 80057ac:	f7ff ff22 	bl	80055f4 <__multiply>
 80057b0:	4631      	mov	r1, r6
 80057b2:	4680      	mov	r8, r0
 80057b4:	4638      	mov	r0, r7
 80057b6:	f7ff fe53 	bl	8005460 <_Bfree>
 80057ba:	4646      	mov	r6, r8
 80057bc:	106d      	asrs	r5, r5, #1
 80057be:	d00b      	beq.n	80057d8 <__pow5mult+0xa0>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	b938      	cbnz	r0, 80057d4 <__pow5mult+0x9c>
 80057c4:	4622      	mov	r2, r4
 80057c6:	4621      	mov	r1, r4
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ff13 	bl	80055f4 <__multiply>
 80057ce:	6020      	str	r0, [r4, #0]
 80057d0:	f8c0 9000 	str.w	r9, [r0]
 80057d4:	4604      	mov	r4, r0
 80057d6:	e7e4      	b.n	80057a2 <__pow5mult+0x6a>
 80057d8:	4630      	mov	r0, r6
 80057da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057de:	bf00      	nop
 80057e0:	08006438 	.word	0x08006438
 80057e4:	08006308 	.word	0x08006308
 80057e8:	08006388 	.word	0x08006388

080057ec <__lshift>:
 80057ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	460c      	mov	r4, r1
 80057f2:	6849      	ldr	r1, [r1, #4]
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057fa:	68a3      	ldr	r3, [r4, #8]
 80057fc:	4607      	mov	r7, r0
 80057fe:	4691      	mov	r9, r2
 8005800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005804:	f108 0601 	add.w	r6, r8, #1
 8005808:	42b3      	cmp	r3, r6
 800580a:	db0b      	blt.n	8005824 <__lshift+0x38>
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff fde7 	bl	80053e0 <_Balloc>
 8005812:	4605      	mov	r5, r0
 8005814:	b948      	cbnz	r0, 800582a <__lshift+0x3e>
 8005816:	4602      	mov	r2, r0
 8005818:	4b28      	ldr	r3, [pc, #160]	@ (80058bc <__lshift+0xd0>)
 800581a:	4829      	ldr	r0, [pc, #164]	@ (80058c0 <__lshift+0xd4>)
 800581c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005820:	f000 fbf8 	bl	8006014 <__assert_func>
 8005824:	3101      	adds	r1, #1
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	e7ee      	b.n	8005808 <__lshift+0x1c>
 800582a:	2300      	movs	r3, #0
 800582c:	f100 0114 	add.w	r1, r0, #20
 8005830:	f100 0210 	add.w	r2, r0, #16
 8005834:	4618      	mov	r0, r3
 8005836:	4553      	cmp	r3, sl
 8005838:	db33      	blt.n	80058a2 <__lshift+0xb6>
 800583a:	6920      	ldr	r0, [r4, #16]
 800583c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005840:	f104 0314 	add.w	r3, r4, #20
 8005844:	f019 091f 	ands.w	r9, r9, #31
 8005848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800584c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005850:	d02b      	beq.n	80058aa <__lshift+0xbe>
 8005852:	f1c9 0e20 	rsb	lr, r9, #32
 8005856:	468a      	mov	sl, r1
 8005858:	2200      	movs	r2, #0
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	fa00 f009 	lsl.w	r0, r0, r9
 8005860:	4310      	orrs	r0, r2
 8005862:	f84a 0b04 	str.w	r0, [sl], #4
 8005866:	f853 2b04 	ldr.w	r2, [r3], #4
 800586a:	459c      	cmp	ip, r3
 800586c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005870:	d8f3      	bhi.n	800585a <__lshift+0x6e>
 8005872:	ebac 0304 	sub.w	r3, ip, r4
 8005876:	3b15      	subs	r3, #21
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	3304      	adds	r3, #4
 800587e:	f104 0015 	add.w	r0, r4, #21
 8005882:	4560      	cmp	r0, ip
 8005884:	bf88      	it	hi
 8005886:	2304      	movhi	r3, #4
 8005888:	50ca      	str	r2, [r1, r3]
 800588a:	b10a      	cbz	r2, 8005890 <__lshift+0xa4>
 800588c:	f108 0602 	add.w	r6, r8, #2
 8005890:	3e01      	subs	r6, #1
 8005892:	4638      	mov	r0, r7
 8005894:	612e      	str	r6, [r5, #16]
 8005896:	4621      	mov	r1, r4
 8005898:	f7ff fde2 	bl	8005460 <_Bfree>
 800589c:	4628      	mov	r0, r5
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80058a6:	3301      	adds	r3, #1
 80058a8:	e7c5      	b.n	8005836 <__lshift+0x4a>
 80058aa:	3904      	subs	r1, #4
 80058ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058b4:	459c      	cmp	ip, r3
 80058b6:	d8f9      	bhi.n	80058ac <__lshift+0xc0>
 80058b8:	e7ea      	b.n	8005890 <__lshift+0xa4>
 80058ba:	bf00      	nop
 80058bc:	08006377 	.word	0x08006377
 80058c0:	08006388 	.word	0x08006388

080058c4 <__mcmp>:
 80058c4:	690a      	ldr	r2, [r1, #16]
 80058c6:	4603      	mov	r3, r0
 80058c8:	6900      	ldr	r0, [r0, #16]
 80058ca:	1a80      	subs	r0, r0, r2
 80058cc:	b530      	push	{r4, r5, lr}
 80058ce:	d10e      	bne.n	80058ee <__mcmp+0x2a>
 80058d0:	3314      	adds	r3, #20
 80058d2:	3114      	adds	r1, #20
 80058d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058e4:	4295      	cmp	r5, r2
 80058e6:	d003      	beq.n	80058f0 <__mcmp+0x2c>
 80058e8:	d205      	bcs.n	80058f6 <__mcmp+0x32>
 80058ea:	f04f 30ff 	mov.w	r0, #4294967295
 80058ee:	bd30      	pop	{r4, r5, pc}
 80058f0:	42a3      	cmp	r3, r4
 80058f2:	d3f3      	bcc.n	80058dc <__mcmp+0x18>
 80058f4:	e7fb      	b.n	80058ee <__mcmp+0x2a>
 80058f6:	2001      	movs	r0, #1
 80058f8:	e7f9      	b.n	80058ee <__mcmp+0x2a>
	...

080058fc <__mdiff>:
 80058fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4689      	mov	r9, r1
 8005902:	4606      	mov	r6, r0
 8005904:	4611      	mov	r1, r2
 8005906:	4648      	mov	r0, r9
 8005908:	4614      	mov	r4, r2
 800590a:	f7ff ffdb 	bl	80058c4 <__mcmp>
 800590e:	1e05      	subs	r5, r0, #0
 8005910:	d112      	bne.n	8005938 <__mdiff+0x3c>
 8005912:	4629      	mov	r1, r5
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff fd63 	bl	80053e0 <_Balloc>
 800591a:	4602      	mov	r2, r0
 800591c:	b928      	cbnz	r0, 800592a <__mdiff+0x2e>
 800591e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a1c <__mdiff+0x120>)
 8005920:	f240 2137 	movw	r1, #567	@ 0x237
 8005924:	483e      	ldr	r0, [pc, #248]	@ (8005a20 <__mdiff+0x124>)
 8005926:	f000 fb75 	bl	8006014 <__assert_func>
 800592a:	2301      	movs	r3, #1
 800592c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005930:	4610      	mov	r0, r2
 8005932:	b003      	add	sp, #12
 8005934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005938:	bfbc      	itt	lt
 800593a:	464b      	movlt	r3, r9
 800593c:	46a1      	movlt	r9, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005944:	bfba      	itte	lt
 8005946:	461c      	movlt	r4, r3
 8005948:	2501      	movlt	r5, #1
 800594a:	2500      	movge	r5, #0
 800594c:	f7ff fd48 	bl	80053e0 <_Balloc>
 8005950:	4602      	mov	r2, r0
 8005952:	b918      	cbnz	r0, 800595c <__mdiff+0x60>
 8005954:	4b31      	ldr	r3, [pc, #196]	@ (8005a1c <__mdiff+0x120>)
 8005956:	f240 2145 	movw	r1, #581	@ 0x245
 800595a:	e7e3      	b.n	8005924 <__mdiff+0x28>
 800595c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005960:	6926      	ldr	r6, [r4, #16]
 8005962:	60c5      	str	r5, [r0, #12]
 8005964:	f109 0310 	add.w	r3, r9, #16
 8005968:	f109 0514 	add.w	r5, r9, #20
 800596c:	f104 0e14 	add.w	lr, r4, #20
 8005970:	f100 0b14 	add.w	fp, r0, #20
 8005974:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005978:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	46d9      	mov	r9, fp
 8005980:	f04f 0c00 	mov.w	ip, #0
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	f85e 0b04 	ldr.w	r0, [lr], #4
 800598a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	fa1f f38a 	uxth.w	r3, sl
 8005994:	4619      	mov	r1, r3
 8005996:	b283      	uxth	r3, r0
 8005998:	1acb      	subs	r3, r1, r3
 800599a:	0c00      	lsrs	r0, r0, #16
 800599c:	4463      	add	r3, ip
 800599e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059ac:	4576      	cmp	r6, lr
 80059ae:	f849 3b04 	str.w	r3, [r9], #4
 80059b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059b6:	d8e5      	bhi.n	8005984 <__mdiff+0x88>
 80059b8:	1b33      	subs	r3, r6, r4
 80059ba:	3b15      	subs	r3, #21
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	3415      	adds	r4, #21
 80059c2:	3304      	adds	r3, #4
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	bf38      	it	cc
 80059c8:	2304      	movcc	r3, #4
 80059ca:	441d      	add	r5, r3
 80059cc:	445b      	add	r3, fp
 80059ce:	461e      	mov	r6, r3
 80059d0:	462c      	mov	r4, r5
 80059d2:	4544      	cmp	r4, r8
 80059d4:	d30e      	bcc.n	80059f4 <__mdiff+0xf8>
 80059d6:	f108 0103 	add.w	r1, r8, #3
 80059da:	1b49      	subs	r1, r1, r5
 80059dc:	f021 0103 	bic.w	r1, r1, #3
 80059e0:	3d03      	subs	r5, #3
 80059e2:	45a8      	cmp	r8, r5
 80059e4:	bf38      	it	cc
 80059e6:	2100      	movcc	r1, #0
 80059e8:	440b      	add	r3, r1
 80059ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059ee:	b191      	cbz	r1, 8005a16 <__mdiff+0x11a>
 80059f0:	6117      	str	r7, [r2, #16]
 80059f2:	e79d      	b.n	8005930 <__mdiff+0x34>
 80059f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80059f8:	46e6      	mov	lr, ip
 80059fa:	0c08      	lsrs	r0, r1, #16
 80059fc:	fa1c fc81 	uxtah	ip, ip, r1
 8005a00:	4471      	add	r1, lr
 8005a02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a06:	b289      	uxth	r1, r1
 8005a08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a0c:	f846 1b04 	str.w	r1, [r6], #4
 8005a10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a14:	e7dd      	b.n	80059d2 <__mdiff+0xd6>
 8005a16:	3f01      	subs	r7, #1
 8005a18:	e7e7      	b.n	80059ea <__mdiff+0xee>
 8005a1a:	bf00      	nop
 8005a1c:	08006377 	.word	0x08006377
 8005a20:	08006388 	.word	0x08006388

08005a24 <__d2b>:
 8005a24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a28:	460f      	mov	r7, r1
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	ec59 8b10 	vmov	r8, r9, d0
 8005a30:	4616      	mov	r6, r2
 8005a32:	f7ff fcd5 	bl	80053e0 <_Balloc>
 8005a36:	4604      	mov	r4, r0
 8005a38:	b930      	cbnz	r0, 8005a48 <__d2b+0x24>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b23      	ldr	r3, [pc, #140]	@ (8005acc <__d2b+0xa8>)
 8005a3e:	4824      	ldr	r0, [pc, #144]	@ (8005ad0 <__d2b+0xac>)
 8005a40:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a44:	f000 fae6 	bl	8006014 <__assert_func>
 8005a48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a50:	b10d      	cbz	r5, 8005a56 <__d2b+0x32>
 8005a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f1b8 0300 	subs.w	r3, r8, #0
 8005a5c:	d023      	beq.n	8005aa6 <__d2b+0x82>
 8005a5e:	4668      	mov	r0, sp
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	f7ff fd84 	bl	800556e <__lo0bits>
 8005a66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a6a:	b1d0      	cbz	r0, 8005aa2 <__d2b+0x7e>
 8005a6c:	f1c0 0320 	rsb	r3, r0, #32
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	430b      	orrs	r3, r1
 8005a76:	40c2      	lsrs	r2, r0
 8005a78:	6163      	str	r3, [r4, #20]
 8005a7a:	9201      	str	r2, [sp, #4]
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	61a3      	str	r3, [r4, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2201      	moveq	r2, #1
 8005a86:	2202      	movne	r2, #2
 8005a88:	6122      	str	r2, [r4, #16]
 8005a8a:	b1a5      	cbz	r5, 8005ab6 <__d2b+0x92>
 8005a8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a90:	4405      	add	r5, r0
 8005a92:	603d      	str	r5, [r7, #0]
 8005a94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a98:	6030      	str	r0, [r6, #0]
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	b003      	add	sp, #12
 8005a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aa2:	6161      	str	r1, [r4, #20]
 8005aa4:	e7ea      	b.n	8005a7c <__d2b+0x58>
 8005aa6:	a801      	add	r0, sp, #4
 8005aa8:	f7ff fd61 	bl	800556e <__lo0bits>
 8005aac:	9b01      	ldr	r3, [sp, #4]
 8005aae:	6163      	str	r3, [r4, #20]
 8005ab0:	3020      	adds	r0, #32
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	e7e8      	b.n	8005a88 <__d2b+0x64>
 8005ab6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005aba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005abe:	6038      	str	r0, [r7, #0]
 8005ac0:	6918      	ldr	r0, [r3, #16]
 8005ac2:	f7ff fd35 	bl	8005530 <__hi0bits>
 8005ac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005aca:	e7e5      	b.n	8005a98 <__d2b+0x74>
 8005acc:	08006377 	.word	0x08006377
 8005ad0:	08006388 	.word	0x08006388

08005ad4 <__sfputc_r>:
 8005ad4:	6893      	ldr	r3, [r2, #8]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	b410      	push	{r4}
 8005adc:	6093      	str	r3, [r2, #8]
 8005ade:	da08      	bge.n	8005af2 <__sfputc_r+0x1e>
 8005ae0:	6994      	ldr	r4, [r2, #24]
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	db01      	blt.n	8005aea <__sfputc_r+0x16>
 8005ae6:	290a      	cmp	r1, #10
 8005ae8:	d103      	bne.n	8005af2 <__sfputc_r+0x1e>
 8005aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aee:	f000 b9df 	b.w	8005eb0 <__swbuf_r>
 8005af2:	6813      	ldr	r3, [r2, #0]
 8005af4:	1c58      	adds	r0, r3, #1
 8005af6:	6010      	str	r0, [r2, #0]
 8005af8:	7019      	strb	r1, [r3, #0]
 8005afa:	4608      	mov	r0, r1
 8005afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <__sfputs_r>:
 8005b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	18d5      	adds	r5, r2, r3
 8005b0c:	42ac      	cmp	r4, r5
 8005b0e:	d101      	bne.n	8005b14 <__sfputs_r+0x12>
 8005b10:	2000      	movs	r0, #0
 8005b12:	e007      	b.n	8005b24 <__sfputs_r+0x22>
 8005b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b18:	463a      	mov	r2, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7ff ffda 	bl	8005ad4 <__sfputc_r>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d1f3      	bne.n	8005b0c <__sfputs_r+0xa>
 8005b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b28 <_vfiprintf_r>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	b09d      	sub	sp, #116	@ 0x74
 8005b30:	4614      	mov	r4, r2
 8005b32:	4698      	mov	r8, r3
 8005b34:	4606      	mov	r6, r0
 8005b36:	b118      	cbz	r0, 8005b40 <_vfiprintf_r+0x18>
 8005b38:	6a03      	ldr	r3, [r0, #32]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <_vfiprintf_r+0x18>
 8005b3c:	f7fe fbec 	bl	8004318 <__sinit>
 8005b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	d405      	bmi.n	8005b52 <_vfiprintf_r+0x2a>
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	059a      	lsls	r2, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <_vfiprintf_r+0x2a>
 8005b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b4e:	f7fe fcec 	bl	800452a <__retarget_lock_acquire_recursive>
 8005b52:	89ab      	ldrh	r3, [r5, #12]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	d501      	bpl.n	8005b5c <_vfiprintf_r+0x34>
 8005b58:	692b      	ldr	r3, [r5, #16]
 8005b5a:	b99b      	cbnz	r3, 8005b84 <_vfiprintf_r+0x5c>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 f9e4 	bl	8005f2c <__swsetup_r>
 8005b64:	b170      	cbz	r0, 8005b84 <_vfiprintf_r+0x5c>
 8005b66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b68:	07dc      	lsls	r4, r3, #31
 8005b6a:	d504      	bpl.n	8005b76 <_vfiprintf_r+0x4e>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	b01d      	add	sp, #116	@ 0x74
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	0598      	lsls	r0, r3, #22
 8005b7a:	d4f7      	bmi.n	8005b6c <_vfiprintf_r+0x44>
 8005b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b7e:	f7fe fcd5 	bl	800452c <__retarget_lock_release_recursive>
 8005b82:	e7f3      	b.n	8005b6c <_vfiprintf_r+0x44>
 8005b84:	2300      	movs	r3, #0
 8005b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b92:	2330      	movs	r3, #48	@ 0x30
 8005b94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d44 <_vfiprintf_r+0x21c>
 8005b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b9c:	f04f 0901 	mov.w	r9, #1
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ba8:	b10a      	cbz	r2, 8005bae <_vfiprintf_r+0x86>
 8005baa:	2a25      	cmp	r2, #37	@ 0x25
 8005bac:	d1f9      	bne.n	8005ba2 <_vfiprintf_r+0x7a>
 8005bae:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb2:	d00b      	beq.n	8005bcc <_vfiprintf_r+0xa4>
 8005bb4:	465b      	mov	r3, fp
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ffa1 	bl	8005b02 <__sfputs_r>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	f000 80a7 	beq.w	8005d14 <_vfiprintf_r+0x1ec>
 8005bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bc8:	445a      	add	r2, fp
 8005bca:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 809f 	beq.w	8005d14 <_vfiprintf_r+0x1ec>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be0:	f10a 0a01 	add.w	sl, sl, #1
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bec:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bee:	4654      	mov	r4, sl
 8005bf0:	2205      	movs	r2, #5
 8005bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf6:	4853      	ldr	r0, [pc, #332]	@ (8005d44 <_vfiprintf_r+0x21c>)
 8005bf8:	f7fa faea 	bl	80001d0 <memchr>
 8005bfc:	9a04      	ldr	r2, [sp, #16]
 8005bfe:	b9d8      	cbnz	r0, 8005c38 <_vfiprintf_r+0x110>
 8005c00:	06d1      	lsls	r1, r2, #27
 8005c02:	bf44      	itt	mi
 8005c04:	2320      	movmi	r3, #32
 8005c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c0a:	0713      	lsls	r3, r2, #28
 8005c0c:	bf44      	itt	mi
 8005c0e:	232b      	movmi	r3, #43	@ 0x2b
 8005c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c14:	f89a 3000 	ldrb.w	r3, [sl]
 8005c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c1a:	d015      	beq.n	8005c48 <_vfiprintf_r+0x120>
 8005c1c:	9a07      	ldr	r2, [sp, #28]
 8005c1e:	4654      	mov	r4, sl
 8005c20:	2000      	movs	r0, #0
 8005c22:	f04f 0c0a 	mov.w	ip, #10
 8005c26:	4621      	mov	r1, r4
 8005c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2c:	3b30      	subs	r3, #48	@ 0x30
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d94b      	bls.n	8005cca <_vfiprintf_r+0x1a2>
 8005c32:	b1b0      	cbz	r0, 8005c62 <_vfiprintf_r+0x13a>
 8005c34:	9207      	str	r2, [sp, #28]
 8005c36:	e014      	b.n	8005c62 <_vfiprintf_r+0x13a>
 8005c38:	eba0 0308 	sub.w	r3, r0, r8
 8005c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	46a2      	mov	sl, r4
 8005c46:	e7d2      	b.n	8005bee <_vfiprintf_r+0xc6>
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	1d19      	adds	r1, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9103      	str	r1, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfbb      	ittet	lt
 8005c54:	425b      	neglt	r3, r3
 8005c56:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5a:	9307      	strge	r3, [sp, #28]
 8005c5c:	9307      	strlt	r3, [sp, #28]
 8005c5e:	bfb8      	it	lt
 8005c60:	9204      	strlt	r2, [sp, #16]
 8005c62:	7823      	ldrb	r3, [r4, #0]
 8005c64:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c66:	d10a      	bne.n	8005c7e <_vfiprintf_r+0x156>
 8005c68:	7863      	ldrb	r3, [r4, #1]
 8005c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c6c:	d132      	bne.n	8005cd4 <_vfiprintf_r+0x1ac>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	1d1a      	adds	r2, r3, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	9203      	str	r2, [sp, #12]
 8005c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c7a:	3402      	adds	r4, #2
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d54 <_vfiprintf_r+0x22c>
 8005c82:	7821      	ldrb	r1, [r4, #0]
 8005c84:	2203      	movs	r2, #3
 8005c86:	4650      	mov	r0, sl
 8005c88:	f7fa faa2 	bl	80001d0 <memchr>
 8005c8c:	b138      	cbz	r0, 8005c9e <_vfiprintf_r+0x176>
 8005c8e:	9b04      	ldr	r3, [sp, #16]
 8005c90:	eba0 000a 	sub.w	r0, r0, sl
 8005c94:	2240      	movs	r2, #64	@ 0x40
 8005c96:	4082      	lsls	r2, r0
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca2:	4829      	ldr	r0, [pc, #164]	@ (8005d48 <_vfiprintf_r+0x220>)
 8005ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ca8:	2206      	movs	r2, #6
 8005caa:	f7fa fa91 	bl	80001d0 <memchr>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d03f      	beq.n	8005d32 <_vfiprintf_r+0x20a>
 8005cb2:	4b26      	ldr	r3, [pc, #152]	@ (8005d4c <_vfiprintf_r+0x224>)
 8005cb4:	bb1b      	cbnz	r3, 8005cfe <_vfiprintf_r+0x1d6>
 8005cb6:	9b03      	ldr	r3, [sp, #12]
 8005cb8:	3307      	adds	r3, #7
 8005cba:	f023 0307 	bic.w	r3, r3, #7
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc4:	443b      	add	r3, r7
 8005cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cc8:	e76a      	b.n	8005ba0 <_vfiprintf_r+0x78>
 8005cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cce:	460c      	mov	r4, r1
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	e7a8      	b.n	8005c26 <_vfiprintf_r+0xfe>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	3401      	adds	r4, #1
 8005cd8:	9305      	str	r3, [sp, #20]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f04f 0c0a 	mov.w	ip, #10
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce6:	3a30      	subs	r2, #48	@ 0x30
 8005ce8:	2a09      	cmp	r2, #9
 8005cea:	d903      	bls.n	8005cf4 <_vfiprintf_r+0x1cc>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0c6      	beq.n	8005c7e <_vfiprintf_r+0x156>
 8005cf0:	9105      	str	r1, [sp, #20]
 8005cf2:	e7c4      	b.n	8005c7e <_vfiprintf_r+0x156>
 8005cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7f0      	b.n	8005ce0 <_vfiprintf_r+0x1b8>
 8005cfe:	ab03      	add	r3, sp, #12
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	462a      	mov	r2, r5
 8005d04:	4b12      	ldr	r3, [pc, #72]	@ (8005d50 <_vfiprintf_r+0x228>)
 8005d06:	a904      	add	r1, sp, #16
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7fd fec3 	bl	8003a94 <_printf_float>
 8005d0e:	4607      	mov	r7, r0
 8005d10:	1c78      	adds	r0, r7, #1
 8005d12:	d1d6      	bne.n	8005cc2 <_vfiprintf_r+0x19a>
 8005d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d16:	07d9      	lsls	r1, r3, #31
 8005d18:	d405      	bmi.n	8005d26 <_vfiprintf_r+0x1fe>
 8005d1a:	89ab      	ldrh	r3, [r5, #12]
 8005d1c:	059a      	lsls	r2, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_vfiprintf_r+0x1fe>
 8005d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d22:	f7fe fc03 	bl	800452c <__retarget_lock_release_recursive>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	065b      	lsls	r3, r3, #25
 8005d2a:	f53f af1f 	bmi.w	8005b6c <_vfiprintf_r+0x44>
 8005d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d30:	e71e      	b.n	8005b70 <_vfiprintf_r+0x48>
 8005d32:	ab03      	add	r3, sp, #12
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	462a      	mov	r2, r5
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <_vfiprintf_r+0x228>)
 8005d3a:	a904      	add	r1, sp, #16
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7fe f941 	bl	8003fc4 <_printf_i>
 8005d42:	e7e4      	b.n	8005d0e <_vfiprintf_r+0x1e6>
 8005d44:	080063e1 	.word	0x080063e1
 8005d48:	080063eb 	.word	0x080063eb
 8005d4c:	08003a95 	.word	0x08003a95
 8005d50:	08005b03 	.word	0x08005b03
 8005d54:	080063e7 	.word	0x080063e7

08005d58 <__sflush_r>:
 8005d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	0716      	lsls	r6, r2, #28
 8005d62:	4605      	mov	r5, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	d454      	bmi.n	8005e12 <__sflush_r+0xba>
 8005d68:	684b      	ldr	r3, [r1, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dc02      	bgt.n	8005d74 <__sflush_r+0x1c>
 8005d6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dd48      	ble.n	8005e06 <__sflush_r+0xae>
 8005d74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d045      	beq.n	8005e06 <__sflush_r+0xae>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d80:	682f      	ldr	r7, [r5, #0]
 8005d82:	6a21      	ldr	r1, [r4, #32]
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	d030      	beq.n	8005dea <__sflush_r+0x92>
 8005d88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	0759      	lsls	r1, r3, #29
 8005d8e:	d505      	bpl.n	8005d9c <__sflush_r+0x44>
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d96:	b10b      	cbz	r3, 8005d9c <__sflush_r+0x44>
 8005d98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005da0:	6a21      	ldr	r1, [r4, #32]
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b0      	blx	r6
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	d106      	bne.n	8005dba <__sflush_r+0x62>
 8005dac:	6829      	ldr	r1, [r5, #0]
 8005dae:	291d      	cmp	r1, #29
 8005db0:	d82b      	bhi.n	8005e0a <__sflush_r+0xb2>
 8005db2:	4a2a      	ldr	r2, [pc, #168]	@ (8005e5c <__sflush_r+0x104>)
 8005db4:	40ca      	lsrs	r2, r1
 8005db6:	07d6      	lsls	r6, r2, #31
 8005db8:	d527      	bpl.n	8005e0a <__sflush_r+0xb2>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	6062      	str	r2, [r4, #4]
 8005dbe:	04d9      	lsls	r1, r3, #19
 8005dc0:	6922      	ldr	r2, [r4, #16]
 8005dc2:	6022      	str	r2, [r4, #0]
 8005dc4:	d504      	bpl.n	8005dd0 <__sflush_r+0x78>
 8005dc6:	1c42      	adds	r2, r0, #1
 8005dc8:	d101      	bne.n	8005dce <__sflush_r+0x76>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b903      	cbnz	r3, 8005dd0 <__sflush_r+0x78>
 8005dce:	6560      	str	r0, [r4, #84]	@ 0x54
 8005dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dd2:	602f      	str	r7, [r5, #0]
 8005dd4:	b1b9      	cbz	r1, 8005e06 <__sflush_r+0xae>
 8005dd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	d002      	beq.n	8005de4 <__sflush_r+0x8c>
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7ff f9fe 	bl	80051e0 <_free_r>
 8005de4:	2300      	movs	r3, #0
 8005de6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005de8:	e00d      	b.n	8005e06 <__sflush_r+0xae>
 8005dea:	2301      	movs	r3, #1
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b0      	blx	r6
 8005df0:	4602      	mov	r2, r0
 8005df2:	1c50      	adds	r0, r2, #1
 8005df4:	d1c9      	bne.n	8005d8a <__sflush_r+0x32>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0c6      	beq.n	8005d8a <__sflush_r+0x32>
 8005dfc:	2b1d      	cmp	r3, #29
 8005dfe:	d001      	beq.n	8005e04 <__sflush_r+0xac>
 8005e00:	2b16      	cmp	r3, #22
 8005e02:	d11e      	bne.n	8005e42 <__sflush_r+0xea>
 8005e04:	602f      	str	r7, [r5, #0]
 8005e06:	2000      	movs	r0, #0
 8005e08:	e022      	b.n	8005e50 <__sflush_r+0xf8>
 8005e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	e01b      	b.n	8005e4a <__sflush_r+0xf2>
 8005e12:	690f      	ldr	r7, [r1, #16]
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	d0f6      	beq.n	8005e06 <__sflush_r+0xae>
 8005e18:	0793      	lsls	r3, r2, #30
 8005e1a:	680e      	ldr	r6, [r1, #0]
 8005e1c:	bf08      	it	eq
 8005e1e:	694b      	ldreq	r3, [r1, #20]
 8005e20:	600f      	str	r7, [r1, #0]
 8005e22:	bf18      	it	ne
 8005e24:	2300      	movne	r3, #0
 8005e26:	eba6 0807 	sub.w	r8, r6, r7
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	f1b8 0f00 	cmp.w	r8, #0
 8005e30:	dde9      	ble.n	8005e06 <__sflush_r+0xae>
 8005e32:	6a21      	ldr	r1, [r4, #32]
 8005e34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e36:	4643      	mov	r3, r8
 8005e38:	463a      	mov	r2, r7
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	47b0      	blx	r6
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	dc08      	bgt.n	8005e54 <__sflush_r+0xfc>
 8005e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	4407      	add	r7, r0
 8005e56:	eba8 0800 	sub.w	r8, r8, r0
 8005e5a:	e7e7      	b.n	8005e2c <__sflush_r+0xd4>
 8005e5c:	20400001 	.word	0x20400001

08005e60 <_fflush_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	4605      	mov	r5, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	b913      	cbnz	r3, 8005e70 <_fflush_r+0x10>
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	b118      	cbz	r0, 8005e7a <_fflush_r+0x1a>
 8005e72:	6a03      	ldr	r3, [r0, #32]
 8005e74:	b90b      	cbnz	r3, 8005e7a <_fflush_r+0x1a>
 8005e76:	f7fe fa4f 	bl	8004318 <__sinit>
 8005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f3      	beq.n	8005e6a <_fflush_r+0xa>
 8005e82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e84:	07d0      	lsls	r0, r2, #31
 8005e86:	d404      	bmi.n	8005e92 <_fflush_r+0x32>
 8005e88:	0599      	lsls	r1, r3, #22
 8005e8a:	d402      	bmi.n	8005e92 <_fflush_r+0x32>
 8005e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e8e:	f7fe fb4c 	bl	800452a <__retarget_lock_acquire_recursive>
 8005e92:	4628      	mov	r0, r5
 8005e94:	4621      	mov	r1, r4
 8005e96:	f7ff ff5f 	bl	8005d58 <__sflush_r>
 8005e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e9c:	07da      	lsls	r2, r3, #31
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	d4e4      	bmi.n	8005e6c <_fflush_r+0xc>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	059b      	lsls	r3, r3, #22
 8005ea6:	d4e1      	bmi.n	8005e6c <_fflush_r+0xc>
 8005ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eaa:	f7fe fb3f 	bl	800452c <__retarget_lock_release_recursive>
 8005eae:	e7dd      	b.n	8005e6c <_fflush_r+0xc>

08005eb0 <__swbuf_r>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	b118      	cbz	r0, 8005ec2 <__swbuf_r+0x12>
 8005eba:	6a03      	ldr	r3, [r0, #32]
 8005ebc:	b90b      	cbnz	r3, 8005ec2 <__swbuf_r+0x12>
 8005ebe:	f7fe fa2b 	bl	8004318 <__sinit>
 8005ec2:	69a3      	ldr	r3, [r4, #24]
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	071a      	lsls	r2, r3, #28
 8005eca:	d501      	bpl.n	8005ed0 <__swbuf_r+0x20>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b943      	cbnz	r3, 8005ee2 <__swbuf_r+0x32>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f82a 	bl	8005f2c <__swsetup_r>
 8005ed8:	b118      	cbz	r0, 8005ee2 <__swbuf_r+0x32>
 8005eda:	f04f 37ff 	mov.w	r7, #4294967295
 8005ede:	4638      	mov	r0, r7
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6922      	ldr	r2, [r4, #16]
 8005ee6:	1a98      	subs	r0, r3, r2
 8005ee8:	6963      	ldr	r3, [r4, #20]
 8005eea:	b2f6      	uxtb	r6, r6
 8005eec:	4283      	cmp	r3, r0
 8005eee:	4637      	mov	r7, r6
 8005ef0:	dc05      	bgt.n	8005efe <__swbuf_r+0x4e>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7ff ffb3 	bl	8005e60 <_fflush_r>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d1ed      	bne.n	8005eda <__swbuf_r+0x2a>
 8005efe:	68a3      	ldr	r3, [r4, #8]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	60a3      	str	r3, [r4, #8]
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	701e      	strb	r6, [r3, #0]
 8005f0c:	6962      	ldr	r2, [r4, #20]
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d004      	beq.n	8005f1e <__swbuf_r+0x6e>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d5e1      	bpl.n	8005ede <__swbuf_r+0x2e>
 8005f1a:	2e0a      	cmp	r6, #10
 8005f1c:	d1df      	bne.n	8005ede <__swbuf_r+0x2e>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f7ff ff9d 	bl	8005e60 <_fflush_r>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0d9      	beq.n	8005ede <__swbuf_r+0x2e>
 8005f2a:	e7d6      	b.n	8005eda <__swbuf_r+0x2a>

08005f2c <__swsetup_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4b29      	ldr	r3, [pc, #164]	@ (8005fd4 <__swsetup_r+0xa8>)
 8005f30:	4605      	mov	r5, r0
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	460c      	mov	r4, r1
 8005f36:	b118      	cbz	r0, 8005f40 <__swsetup_r+0x14>
 8005f38:	6a03      	ldr	r3, [r0, #32]
 8005f3a:	b90b      	cbnz	r3, 8005f40 <__swsetup_r+0x14>
 8005f3c:	f7fe f9ec 	bl	8004318 <__sinit>
 8005f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f44:	0719      	lsls	r1, r3, #28
 8005f46:	d422      	bmi.n	8005f8e <__swsetup_r+0x62>
 8005f48:	06da      	lsls	r2, r3, #27
 8005f4a:	d407      	bmi.n	8005f5c <__swsetup_r+0x30>
 8005f4c:	2209      	movs	r2, #9
 8005f4e:	602a      	str	r2, [r5, #0]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5a:	e033      	b.n	8005fc4 <__swsetup_r+0x98>
 8005f5c:	0758      	lsls	r0, r3, #29
 8005f5e:	d512      	bpl.n	8005f86 <__swsetup_r+0x5a>
 8005f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f62:	b141      	cbz	r1, 8005f76 <__swsetup_r+0x4a>
 8005f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	d002      	beq.n	8005f72 <__swsetup_r+0x46>
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f7ff f937 	bl	80051e0 <_free_r>
 8005f72:	2300      	movs	r3, #0
 8005f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	6923      	ldr	r3, [r4, #16]
 8005f90:	b94b      	cbnz	r3, 8005fa6 <__swsetup_r+0x7a>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d003      	beq.n	8005fa6 <__swsetup_r+0x7a>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f8c1 	bl	8006128 <__smakebuf_r>
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	f013 0201 	ands.w	r2, r3, #1
 8005fae:	d00a      	beq.n	8005fc6 <__swsetup_r+0x9a>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60a2      	str	r2, [r4, #8]
 8005fb4:	6962      	ldr	r2, [r4, #20]
 8005fb6:	4252      	negs	r2, r2
 8005fb8:	61a2      	str	r2, [r4, #24]
 8005fba:	6922      	ldr	r2, [r4, #16]
 8005fbc:	b942      	cbnz	r2, 8005fd0 <__swsetup_r+0xa4>
 8005fbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fc2:	d1c5      	bne.n	8005f50 <__swsetup_r+0x24>
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	0799      	lsls	r1, r3, #30
 8005fc8:	bf58      	it	pl
 8005fca:	6962      	ldrpl	r2, [r4, #20]
 8005fcc:	60a2      	str	r2, [r4, #8]
 8005fce:	e7f4      	b.n	8005fba <__swsetup_r+0x8e>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7f7      	b.n	8005fc4 <__swsetup_r+0x98>
 8005fd4:	20000018 	.word	0x20000018

08005fd8 <_sbrk_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d06      	ldr	r5, [pc, #24]	@ (8005ff4 <_sbrk_r+0x1c>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fb fad2 	bl	800158c <_sbrk>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_sbrk_r+0x1a>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_sbrk_r+0x1a>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20000338 	.word	0x20000338

08005ff8 <memcpy>:
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006000:	d100      	bne.n	8006004 <memcpy+0xc>
 8006002:	4770      	bx	lr
 8006004:	b510      	push	{r4, lr}
 8006006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600e:	4291      	cmp	r1, r2
 8006010:	d1f9      	bne.n	8006006 <memcpy+0xe>
 8006012:	bd10      	pop	{r4, pc}

08006014 <__assert_func>:
 8006014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006016:	4614      	mov	r4, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4b09      	ldr	r3, [pc, #36]	@ (8006040 <__assert_func+0x2c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4605      	mov	r5, r0
 8006020:	68d8      	ldr	r0, [r3, #12]
 8006022:	b14c      	cbz	r4, 8006038 <__assert_func+0x24>
 8006024:	4b07      	ldr	r3, [pc, #28]	@ (8006044 <__assert_func+0x30>)
 8006026:	9100      	str	r1, [sp, #0]
 8006028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800602c:	4906      	ldr	r1, [pc, #24]	@ (8006048 <__assert_func+0x34>)
 800602e:	462b      	mov	r3, r5
 8006030:	f000 f842 	bl	80060b8 <fiprintf>
 8006034:	f000 f8d6 	bl	80061e4 <abort>
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <__assert_func+0x38>)
 800603a:	461c      	mov	r4, r3
 800603c:	e7f3      	b.n	8006026 <__assert_func+0x12>
 800603e:	bf00      	nop
 8006040:	20000018 	.word	0x20000018
 8006044:	080063fc 	.word	0x080063fc
 8006048:	08006409 	.word	0x08006409
 800604c:	08006437 	.word	0x08006437

08006050 <_calloc_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	fba1 5402 	umull	r5, r4, r1, r2
 8006056:	b934      	cbnz	r4, 8006066 <_calloc_r+0x16>
 8006058:	4629      	mov	r1, r5
 800605a:	f7ff f935 	bl	80052c8 <_malloc_r>
 800605e:	4606      	mov	r6, r0
 8006060:	b928      	cbnz	r0, 800606e <_calloc_r+0x1e>
 8006062:	4630      	mov	r0, r6
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	220c      	movs	r2, #12
 8006068:	6002      	str	r2, [r0, #0]
 800606a:	2600      	movs	r6, #0
 800606c:	e7f9      	b.n	8006062 <_calloc_r+0x12>
 800606e:	462a      	mov	r2, r5
 8006070:	4621      	mov	r1, r4
 8006072:	f7fe f9dc 	bl	800442e <memset>
 8006076:	e7f4      	b.n	8006062 <_calloc_r+0x12>

08006078 <__ascii_mbtowc>:
 8006078:	b082      	sub	sp, #8
 800607a:	b901      	cbnz	r1, 800607e <__ascii_mbtowc+0x6>
 800607c:	a901      	add	r1, sp, #4
 800607e:	b142      	cbz	r2, 8006092 <__ascii_mbtowc+0x1a>
 8006080:	b14b      	cbz	r3, 8006096 <__ascii_mbtowc+0x1e>
 8006082:	7813      	ldrb	r3, [r2, #0]
 8006084:	600b      	str	r3, [r1, #0]
 8006086:	7812      	ldrb	r2, [r2, #0]
 8006088:	1e10      	subs	r0, r2, #0
 800608a:	bf18      	it	ne
 800608c:	2001      	movne	r0, #1
 800608e:	b002      	add	sp, #8
 8006090:	4770      	bx	lr
 8006092:	4610      	mov	r0, r2
 8006094:	e7fb      	b.n	800608e <__ascii_mbtowc+0x16>
 8006096:	f06f 0001 	mvn.w	r0, #1
 800609a:	e7f8      	b.n	800608e <__ascii_mbtowc+0x16>

0800609c <__ascii_wctomb>:
 800609c:	4603      	mov	r3, r0
 800609e:	4608      	mov	r0, r1
 80060a0:	b141      	cbz	r1, 80060b4 <__ascii_wctomb+0x18>
 80060a2:	2aff      	cmp	r2, #255	@ 0xff
 80060a4:	d904      	bls.n	80060b0 <__ascii_wctomb+0x14>
 80060a6:	228a      	movs	r2, #138	@ 0x8a
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	4770      	bx	lr
 80060b0:	700a      	strb	r2, [r1, #0]
 80060b2:	2001      	movs	r0, #1
 80060b4:	4770      	bx	lr
	...

080060b8 <fiprintf>:
 80060b8:	b40e      	push	{r1, r2, r3}
 80060ba:	b503      	push	{r0, r1, lr}
 80060bc:	4601      	mov	r1, r0
 80060be:	ab03      	add	r3, sp, #12
 80060c0:	4805      	ldr	r0, [pc, #20]	@ (80060d8 <fiprintf+0x20>)
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	6800      	ldr	r0, [r0, #0]
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	f7ff fd2d 	bl	8005b28 <_vfiprintf_r>
 80060ce:	b002      	add	sp, #8
 80060d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d4:	b003      	add	sp, #12
 80060d6:	4770      	bx	lr
 80060d8:	20000018 	.word	0x20000018

080060dc <__swhatbuf_r>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	460c      	mov	r4, r1
 80060e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e4:	2900      	cmp	r1, #0
 80060e6:	b096      	sub	sp, #88	@ 0x58
 80060e8:	4615      	mov	r5, r2
 80060ea:	461e      	mov	r6, r3
 80060ec:	da0d      	bge.n	800610a <__swhatbuf_r+0x2e>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80060f4:	f04f 0100 	mov.w	r1, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2340      	movne	r3, #64	@ 0x40
 80060fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006100:	2000      	movs	r0, #0
 8006102:	6031      	str	r1, [r6, #0]
 8006104:	602b      	str	r3, [r5, #0]
 8006106:	b016      	add	sp, #88	@ 0x58
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	466a      	mov	r2, sp
 800610c:	f000 f848 	bl	80061a0 <_fstat_r>
 8006110:	2800      	cmp	r0, #0
 8006112:	dbec      	blt.n	80060ee <__swhatbuf_r+0x12>
 8006114:	9901      	ldr	r1, [sp, #4]
 8006116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800611a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800611e:	4259      	negs	r1, r3
 8006120:	4159      	adcs	r1, r3
 8006122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006126:	e7eb      	b.n	8006100 <__swhatbuf_r+0x24>

08006128 <__smakebuf_r>:
 8006128:	898b      	ldrh	r3, [r1, #12]
 800612a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612c:	079d      	lsls	r5, r3, #30
 800612e:	4606      	mov	r6, r0
 8006130:	460c      	mov	r4, r1
 8006132:	d507      	bpl.n	8006144 <__smakebuf_r+0x1c>
 8006134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	2301      	movs	r3, #1
 800613e:	6163      	str	r3, [r4, #20]
 8006140:	b003      	add	sp, #12
 8006142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006144:	ab01      	add	r3, sp, #4
 8006146:	466a      	mov	r2, sp
 8006148:	f7ff ffc8 	bl	80060dc <__swhatbuf_r>
 800614c:	9f00      	ldr	r7, [sp, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	4639      	mov	r1, r7
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff f8b8 	bl	80052c8 <_malloc_r>
 8006158:	b948      	cbnz	r0, 800616e <__smakebuf_r+0x46>
 800615a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800615e:	059a      	lsls	r2, r3, #22
 8006160:	d4ee      	bmi.n	8006140 <__smakebuf_r+0x18>
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	e7e2      	b.n	8006134 <__smakebuf_r+0xc>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	6020      	str	r0, [r4, #0]
 8006172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006176:	81a3      	strh	r3, [r4, #12]
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800617e:	b15b      	cbz	r3, 8006198 <__smakebuf_r+0x70>
 8006180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f81d 	bl	80061c4 <_isatty_r>
 800618a:	b128      	cbz	r0, 8006198 <__smakebuf_r+0x70>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	89a3      	ldrh	r3, [r4, #12]
 800619a:	431d      	orrs	r5, r3
 800619c:	81a5      	strh	r5, [r4, #12]
 800619e:	e7cf      	b.n	8006140 <__smakebuf_r+0x18>

080061a0 <_fstat_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d07      	ldr	r5, [pc, #28]	@ (80061c0 <_fstat_r+0x20>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	f7fb f9c5 	bl	800153c <_fstat>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	d102      	bne.n	80061bc <_fstat_r+0x1c>
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	b103      	cbz	r3, 80061bc <_fstat_r+0x1c>
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	20000338 	.word	0x20000338

080061c4 <_isatty_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	@ (80061e0 <_isatty_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fb f9c4 	bl	800155c <_isatty>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_isatty_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_isatty_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000338 	.word	0x20000338

080061e4 <abort>:
 80061e4:	b508      	push	{r3, lr}
 80061e6:	2006      	movs	r0, #6
 80061e8:	f000 f82c 	bl	8006244 <raise>
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7fb f971 	bl	80014d4 <_exit>

080061f2 <_raise_r>:
 80061f2:	291f      	cmp	r1, #31
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4605      	mov	r5, r0
 80061f8:	460c      	mov	r4, r1
 80061fa:	d904      	bls.n	8006206 <_raise_r+0x14>
 80061fc:	2316      	movs	r3, #22
 80061fe:	6003      	str	r3, [r0, #0]
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	bd38      	pop	{r3, r4, r5, pc}
 8006206:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006208:	b112      	cbz	r2, 8006210 <_raise_r+0x1e>
 800620a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800620e:	b94b      	cbnz	r3, 8006224 <_raise_r+0x32>
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f831 	bl	8006278 <_getpid_r>
 8006216:	4622      	mov	r2, r4
 8006218:	4601      	mov	r1, r0
 800621a:	4628      	mov	r0, r5
 800621c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006220:	f000 b818 	b.w	8006254 <_kill_r>
 8006224:	2b01      	cmp	r3, #1
 8006226:	d00a      	beq.n	800623e <_raise_r+0x4c>
 8006228:	1c59      	adds	r1, r3, #1
 800622a:	d103      	bne.n	8006234 <_raise_r+0x42>
 800622c:	2316      	movs	r3, #22
 800622e:	6003      	str	r3, [r0, #0]
 8006230:	2001      	movs	r0, #1
 8006232:	e7e7      	b.n	8006204 <_raise_r+0x12>
 8006234:	2100      	movs	r1, #0
 8006236:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800623a:	4620      	mov	r0, r4
 800623c:	4798      	blx	r3
 800623e:	2000      	movs	r0, #0
 8006240:	e7e0      	b.n	8006204 <_raise_r+0x12>
	...

08006244 <raise>:
 8006244:	4b02      	ldr	r3, [pc, #8]	@ (8006250 <raise+0xc>)
 8006246:	4601      	mov	r1, r0
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	f7ff bfd2 	b.w	80061f2 <_raise_r>
 800624e:	bf00      	nop
 8006250:	20000018 	.word	0x20000018

08006254 <_kill_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d07      	ldr	r5, [pc, #28]	@ (8006274 <_kill_r+0x20>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	f7fb f927 	bl	80014b4 <_kill>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d102      	bne.n	8006270 <_kill_r+0x1c>
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	b103      	cbz	r3, 8006270 <_kill_r+0x1c>
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	bd38      	pop	{r3, r4, r5, pc}
 8006272:	bf00      	nop
 8006274:	20000338 	.word	0x20000338

08006278 <_getpid_r>:
 8006278:	f7fb b914 	b.w	80014a4 <_getpid>

0800627c <_init>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	bf00      	nop
 8006280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006282:	bc08      	pop	{r3}
 8006284:	469e      	mov	lr, r3
 8006286:	4770      	bx	lr

08006288 <_fini>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr
